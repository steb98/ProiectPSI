

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Nov 24 18:48:41 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F6585
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Version 2.40
    61                           ; Generated 04/07/2022 GMT
    62                           ; 
    63                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F6585 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95   000000                     
    96 ;; Function _LIGHTS_DemoState1 is unused but had its address taken
    97   000000                     
    98 ;; Function _LIGHTS_DemoState2 is unused but had its address taken
    99   000000                     
   100 ;; Function _LIGHTS_DemoEventPoll is unused but had its address taken
   101   000000                     
   102                           	psect	idataCOMRAM
   103   000D62                     __pidataCOMRAM:
   104                           	callstack 0
   105                           
   106                           ;initializer for SGL_BlinkSwitchOnState@firstEntry
   107   000D62  01                 	db	1
   108                           
   109                           ;initializer for SGL_BlinkPasiveState@firstEntry
   110   000D63  01                 	db	1
   111   000000                     _PR2	set	4043
   112   000000                     _TMR2	set	4044
   113   000000                     _T2CON	set	4042
   114   000000                     _PORTC	set	3970
   115   000000                     _PORTD	set	3971
   116   000000                     _TRISAbits	set	3986
   117   000000                     _PIE1bits	set	3997
   118   000000                     _PIR1bits	set	3998
   119   000000                     _ADCON2bits	set	4032
   120   000000                     _ADCON1bits	set	4033
   121   000000                     _ADCON0bits	set	4034
   122   000000                     _ADRESL	set	4035
   123   000000                     _ADRESH	set	4036
   124   000000                     _T2CONbits	set	4042
   125   000000                     _INTCONbits	set	4082
   126   000000                     _IPR1bits	set	3999
   127   000000                     _TRISCbits	set	3988
   128   000000                     _TRISEbits	set	3990
   129   000000                     _TRISD	set	3989
   130   000000                     _PORTE	set	3972
   131                           
   132                           ; #config settings
   133                           
   134                           	psect	cinit
   135   000BCC                     __pcinit:
   136                           	callstack 0
   137   000BCC                     start_initialization:
   138                           	callstack 0
   139   000BCC                     __initialization:
   140                           	callstack 0
   141                           
   142                           ; Initialize objects allocated to COMRAM (2 bytes)
   143                           ; load TBLPTR registers with __pidataCOMRAM
   144   000BCC  0E62               	movlw	low __pidataCOMRAM
   145   000BCE  6EF6               	movwf	tblptrl,c
   146   000BD0  0E0D               	movlw	high __pidataCOMRAM
   147   000BD2  6EF7               	movwf	tblptrh,c
   148   000BD4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   149   000BD6  6EF8               	movwf	tblptru,c
   150   000BD8  0009               	tblrd		*+	;fetch initializer
   151   000BDA  CFF5 F056          	movff	tablat,__pdataCOMRAM
   152   000BDE  0009               	tblrd		*+	;fetch initializer
   153   000BE0  CFF5 F057          	movff	tablat,__pdataCOMRAM+1
   154                           
   155                           ; Clear objects allocated to COMRAM (54 bytes)
   156   000BE4  EE00  F001         	lfsr	0,__pbssCOMRAM
   157   000BE8  0E36               	movlw	54
   158   000BEA                     clear_0:
   159   000BEA  6AEE               	clrf	postinc0,c
   160   000BEC  06E8               	decf	wreg,f,c
   161   000BEE  E1FD               	bnz	clear_0
   162   000BF0                     end_of_initialization:
   163                           	callstack 0
   164   000BF0                     __end_of__initialization:
   165                           	callstack 0
   166   000BF0  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   167   000BF2  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   168   000BF4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   169   000BF6  6EF8               	movwf	tblptru,c
   170   000BF8  0100               	movlb	0
   171   000BFA  EF98  F006         	goto	_main	;jump to C main() function
   172                           
   173                           	psect	bssCOMRAM
   174   000001                     __pbssCOMRAM:
   175                           	callstack 0
   176   000001                     _blinkerSM:
   177                           	callstack 0
   178   000001                     	ds	12
   179   00000D                     _headLightSM:
   180                           	callstack 0
   181   00000D                     	ds	9
   182   000016                     _demoSM:
   183                           	callstack 0
   184   000016                     	ds	8
   185   00001E                     _au16AdcReadValue:
   186                           	callstack 0
   187   00001E                     	ds	4
   188   000022                     SGL_BlinkSwitchOffState@side:
   189                           	callstack 0
   190   000022                     	ds	2
   191   000024                     SGL_BlinkSwitchOffState@counter:
   192                           	callstack 0
   193   000024                     	ds	2
   194   000026                     SGL_BlinkSwitchOnState@counter:
   195                           	callstack 0
   196   000026                     	ds	2
   197   000028                     SGL_BlinkPasiveState@counter:
   198                           	callstack 0
   199   000028                     	ds	2
   200   00002A                     _sched_bTicked:
   201                           	callstack 0
   202   00002A                     	ds	2
   203   00002C                     _sched_gTick1s:
   204                           	callstack 0
   205   00002C                     	ds	2
   206   00002E                     SGL_isNight@prevState:
   207                           	callstack 0
   208   00002E                     	ds	1
   209   00002F                     LIGHTS_BrakeRun@counter:
   210                           	callstack 0
   211   00002F                     	ds	1
   212   000030                     SGL_BlinkSwitchOffState@cycles:
   213                           	callstack 0
   214   000030                     	ds	1
   215   000031                     SGL_BlinkSwitchOnState@side:
   216                           	callstack 0
   217   000031                     	ds	1
   218   000032                     _sched_gTick100ms:
   219                           	callstack 0
   220   000032                     	ds	1
   221   000033                     _sched_gTick10ms:
   222                           	callstack 0
   223   000033                     	ds	1
   224   000034                     SGL_BlinkSwitchOffState@toggleLights:
   225                           	callstack 0
   226   000034                     	ds	1
   227   000035                     SGL_BlinkSwitchOnState@toggleLights:
   228                           	callstack 0
   229   000035                     	ds	1
   230   000036                     SGL_BlinkPasiveState@toggleLights:
   231                           	callstack 0
   232   000036                     	ds	1
   233                           
   234                           	psect	dataCOMRAM
   235   000056                     __pdataCOMRAM:
   236                           	callstack 0
   237   000056                     SGL_BlinkSwitchOnState@firstEntry:
   238                           	callstack 0
   239   000056                     	ds	1
   240   000057                     SGL_BlinkPasiveState@firstEntry:
   241                           	callstack 0
   242   000057                     	ds	1
   243                           
   244                           	psect	cstackBANK0
   245   000060                     __pcstackBANK0:
   246                           	callstack 0
   247   000060                     ??_SGL_BlinkSwitchOffState:
   248                           
   249                           ; 1 bytes @ 0x0
   250   000060                     	ds	2
   251                           
   252                           	psect	cstackCOMRAM
   253   000037                     __pcstackCOMRAM:
   254                           	callstack 0
   255   000037                     ??_ADC_vConversionCompleted:
   256   000037                     
   257                           ; 1 bytes @ 0x0
   258   000037                     	ds	3
   259   00003A                     ??_INT_vInterruptHandler:
   260                           
   261                           ; 1 bytes @ 0x3
   262   00003A                     	ds	4
   263   00003E                     ?_ADC_u16ReadAdcValue:
   264                           	callstack 0
   265   00003E                     ?_PCS_T16GetInputPortC:
   266                           	callstack 0
   267   00003E                     ?___ftpack:
   268                           	callstack 0
   269   00003E                     PCS_vSetOutputPortD@u8Value:
   270                           	callstack 0
   271   00003E                     PCS_vSetOutputPortE@u8Value:
   272                           	callstack 0
   273   00003E                     ___ftpack@arg:
   274                           	callstack 0
   275                           
   276                           ; 3 bytes @ 0x7
   277   00003E                     	ds	1
   278   00003F                     ??_PCS_vSetOutputPortD:
   279   00003F                     ??_PCS_vSetOutputPortE:
   280                           
   281                           ; 1 bytes @ 0x8
   282   00003F                     	ds	1
   283   000040                     ??_PCS_T16GetInputPortC:
   284   000040                     _ADC_u16ReadAdcValue$374:
   285                           	callstack 0
   286                           
   287                           ; 2 bytes @ 0x9
   288   000040                     	ds	1
   289   000041                     ___ftpack@exp:
   290                           	callstack 0
   291   000041                     _PCS_vSetOutputPortD$706:
   292                           	callstack 0
   293   000041                     _PCS_vSetOutputPortE$712:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0xA
   297   000041                     	ds	1
   298   000042                     ADC_u16ReadAdcValue@U8ChannelValue:
   299                           	callstack 0
   300   000042                     ___ftpack@sign:
   301                           	callstack 0
   302                           
   303                           ; 1 bytes @ 0xB
   304   000042                     	ds	1
   305   000043                     ??___ftpack:
   306   000043                     ADC_u16ReadAdcValue@U8Channel:
   307                           	callstack 0
   308   000043                     PCS_vSetOutputPortD@u8BitValue:
   309                           	callstack 0
   310   000043                     PCS_vSetOutputPortE@u8BitValue:
   311                           	callstack 0
   312                           
   313                           ; 1 bytes @ 0xC
   314   000043                     	ds	1
   315   000044                     PCS_vSetOutputPortD@u8BitNumber:
   316                           	callstack 0
   317   000044                     PCS_vSetOutputPortE@u8BitNumber:
   318                           	callstack 0
   319   000044                     _PCS_T16GetInputPortC$716:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0xD
   323   000044                     	ds	1
   324   000045                     PCS_vSetOutputPortD@u8BitNumberValue:
   325                           	callstack 0
   326   000045                     PCS_vSetOutputPortE@u8BitNumberValue:
   327                           	callstack 0
   328                           
   329                           ; 1 bytes @ 0xE
   330   000045                     	ds	1
   331   000046                     ?___lwtoft:
   332                           	callstack 0
   333   000046                     PCS_T16GetInputPortC@u8BitNumber:
   334                           	callstack 0
   335   000046                     ___lwtoft@c:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0xF
   339   000046                     	ds	1
   340   000047                     PCS_T16GetInputPortC@u8BitNumberValue:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0x10
   344   000047                     	ds	1
   345   000048                     ?_IOC_T16GetInputPort:
   346                           	callstack 0
   347   000048                     IOC_T16GetInputPort@u16ChannelSelect:
   348                           	callstack 0
   349                           
   350                           ; 2 bytes @ 0x11
   351   000048                     	ds	1
   352   000049                     ___ftge@ff1:
   353                           	callstack 0
   354                           
   355                           ; 3 bytes @ 0x12
   356   000049                     	ds	1
   357   00004A                     IOC_T16GetInputPort@pinValue:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x13
   361   00004A                     	ds	2
   362   00004C                     IOC_T16GetInputPort@u16ChannelMask:
   363                           	callstack 0
   364   00004C                     ___ftge@ff2:
   365                           	callstack 0
   366                           
   367                           ; 3 bytes @ 0x15
   368   00004C                     	ds	2
   369   00004E                     IOC_vSetOutputPort@u16ChannelSelect:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x17
   373   00004E                     	ds	1
   374   00004F                     ??___ftge:
   375                           
   376                           ; 1 bytes @ 0x18
   377   00004F                     	ds	1
   378   000050                     IOC_vSetOutputPort@u8Value:
   379                           	callstack 0
   380                           
   381                           ; 1 bytes @ 0x19
   382   000050                     	ds	1
   383   000051                     IOC_vSetOutputPort@u16ChannelMask:
   384                           	callstack 0
   385                           
   386                           ; 2 bytes @ 0x1A
   387   000051                     	ds	1
   388   000052                     SGL_isNight@currentLightLevel:
   389                           	callstack 0
   390                           
   391                           ; 2 bytes @ 0x1B
   392   000052                     	ds	1
   393   000053                     SGL_setAllHazardLights@value:
   394                           	callstack 0
   395   000053                     SGL_setSideHazardLights@side:
   396                           	callstack 0
   397   000053                     SGL_toggleAllHazardLights@toggle:
   398                           	callstack 0
   399   000053                     SGL_toggleSideHazardLights@toggle:
   400                           	callstack 0
   401                           
   402                           ; 2 bytes @ 0x1C
   403   000053                     	ds	1
   404   000054                     SGL_setSideHazardLights@value:
   405                           	callstack 0
   406                           
   407                           ; 1 bytes @ 0x1D
   408   000054                     	ds	1
   409   000055                     SGL_toggleSideHazardLights@side:
   410                           	callstack 0
   411                           
   412                           ; 1 bytes @ 0x1E
   413   000055                     	ds	1
   414   000056                     
   415                           ; 1 bytes @ 0x1F
   416 ;;
   417 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   418 ;;
   419 ;; *************** function _main *****************
   420 ;; Defined at:
   421 ;;		line 11 in file "main.c"
   422 ;; Parameters:    Size  Location     Type
   423 ;;		None
   424 ;; Auto vars:     Size  Location     Type
   425 ;;		None
   426 ;; Return value:  Size  Location     Type
   427 ;;                  1    wreg      void 
   428 ;; Registers used:
   429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   439 ;;Total ram usage:        0 bytes
   440 ;; Hardware stack levels required when called: 9
   441 ;; This function calls:
   442 ;;		_SCHED_vInitSystem
   443 ;;		_SCHED_vStartScheduler
   444 ;; This function is called by:
   445 ;;		Startup code after reset
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           	psect	text0
   450   000D30                     __ptext0:
   451                           	callstack 0
   452   000D30                     _main:
   453                           	callstack 0
   454   000D30  FFFF               	dw	65535	; assembler added errata NOP
   455                           
   456                           ;main.c: 13: SCHED_vInitSystem();
   457                           
   458                           ;incstack = 0
   459   000D32  EC6F  F006         	call	_SCHED_vInitSystem	;wreg free
   460                           
   461                           ;main.c: 14: SCHED_vStartScheduler();
   462   000D36  ECCA  F003         	call	_SCHED_vStartScheduler	;wreg free
   463   000D3A  EF26  F000         	goto	start
   464   000D3E                     __end_of_main:
   465                           	callstack 0
   466                           
   467 ;; *************** function _SCHED_vStartScheduler *****************
   468 ;; Defined at:
   469 ;;		line 29 in file "sched.c"
   470 ;; Parameters:    Size  Location     Type
   471 ;;		None
   472 ;; Auto vars:     Size  Location     Type
   473 ;;		None
   474 ;; Return value:  Size  Location     Type
   475 ;;                  1    wreg      void 
   476 ;; Registers used:
   477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   478 ;; Tracked objects:
   479 ;;		On entry : 0/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   487 ;;Total ram usage:        0 bytes
   488 ;; Hardware stack levels used: 1
   489 ;; Hardware stack levels required when called: 8
   490 ;; This function calls:
   491 ;;		_TASK_vTask100ms
   492 ;;		_TASK_vTask10ms
   493 ;;		_TASK_vTask1ms
   494 ;;		_TASK_vTask1s
   495 ;;		_TASK_vTaskAppInit
   496 ;; This function is called by:
   497 ;;		_main
   498 ;; This function uses a non-reentrant model
   499 ;;
   500                           
   501                           	psect	text1
   502   000794                     __ptext1:
   503                           	callstack 0
   504   000794                     _SCHED_vStartScheduler:
   505                           	callstack 0
   506   000794  FFFF               	dw	65535	; assembler added errata NOP
   507                           
   508                           ;sched.c: 31: sched_gTick10ms = 0;
   509                           
   510                           ;incstack = 0
   511   000796  0E00               	movlw	0
   512   000798  6E33               	movwf	_sched_gTick10ms^0,c
   513                           
   514                           ;sched.c: 32: sched_gTick100ms = 0;
   515   00079A  0E00               	movlw	0
   516   00079C  6E32               	movwf	_sched_gTick100ms^0,c
   517                           
   518                           ;sched.c: 33: sched_gTick1s = 0;
   519   00079E  0E00               	movlw	0
   520   0007A0  6E2D               	movwf	(_sched_gTick1s+1)^0,c
   521   0007A2  0E00               	movlw	0
   522   0007A4  6E2C               	movwf	_sched_gTick1s^0,c
   523                           
   524                           ;sched.c: 34: sched_bTicked = 0;;
   525   0007A6  0E00               	movlw	0
   526   0007A8  6E2B               	movwf	(_sched_bTicked+1)^0,c
   527   0007AA  0E00               	movlw	0
   528   0007AC  6E2A               	movwf	_sched_bTicked^0,c
   529                           
   530                           ;sched.c: 36: TASK_vTaskAppInit();
   531   0007AE  EC8F  F006         	call	_TASK_vTaskAppInit	;wreg free
   532   0007B2                     l2423:
   533   0007B2  FFFF               	dw	65535	; assembler added errata NOP
   534                           
   535                           ;sched.c: 39: {;sched.c: 40: if(sched_bTicked)
   536   0007B4  502A               	movf	_sched_bTicked^0,w,c
   537   0007B6  102B               	iorwf	(_sched_bTicked+1)^0,w,c
   538   0007B8  B4D8               	btfsc	status,2,c
   539   0007BA  D7FB               	goto	l2423
   540                           
   541                           ;sched.c: 41: {;sched.c: 42: sched_bTicked = 0;;
   542   0007BC  0E00               	movlw	0
   543   0007BE  6E2B               	movwf	(_sched_bTicked+1)^0,c
   544   0007C0  0E00               	movlw	0
   545   0007C2  6E2A               	movwf	_sched_bTicked^0,c
   546                           
   547                           ;sched.c: 43: TASK_vTask1ms();
   548   0007C4  EC9F  F006         	call	_TASK_vTask1ms	;wreg free
   549                           
   550                           ;sched.c: 45: if(sched_gTick10ms == 10)
   551   0007C8  0E0A               	movlw	10
   552   0007CA  1833               	xorwf	_sched_gTick10ms^0,w,c
   553   0007CC  A4D8               	btfss	status,2,c
   554   0007CE  D004               	goto	l2435
   555                           
   556                           ;sched.c: 46: {;sched.c: 47: sched_gTick10ms = 0;
   557   0007D0  0E00               	movlw	0
   558   0007D2  6E33               	movwf	_sched_gTick10ms^0,c
   559                           
   560                           ;sched.c: 48: TASK_vTask10ms();
   561   0007D4  ECA6  F006         	call	_TASK_vTask10ms	;wreg free
   562   0007D8                     l2435:
   563   0007D8  FFFF               	dw	65535	; assembler added errata NOP
   564                           
   565                           ;sched.c: 49: };sched.c: 50: if(sched_gTick100ms == 100)
   566   0007DA  0E64               	movlw	100
   567   0007DC  1832               	xorwf	_sched_gTick100ms^0,w,c
   568   0007DE  A4D8               	btfss	status,2,c
   569   0007E0  D004               	goto	l2441
   570                           
   571                           ;sched.c: 51: {;sched.c: 52: sched_gTick100ms = 0;
   572   0007E2  0E00               	movlw	0
   573   0007E4  6E32               	movwf	_sched_gTick100ms^0,c
   574                           
   575                           ;sched.c: 53: TASK_vTask100ms();
   576   0007E6  ECAE  F006         	call	_TASK_vTask100ms	;wreg free
   577   0007EA                     l2441:
   578   0007EA  FFFF               	dw	65535	; assembler added errata NOP
   579                           
   580                           ;sched.c: 54: };sched.c: 55: if(sched_gTick1s == 1000)
   581   0007EC  0EE8               	movlw	232
   582   0007EE  182C               	xorwf	_sched_gTick1s^0,w,c
   583   0007F0  E1E0               	bnz	l2423
   584   0007F2  0E03               	movlw	3
   585   0007F4  182D               	xorwf	(_sched_gTick1s+1)^0,w,c
   586   0007F6  A4D8               	btfss	status,2,c
   587   0007F8  D7DC               	goto	l2423
   588                           
   589                           ;sched.c: 56: {;sched.c: 57: sched_gTick1s = 0;
   590   0007FA  0E00               	movlw	0
   591   0007FC  6E2D               	movwf	(_sched_gTick1s+1)^0,c
   592   0007FE  0E00               	movlw	0
   593   000800  6E2C               	movwf	_sched_gTick1s^0,c
   594                           
   595                           ;sched.c: 58: TASK_vTask1s();
   596   000802  ECAB  F006         	call	_TASK_vTask1s	;wreg free
   597   000806  D7D5               	goto	l2423
   598   000808  FFFF               	dw	65535	; errata NOP
   599   00080A                     __end_of_SCHED_vStartScheduler:
   600                           	callstack 0
   601                           
   602 ;; *************** function _TASK_vTaskAppInit *****************
   603 ;; Defined at:
   604 ;;		line 6 in file "tasks.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;		None
   607 ;; Auto vars:     Size  Location     Type
   608 ;;		None
   609 ;; Return value:  Size  Location     Type
   610 ;;                  1    wreg      void 
   611 ;; Registers used:
   612 ;;		wreg, status,2, status,0, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   622 ;;Total ram usage:        0 bytes
   623 ;; Hardware stack levels used: 1
   624 ;; Hardware stack levels required when called: 5
   625 ;; This function calls:
   626 ;;		_LIGHTS_BrakeInit
   627 ;;		_LIGHTS_HeadLampInit
   628 ;;		_SGL_BlinkersInit
   629 ;; This function is called by:
   630 ;;		_SCHED_vStartScheduler
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text2
   635   000D1E                     __ptext2:
   636                           	callstack 0
   637   000D1E                     _TASK_vTaskAppInit:
   638                           	callstack 0
   639   000D1E  FFFF               	dw	65535	; assembler added errata NOP
   640                           
   641                           ;tasks.c: 8: SGL_BlinkersInit();
   642                           
   643                           ;incstack = 0
   644   000D20  EC96  F005         	call	_SGL_BlinkersInit	;wreg free
   645                           
   646                           ;tasks.c: 9: LIGHTS_BrakeInit();
   647   000D24  EC64  F006         	call	_LIGHTS_BrakeInit	;wreg free
   648                           
   649                           ;tasks.c: 10: LIGHTS_HeadLampInit();
   650   000D28  EC18  F006         	call	_LIGHTS_HeadLampInit	;wreg free
   651   000D2C  0012               	return		;funcret
   652   000D2E  FFFF               	dw	65535	; errata NOP
   653   000D30                     __end_of_TASK_vTaskAppInit:
   654                           	callstack 0
   655                           
   656 ;; *************** function _SGL_BlinkersInit *****************
   657 ;; Defined at:
   658 ;;		line 229 in file "sgl.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;		None
   661 ;; Auto vars:     Size  Location     Type
   662 ;;		None
   663 ;; Return value:  Size  Location     Type
   664 ;;                  1    wreg      void 
   665 ;; Registers used:
   666 ;;		wreg, status,2, status,0
   667 ;; Tracked objects:
   668 ;;		On entry : 0/0
   669 ;;		On exit  : 0/0
   670 ;;		Unchanged: 0/0
   671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   676 ;;Total ram usage:        0 bytes
   677 ;; Hardware stack levels used: 1
   678 ;; Hardware stack levels required when called: 2
   679 ;; This function calls:
   680 ;;		Nothing
   681 ;; This function is called by:
   682 ;;		_TASK_vTaskAppInit
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text3
   687   000B2C                     __ptext3:
   688                           	callstack 0
   689   000B2C                     _SGL_BlinkersInit:
   690                           	callstack 0
   691   000B2C  FFFF               	dw	65535	; assembler added errata NOP
   692                           
   693                           ;sgl.c: 231: blinkerSM._currentState = SGL_BlinkPasiveState;
   694                           
   695                           ;incstack = 0
   696   000B2E  0EBA               	movlw	low _SGL_BlinkPasiveState
   697   000B30  6E01               	movwf	_blinkerSM^0,c
   698   000B32  0E02               	movlw	high _SGL_BlinkPasiveState
   699   000B34  6E02               	movwf	(_blinkerSM+1)^0,c
   700                           
   701                           ;sgl.c: 232: blinkerSM._pollEvents = SGL_BlinkEventPoll;
   702   000B36  0E62               	movlw	low _SGL_BlinkEventPoll
   703   000B38  6E03               	movwf	(_blinkerSM+2)^0,c
   704   000B3A  0E0B               	movlw	high _SGL_BlinkEventPoll
   705   000B3C  6E04               	movwf	(_blinkerSM+3)^0,c
   706                           
   707                           ;sgl.c: 233: blinkerSM.avarie = 0;
   708   000B3E  0E00               	movlw	0
   709   000B40  6E07               	movwf	(_blinkerSM+6)^0,c
   710                           
   711                           ;sgl.c: 234: blinkerSM.firstEntry = 1;
   712   000B42  0E00               	movlw	0
   713   000B44  6E06               	movwf	(_blinkerSM+5)^0,c
   714   000B46  0E01               	movlw	1
   715   000B48  6E05               	movwf	(_blinkerSM+4)^0,c
   716                           
   717                           ;sgl.c: 235: blinkerSM.leftSwitch = 0;
   718   000B4A  0E00               	movlw	0
   719   000B4C  6E08               	movwf	(_blinkerSM+7)^0,c
   720                           
   721                           ;sgl.c: 236: blinkerSM.rightSwitch = 0;
   722   000B4E  0E00               	movlw	0
   723   000B50  6E09               	movwf	(_blinkerSM+8)^0,c
   724                           
   725                           ;sgl.c: 237: blinkerSM.lastSide = 0;
   726   000B52  0E00               	movlw	0
   727   000B54  6E0A               	movwf	(_blinkerSM+9)^0,c
   728                           
   729                           ;sgl.c: 238: blinkerSM.lastToggle = 0;
   730   000B56  0E00               	movlw	0
   731   000B58  6E0B               	movwf	(_blinkerSM+10)^0,c
   732                           
   733                           ;sgl.c: 239: blinkerSM.carryCounter = 0;
   734   000B5A  0E00               	movlw	0
   735   000B5C  6E0C               	movwf	(_blinkerSM+11)^0,c
   736   000B5E  0012               	return		;funcret
   737   000B60  FFFF               	dw	65535	; errata NOP
   738   000B62                     __end_of_SGL_BlinkersInit:
   739                           	callstack 0
   740                           
   741 ;; *************** function _LIGHTS_HeadLampInit *****************
   742 ;; Defined at:
   743 ;;		line 110 in file "lights.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;		None
   746 ;; Auto vars:     Size  Location     Type
   747 ;;		None
   748 ;; Return value:  Size  Location     Type
   749 ;;                  1    wreg      void 
   750 ;; Registers used:
   751 ;;		wreg, status,2, status,0
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   761 ;;Total ram usage:        0 bytes
   762 ;; Hardware stack levels used: 1
   763 ;; Hardware stack levels required when called: 2
   764 ;; This function calls:
   765 ;;		Nothing
   766 ;; This function is called by:
   767 ;;		_TASK_vTaskAppInit
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text4
   772   000C30                     __ptext4:
   773                           	callstack 0
   774   000C30                     _LIGHTS_HeadLampInit:
   775                           	callstack 0
   776   000C30  FFFF               	dw	65535	; assembler added errata NOP
   777                           
   778                           ;lights.c: 112: headLightSM._currentState = SGL_HeadLightPasiveState;
   779                           
   780                           ;incstack = 0
   781   000C32  0EFC               	movlw	low _SGL_HeadLightPasiveState
   782   000C34  6E0D               	movwf	_headLightSM^0,c
   783   000C36  0E03               	movlw	high _SGL_HeadLightPasiveState
   784   000C38  6E0E               	movwf	(_headLightSM+1)^0,c
   785                           
   786                           ;lights.c: 113: headLightSM._pollEvents = SGL_HeadLightEventPoll;
   787   000C3A  0E5A               	movlw	low _SGL_HeadLightEventPoll
   788   000C3C  6E0F               	movwf	(_headLightSM+2)^0,c
   789   000C3E  0E0C               	movlw	high _SGL_HeadLightEventPoll
   790   000C40  6E10               	movwf	(_headLightSM+3)^0,c
   791                           
   792                           ;lights.c: 114: headLightSM.firstEntry = 1;
   793   000C42  0E00               	movlw	0
   794   000C44  6E12               	movwf	(_headLightSM+5)^0,c
   795   000C46  0E01               	movlw	1
   796   000C48  6E11               	movwf	(_headLightSM+4)^0,c
   797                           
   798                           ;lights.c: 115: headLightSM.faruri = 0;
   799   000C4A  0E00               	movlw	0
   800   000C4C  6E13               	movwf	(_headLightSM+6)^0,c
   801                           
   802                           ;lights.c: 116: headLightSM.lightLevel = 0;
   803   000C4E  0E00               	movlw	0
   804   000C50  6E15               	movwf	(_headLightSM+8)^0,c
   805   000C52  0E00               	movlw	0
   806   000C54  6E14               	movwf	(_headLightSM+7)^0,c
   807   000C56  0012               	return		;funcret
   808   000C58  FFFF               	dw	65535	; errata NOP
   809   000C5A                     __end_of_LIGHTS_HeadLampInit:
   810                           	callstack 0
   811                           
   812 ;; *************** function _LIGHTS_BrakeInit *****************
   813 ;; Defined at:
   814 ;;		line 5 in file "lights.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, status,2, status,0, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used: 1
   834 ;; Hardware stack levels required when called: 4
   835 ;; This function calls:
   836 ;;		_IOC_vSetOutputPort
   837 ;; This function is called by:
   838 ;;		_TASK_vTaskAppInit
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text5
   843   000CC8                     __ptext5:
   844                           	callstack 0
   845   000CC8                     _LIGHTS_BrakeInit:
   846                           	callstack 0
   847   000CC8  FFFF               	dw	65535	; assembler added errata NOP
   848                           
   849                           ;lights.c: 7: IOC_vSetOutputPort(IOC_LSF, 0);
   850                           
   851                           ;incstack = 0
   852   000CCA  0E01               	movlw	1
   853   000CCC  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
   854   000CCE  0E05               	movlw	5
   855   000CD0  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
   856   000CD2  0E00               	movlw	0
   857   000CD4  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
   858   000CD6  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
   859   000CDA  0012               	return		;funcret
   860   000CDC  FFFF               	dw	65535	; errata NOP
   861   000CDE                     __end_of_LIGHTS_BrakeInit:
   862                           	callstack 0
   863                           
   864 ;; *************** function _TASK_vTask1s *****************
   865 ;; Defined at:
   866 ;;		line 31 in file "tasks.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;		None
   869 ;; Auto vars:     Size  Location     Type
   870 ;;		None
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		None
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   884 ;;Total ram usage:        0 bytes
   885 ;; Hardware stack levels used: 1
   886 ;; Hardware stack levels required when called: 2
   887 ;; This function calls:
   888 ;;		Nothing
   889 ;; This function is called by:
   890 ;;		_SCHED_vStartScheduler
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text6
   895   000D56                     __ptext6:
   896                           	callstack 0
   897   000D56                     _TASK_vTask1s:
   898                           	callstack 0
   899   000D56  FFFF               	dw	65535	; assembler added errata NOP
   900                           
   901                           ;incstack = 0
   902   000D58  0012               	return		;funcret
   903   000D5A  FFFF               	dw	65535	; errata NOP
   904   000D5C                     __end_of_TASK_vTask1s:
   905                           	callstack 0
   906                           
   907 ;; *************** function _TASK_vTask1ms *****************
   908 ;; Defined at:
   909 ;;		line 15 in file "tasks.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   927 ;;Total ram usage:        0 bytes
   928 ;; Hardware stack levels used: 1
   929 ;; Hardware stack levels required when called: 7
   930 ;; This function calls:
   931 ;;		_LIGHTS_BrakeRun
   932 ;;		_SGL_BlinkersRun
   933 ;; This function is called by:
   934 ;;		_SCHED_vStartScheduler
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text7
   939   000D3E                     __ptext7:
   940                           	callstack 0
   941   000D3E                     _TASK_vTask1ms:
   942                           	callstack 0
   943   000D3E  FFFF               	dw	65535	; assembler added errata NOP
   944                           
   945                           ;tasks.c: 17: SGL_BlinkersRun();
   946                           
   947                           ;incstack = 0
   948   000D40  EC67  F004         	call	_SGL_BlinkersRun	;wreg free
   949                           
   950                           ;tasks.c: 18: LIGHTS_BrakeRun();
   951   000D44  ECFF  F005         	call	_LIGHTS_BrakeRun	;wreg free
   952   000D48  0012               	return		;funcret
   953   000D4A  FFFF               	dw	65535	; errata NOP
   954   000D4C                     __end_of_TASK_vTask1ms:
   955                           	callstack 0
   956                           
   957 ;; *************** function _SGL_BlinkersRun *****************
   958 ;; Defined at:
   959 ;;		line 242 in file "sgl.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;                  1    wreg      void 
   966 ;; Registers used:
   967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   977 ;;Total ram usage:        0 bytes
   978 ;; Hardware stack levels used: 1
   979 ;; Hardware stack levels required when called: 6
   980 ;; This function calls:
   981 ;;		_SGL_BlinkEventPoll
   982 ;;		_SGL_BlinkPasiveState
   983 ;;		_SGL_BlinkSwitchOffState
   984 ;;		_SGL_BlinkSwitchOnState
   985 ;; This function is called by:
   986 ;;		_TASK_vTask1ms
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text8
   991   0008CE                     __ptext8:
   992                           	callstack 0
   993   0008CE                     _SGL_BlinkersRun:
   994                           	callstack 0
   995   0008CE  FFFF               	dw	65535	; assembler added errata NOP
   996                           
   997                           ;sgl.c: 244: if(0 != blinkerSM._currentState)
   998                           
   999                           ;incstack = 0
  1000   0008D0  5001               	movf	_blinkerSM^0,w,c
  1001   0008D2  1002               	iorwf	(_blinkerSM+1)^0,w,c
  1002   0008D4  B4D8               	btfsc	status,2,c
  1003   0008D6  D00E               	goto	u1989
  1004                           
  1005                           ;sgl.c: 245: {;sgl.c: 246: (*blinkerSM._currentState)();
  1006   0008D8  D801               	call	u1988
  1007   0008DA  D00C               	goto	u1989
  1008   0008DC                     u1988:
  1009   0008DC  FFFF               	dw	65535	; assembler added errata NOP
  1010   0008DE  0005               	push	
  1011   0008E0  6EFA               	movwf	pclath,c
  1012   0008E2  5001               	movf	_blinkerSM^0,w,c
  1013   0008E4  6EFD               	movwf	tosl,c
  1014   0008E6  5002               	movf	(_blinkerSM+1)^0,w,c
  1015   0008E8  6EFE               	movwf	tosh,c
  1016   0008EA  50F8               	movf	tblptru,w,c
  1017   0008EC  6EFF               	movwf	tosu,c
  1018   0008EE  50FA               	movf	pclath,w,c
  1019   0008F0  0012               	return		;indir
  1020   0008F2  FFFF               	dw	65535	; errata NOP
  1021   0008F4                     u1989:
  1022   0008F4  FFFF               	dw	65535	; assembler added errata NOP
  1023                           
  1024                           ;sgl.c: 247: };sgl.c: 248: if(0 != blinkerSM._pollEvents)
  1025   0008F6  5003               	movf	(_blinkerSM+2)^0,w,c
  1026   0008F8  1004               	iorwf	(_blinkerSM+3)^0,w,c
  1027   0008FA  B4D8               	btfsc	status,2,c
  1028   0008FC  D010               	goto	u2009
  1029                           
  1030                           ;sgl.c: 249: {;sgl.c: 250: (*blinkerSM._pollEvents)();
  1031   0008FE  EE20  F003         	lfsr	2,_blinkerSM+2
  1032   000902  D801               	call	u2008
  1033   000904  D00C               	goto	u2009
  1034   000906                     u2008:
  1035   000906  FFFF               	dw	65535	; assembler added errata NOP
  1036   000908  0005               	push	
  1037   00090A  6EFA               	movwf	pclath,c
  1038   00090C  50DE               	movf	postinc2,w,c
  1039   00090E  6EFD               	movwf	tosl,c
  1040   000910  50DE               	movf	postinc2,w,c
  1041   000912  6EFE               	movwf	tosh,c
  1042   000914  50F8               	movf	tblptru,w,c
  1043   000916  6EFF               	movwf	tosu,c
  1044   000918  50FA               	movf	pclath,w,c
  1045   00091A  0012               	return		;indir
  1046   00091C  FFFF               	dw	65535	; errata NOP
  1047   00091E                     u2009:
  1048   00091E  FFFF               	dw	65535	; assembler added errata NOP
  1049   000920  0012               	return		;funcret
  1050   000922  FFFF               	dw	65535	; errata NOP
  1051   000924                     __end_of_SGL_BlinkersRun:
  1052                           	callstack 0
  1053                           
  1054 ;; *************** function _SGL_BlinkPasiveState *****************
  1055 ;; Defined at:
  1056 ;;		line 65 in file "sgl.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;		None
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;		None
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1074 ;;Total ram usage:        0 bytes
  1075 ;; Hardware stack levels used: 1
  1076 ;; Hardware stack levels required when called: 5
  1077 ;; This function calls:
  1078 ;;		_SGL_setAllHazardLights
  1079 ;;		_SGL_toggleAllHazardLights
  1080 ;; This function is called by:
  1081 ;;		_SGL_BlinkSwitchOnState
  1082 ;;		_SGL_BlinkSwitchOffState
  1083 ;;		_SGL_BlinkersInit
  1084 ;;		_SGL_BlinkersRun
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text9
  1089   0002BA                     __ptext9:
  1090                           	callstack 0
  1091   0002BA                     _SGL_BlinkPasiveState:
  1092                           	callstack 0
  1093   0002BA  FFFF               	dw	65535	; assembler added errata NOP
  1094                           
  1095                           ;sgl.c: 67: static T_U16 counter = 0;;sgl.c: 68: static T_U8 firstEntry = 1;;sgl.c: 69: 
      +                          static T_U8 toggleLights = 0;;sgl.c: 72: if(blinkerSM.firstEntry == 1)
  1096                           
  1097                           ;incstack = 0
  1098   0002BC  0405               	decf	(_blinkerSM+4)^0,w,c
  1099   0002BE  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1100   0002C0  A4D8               	btfss	status,2,c
  1101   0002C2  D007               	goto	l2243
  1102                           
  1103                           ;sgl.c: 73: {;sgl.c: 74: SGL_setAllHazardLights(0);
  1104   0002C4  0E00               	movlw	0
  1105   0002C6  EC12  F005         	call	_SGL_setAllHazardLights
  1106                           
  1107                           ;sgl.c: 75: blinkerSM.firstEntry = 0;
  1108   0002CA  0E00               	movlw	0
  1109   0002CC  6E06               	movwf	(_blinkerSM+5)^0,c
  1110   0002CE  0E00               	movlw	0
  1111   0002D0  6E05               	movwf	(_blinkerSM+4)^0,c
  1112   0002D2                     l2243:
  1113   0002D2  FFFF               	dw	65535	; assembler added errata NOP
  1114                           
  1115                           ;sgl.c: 76: };sgl.c: 79: if(1 == blinkerSM.avarie)
  1116   0002D4  0407               	decf	(_blinkerSM+6)^0,w,c
  1117   0002D6  A4D8               	btfss	status,2,c
  1118   0002D8  D01E               	goto	l2259
  1119                           
  1120                           ;sgl.c: 80: {;sgl.c: 81: if(1 == firstEntry)
  1121   0002DA  0457               	decf	SGL_BlinkPasiveState@firstEntry^0,w,c
  1122   0002DC  A4D8               	btfss	status,2,c
  1123   0002DE  D005               	goto	l2251
  1124                           
  1125                           ;sgl.c: 82: {;sgl.c: 83: SGL_setAllHazardLights(1);
  1126   0002E0  0E01               	movlw	1
  1127   0002E2  EC12  F005         	call	_SGL_setAllHazardLights
  1128                           
  1129                           ;sgl.c: 84: firstEntry = 0;
  1130   0002E6  0E00               	movlw	0
  1131   0002E8  6E57               	movwf	SGL_BlinkPasiveState@firstEntry^0,c
  1132   0002EA                     l2251:
  1133   0002EA  FFFF               	dw	65535	; assembler added errata NOP
  1134                           
  1135                           ;sgl.c: 85: };sgl.c: 86: if(500 == counter)
  1136   0002EC  0EF4               	movlw	244
  1137   0002EE  1828               	xorwf	SGL_BlinkPasiveState@counter^0,w,c
  1138   0002F0  E10E               	bnz	l2257
  1139   0002F2  0429               	decf	(SGL_BlinkPasiveState@counter+1)^0,w,c
  1140   0002F4  A4D8               	btfss	status,2,c
  1141   0002F6  D00B               	goto	l2257
  1142                           
  1143                           ;sgl.c: 87: {;sgl.c: 88: SGL_toggleAllHazardLights(&toggleLights);
  1144   0002F8  0E36               	movlw	low SGL_BlinkPasiveState@toggleLights
  1145   0002FA  6E53               	movwf	SGL_toggleAllHazardLights@toggle^0,c
  1146   0002FC  0E00               	movlw	high SGL_BlinkPasiveState@toggleLights
  1147   0002FE  6E54               	movwf	(SGL_toggleAllHazardLights@toggle+1)^0,c
  1148   000300  EC8C  F003         	call	_SGL_toggleAllHazardLights	;wreg free
  1149                           
  1150                           ;sgl.c: 89: counter = 0;
  1151   000304  0E00               	movlw	0
  1152   000306  6E29               	movwf	(SGL_BlinkPasiveState@counter+1)^0,c
  1153   000308  0E00               	movlw	0
  1154   00030A  6E28               	movwf	SGL_BlinkPasiveState@counter^0,c
  1155                           
  1156                           ;sgl.c: 90: }
  1157   00030C  D010               	goto	l2267
  1158   00030E                     l2257:
  1159   00030E  FFFF               	dw	65535	; assembler added errata NOP
  1160                           
  1161                           ;sgl.c: 91: else;sgl.c: 92: {;sgl.c: 93: counter++;
  1162   000310  4A28               	infsnz	SGL_BlinkPasiveState@counter^0,f,c
  1163   000312  2A29               	incf	(SGL_BlinkPasiveState@counter+1)^0,f,c
  1164   000314  D00C               	goto	l2267
  1165   000316                     l2259:
  1166   000316  FFFF               	dw	65535	; assembler added errata NOP
  1167                           
  1168                           ;sgl.c: 96: else;sgl.c: 97: {;sgl.c: 98: SGL_setAllHazardLights(0);
  1169   000318  0E00               	movlw	0
  1170   00031A  EC12  F005         	call	_SGL_setAllHazardLights
  1171                           
  1172                           ;sgl.c: 99: counter = 0;
  1173   00031E  0E00               	movlw	0
  1174   000320  6E29               	movwf	(SGL_BlinkPasiveState@counter+1)^0,c
  1175   000322  0E00               	movlw	0
  1176   000324  6E28               	movwf	SGL_BlinkPasiveState@counter^0,c
  1177                           
  1178                           ;sgl.c: 100: firstEntry = 1;
  1179   000326  0E01               	movlw	1
  1180   000328  6E57               	movwf	SGL_BlinkPasiveState@firstEntry^0,c
  1181                           
  1182                           ;sgl.c: 101: toggleLights = 0;
  1183   00032A  0E00               	movlw	0
  1184   00032C  6E36               	movwf	SGL_BlinkPasiveState@toggleLights^0,c
  1185   00032E                     l2267:
  1186   00032E  FFFF               	dw	65535	; assembler added errata NOP
  1187                           
  1188                           ;sgl.c: 102: };sgl.c: 105: if( ((1 == blinkerSM.leftSwitch) || (1 == blinkerSM.rightSwit
      +                          ch)) && 0 == blinkerSM.avarie )
  1189   000330  0408               	decf	(_blinkerSM+7)^0,w,c
  1190   000332  B4D8               	btfsc	status,2,c
  1191   000334  D003               	goto	u1810
  1192   000336  0409               	decf	(_blinkerSM+8)^0,w,c
  1193   000338  A4D8               	btfss	status,2,c
  1194   00033A  D015               	goto	l291
  1195   00033C                     u1810:
  1196   00033C  FFFF               	dw	65535	; assembler added errata NOP
  1197   00033E  5007               	movf	(_blinkerSM+6)^0,w,c
  1198   000340  A4D8               	btfss	status,2,c
  1199   000342  D011               	goto	l291
  1200                           
  1201                           ;sgl.c: 106: {;sgl.c: 107: blinkerSM._currentState = SGL_BlinkSwitchOnState;
  1202   000344  0E50               	movlw	low _SGL_BlinkSwitchOnState
  1203   000346  6E01               	movwf	_blinkerSM^0,c
  1204   000348  0E00               	movlw	high _SGL_BlinkSwitchOnState
  1205   00034A  6E02               	movwf	(_blinkerSM+1)^0,c
  1206                           
  1207                           ;sgl.c: 108: blinkerSM.firstEntry = 1;
  1208   00034C  0E00               	movlw	0
  1209   00034E  6E06               	movwf	(_blinkerSM+5)^0,c
  1210   000350  0E01               	movlw	1
  1211   000352  6E05               	movwf	(_blinkerSM+4)^0,c
  1212                           
  1213                           ;sgl.c: 109: counter = 0;
  1214   000354  0E00               	movlw	0
  1215   000356  6E29               	movwf	(SGL_BlinkPasiveState@counter+1)^0,c
  1216   000358  0E00               	movlw	0
  1217   00035A  6E28               	movwf	SGL_BlinkPasiveState@counter^0,c
  1218                           
  1219                           ;sgl.c: 110: toggleLights = 0;
  1220   00035C  0E00               	movlw	0
  1221   00035E  6E36               	movwf	SGL_BlinkPasiveState@toggleLights^0,c
  1222                           
  1223                           ;sgl.c: 111: SGL_setAllHazardLights(0);
  1224   000360  0E00               	movlw	0
  1225   000362  EC12  F005         	call	_SGL_setAllHazardLights
  1226   000366                     l291:
  1227   000366  FFFF               	dw	65535	; assembler added errata NOP
  1228   000368  0012               	return		;funcret
  1229   00036A  FFFF               	dw	65535	; errata NOP
  1230   00036C                     __end_of_SGL_BlinkPasiveState:
  1231                           	callstack 0
  1232                           
  1233 ;; *************** function _SGL_BlinkSwitchOffState *****************
  1234 ;; Defined at:
  1235 ;;		line 172 in file "sgl.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;		None
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;		None
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1251 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1252 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1253 ;;Total ram usage:        2 bytes
  1254 ;; Hardware stack levels used: 1
  1255 ;; Hardware stack levels required when called: 5
  1256 ;; This function calls:
  1257 ;;		_SGL_toggleSideHazardLights
  1258 ;; This function is called by:
  1259 ;;		_SGL_BlinkSwitchOnState
  1260 ;;		_SGL_BlinkersRun
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           	psect	text10
  1265   000126                     __ptext10:
  1266                           	callstack 0
  1267   000126                     _SGL_BlinkSwitchOffState:
  1268                           	callstack 0
  1269   000126  FFFF               	dw	65535	; assembler added errata NOP
  1270                           
  1271                           ;sgl.c: 174: static T_U16 counter = 0;;sgl.c: 175: static T_U16 side = 0;;sgl.c: 176: st
      +                          atic T_U8 toggleLights = 0;;sgl.c: 177: static T_U8 cycles = 0;;sgl.c: 180: if(blinkerSM
      +                          .firstEntry == 1)
  1272                           
  1273                           ;incstack = 0
  1274   000128  0405               	decf	(_blinkerSM+4)^0,w,c
  1275   00012A  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1276   00012C  A4D8               	btfss	status,2,c
  1277   00012E  D00C               	goto	l2349
  1278                           
  1279                           ;sgl.c: 181: {;sgl.c: 182: blinkerSM.firstEntry = 0;
  1280   000130  0E00               	movlw	0
  1281   000132  6E06               	movwf	(_blinkerSM+5)^0,c
  1282   000134  0E00               	movlw	0
  1283   000136  6E05               	movwf	(_blinkerSM+4)^0,c
  1284                           
  1285                           ;sgl.c: 184: toggleLights = blinkerSM.lastToggle;
  1286   000138  C00B  F034         	movff	_blinkerSM+10,SGL_BlinkSwitchOffState@toggleLights
  1287                           
  1288                           ;sgl.c: 185: side = blinkerSM.lastSide;
  1289   00013C  C00A  F022         	movff	_blinkerSM+9,SGL_BlinkSwitchOffState@side
  1290   000140  6A23               	clrf	(SGL_BlinkSwitchOffState@side+1)^0,c
  1291                           
  1292                           ;sgl.c: 186: counter = blinkerSM.carryCounter;
  1293   000142  C00C  F024         	movff	_blinkerSM+11,SGL_BlinkSwitchOffState@counter
  1294   000146  6A25               	clrf	(SGL_BlinkSwitchOffState@counter+1)^0,c
  1295   000148                     l2349:
  1296   000148  FFFF               	dw	65535	; assembler added errata NOP
  1297                           
  1298                           ;sgl.c: 187: };sgl.c: 190: if(500 == counter && (5 != (cycles+blinkerSM.lastToggle)))
  1299   00014A  0EF4               	movlw	244
  1300   00014C  1824               	xorwf	SGL_BlinkSwitchOffState@counter^0,w,c
  1301   00014E  E11E               	bnz	l2359
  1302   000150  0425               	decf	(SGL_BlinkSwitchOffState@counter+1)^0,w,c
  1303   000152  A4D8               	btfss	status,2,c
  1304   000154  D01B               	goto	l2359
  1305   000156  500B               	movf	(_blinkerSM+10)^0,w,c
  1306   000158  C030  F060         	movff	SGL_BlinkSwitchOffState@cycles,??_SGL_BlinkSwitchOffState
  1307   00015C  0100               	movlb	0	; () banked
  1308   00015E  6B61               	clrf	(??_SGL_BlinkSwitchOffState+1)& (0+255),b
  1309   000160  2760               	addwf	??_SGL_BlinkSwitchOffState& (0+255),f,b
  1310   000162  0E00               	movlw	0
  1311   000164  2361               	addwfc	(??_SGL_BlinkSwitchOffState+1)& (0+255),f,b
  1312   000166  0E05               	movlw	5
  1313   000168  1960               	xorwf	??_SGL_BlinkSwitchOffState& (0+255),w,b
  1314   00016A  1161               	iorwf	(??_SGL_BlinkSwitchOffState+1)& (0+255),w,b
  1315   00016C  B4D8               	btfsc	status,2,c
  1316   00016E  D00E               	goto	l2359
  1317                           
  1318                           ; BSR set to: 0
  1319                           ;sgl.c: 191: {;sgl.c: 192: SGL_toggleSideHazardLights(&toggleLights, side);
  1320   000170  0E34               	movlw	low SGL_BlinkSwitchOffState@toggleLights
  1321   000172  6E53               	movwf	SGL_toggleSideHazardLights@toggle^0,c
  1322   000174  0E00               	movlw	high SGL_BlinkSwitchOffState@toggleLights
  1323   000176  6E54               	movwf	(SGL_toggleSideHazardLights@toggle+1)^0,c
  1324   000178  C022  F055         	movff	SGL_BlinkSwitchOffState@side,SGL_toggleSideHazardLights@side
  1325   00017C  EC46  F002         	call	_SGL_toggleSideHazardLights	;wreg free
  1326                           
  1327                           ;sgl.c: 193: cycles++;
  1328   000180  2A30               	incf	SGL_BlinkSwitchOffState@cycles^0,f,c
  1329                           
  1330                           ;sgl.c: 194: counter = 0;
  1331   000182  0E00               	movlw	0
  1332   000184  6E25               	movwf	(SGL_BlinkSwitchOffState@counter+1)^0,c
  1333   000186  0E00               	movlw	0
  1334   000188  6E24               	movwf	SGL_BlinkSwitchOffState@counter^0,c
  1335                           
  1336                           ;sgl.c: 195: }
  1337   00018A  D010               	goto	l2363
  1338   00018C                     l2359:
  1339   00018C  FFFF               	dw	65535	; assembler added errata NOP
  1340                           
  1341                           ;sgl.c: 196: else;sgl.c: 197: {;sgl.c: 198: if((5 != (cycles+blinkerSM.lastToggle)))
  1342   00018E  500B               	movf	(_blinkerSM+10)^0,w,c
  1343   000190  C030  F060         	movff	SGL_BlinkSwitchOffState@cycles,??_SGL_BlinkSwitchOffState
  1344   000194  0100               	movlb	0	; () banked
  1345   000196  6B61               	clrf	(??_SGL_BlinkSwitchOffState+1)& (0+255),b
  1346   000198  2760               	addwf	??_SGL_BlinkSwitchOffState& (0+255),f,b
  1347   00019A  0E00               	movlw	0
  1348   00019C  2361               	addwfc	(??_SGL_BlinkSwitchOffState+1)& (0+255),f,b
  1349   00019E  0E05               	movlw	5
  1350   0001A0  1960               	xorwf	??_SGL_BlinkSwitchOffState& (0+255),w,b
  1351   0001A2  1161               	iorwf	(??_SGL_BlinkSwitchOffState+1)& (0+255),w,b
  1352   0001A4  B4D8               	btfsc	status,2,c
  1353   0001A6  D002               	goto	l2363
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;sgl.c: 199: {;sgl.c: 200: counter++;
  1357   0001A8  4A24               	infsnz	SGL_BlinkSwitchOffState@counter^0,f,c
  1358   0001AA  2A25               	incf	(SGL_BlinkSwitchOffState@counter+1)^0,f,c
  1359   0001AC                     l2363:
  1360   0001AC  FFFF               	dw	65535	; assembler added errata NOP
  1361                           
  1362                           ;sgl.c: 201: };sgl.c: 202: };sgl.c: 205: if( 1 == blinkerSM.avarie )
  1363   0001AE  0407               	decf	(_blinkerSM+6)^0,w,c
  1364   0001B0  A4D8               	btfss	status,2,c
  1365   0001B2  D012               	goto	l2375
  1366                           
  1367                           ;sgl.c: 206: {;sgl.c: 207: blinkerSM._currentState = SGL_BlinkPasiveState;
  1368   0001B4  0EBA               	movlw	low _SGL_BlinkPasiveState
  1369   0001B6  6E01               	movwf	_blinkerSM^0,c
  1370   0001B8  0E02               	movlw	high _SGL_BlinkPasiveState
  1371   0001BA  FFFF               	dw	65535	; assembler added errata NOP
  1372   0001BC  6E02               	movwf	(_blinkerSM+1)^0,c
  1373                           
  1374                           ;sgl.c: 208: blinkerSM.firstEntry = 1;
  1375   0001BE  0E00               	movlw	0
  1376   0001C0  6E06               	movwf	(_blinkerSM+5)^0,c
  1377   0001C2  0E01               	movlw	1
  1378   0001C4  6E05               	movwf	(_blinkerSM+4)^0,c
  1379                           
  1380                           ;sgl.c: 209: blinkerSM.carryCounter = counter;
  1381   0001C6  C024  F00C         	movff	SGL_BlinkSwitchOffState@counter,_blinkerSM+11
  1382                           
  1383                           ;sgl.c: 210: cycles = 0;
  1384   0001CA  0E00               	movlw	0
  1385   0001CC  6E30               	movwf	SGL_BlinkSwitchOffState@cycles^0,c
  1386                           
  1387                           ;sgl.c: 211: counter = 0;
  1388   0001CE  0E00               	movlw	0
  1389   0001D0  6E25               	movwf	(SGL_BlinkSwitchOffState@counter+1)^0,c
  1390   0001D2  0E00               	movlw	0
  1391   0001D4  6E24               	movwf	SGL_BlinkSwitchOffState@counter^0,c
  1392                           
  1393                           ;sgl.c: 212: } else if( (1 == blinkerSM.leftSwitch) || (1 == blinkerSM.rightSwitch) )
  1394   0001D6  D00C               	goto	l329
  1395   0001D8                     l2375:
  1396   0001D8  FFFF               	dw	65535	; assembler added errata NOP
  1397   0001DA  0408               	decf	(_blinkerSM+7)^0,w,c
  1398   0001DC  B4D8               	btfsc	status,2,c
  1399   0001DE  D003               	goto	u1960
  1400   0001E0  0409               	decf	(_blinkerSM+8)^0,w,c
  1401   0001E2  A4D8               	btfss	status,2,c
  1402   0001E4  D005               	goto	l329
  1403   0001E6                     u1960:
  1404   0001E6  FFFF               	dw	65535	; assembler added errata NOP
  1405                           
  1406                           ;sgl.c: 213: {;sgl.c: 214: blinkerSM._currentState = SGL_BlinkSwitchOnState;
  1407   0001E8  0E50               	movlw	low _SGL_BlinkSwitchOnState
  1408   0001EA  6E01               	movwf	_blinkerSM^0,c
  1409   0001EC  0E00               	movlw	high _SGL_BlinkSwitchOnState
  1410   0001EE  D7E5               	goto	L1
  1411   0001F0                     l329:
  1412   0001F0  FFFF               	dw	65535	; assembler added errata NOP
  1413   0001F2  0012               	return		;funcret
  1414   0001F4  FFFF               	dw	65535	; errata NOP
  1415   0001F6                     __end_of_SGL_BlinkSwitchOffState:
  1416                           	callstack 0
  1417                           
  1418 ;; *************** function _SGL_BlinkSwitchOnState *****************
  1419 ;; Defined at:
  1420 ;;		line 116 in file "sgl.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used: 1
  1440 ;; Hardware stack levels required when called: 5
  1441 ;; This function calls:
  1442 ;;		_SGL_setAllHazardLights
  1443 ;;		_SGL_setSideHazardLights
  1444 ;;		_SGL_toggleSideHazardLights
  1445 ;; This function is called by:
  1446 ;;		_SGL_BlinkPasiveState
  1447 ;;		_SGL_BlinkSwitchOffState
  1448 ;;		_SGL_BlinkersRun
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text11
  1453   000050                     __ptext11:
  1454                           	callstack 0
  1455   000050                     _SGL_BlinkSwitchOnState:
  1456                           	callstack 0
  1457   000050  FFFF               	dw	65535	; assembler added errata NOP
  1458                           
  1459                           ;sgl.c: 118: static T_U8 side = 0;;sgl.c: 119: static T_U16 counter = 0;;sgl.c: 120: sta
      +                          tic T_U8 firstEntry = 1;;sgl.c: 121: static T_U8 toggleLights = 0;;sgl.c: 124: if(blinke
      +                          rSM.firstEntry == 1)
  1460                           
  1461                           ;incstack = 0
  1462   000052  0405               	decf	(_blinkerSM+4)^0,w,c
  1463   000054  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1464   000056  A4D8               	btfss	status,2,c
  1465   000058  D00B               	goto	l2291
  1466                           
  1467                           ;sgl.c: 125: {;sgl.c: 127: side = blinkerSM.rightSwitch;
  1468   00005A  C009  F031         	movff	_blinkerSM+8,SGL_BlinkSwitchOnState@side
  1469                           
  1470                           ;sgl.c: 128: blinkerSM.lastSide = side;
  1471   00005E  C031  F00A         	movff	SGL_BlinkSwitchOnState@side,_blinkerSM+9
  1472                           
  1473                           ;sgl.c: 129: blinkerSM.firstEntry = 0;
  1474   000062  0E00               	movlw	0
  1475   000064  6E06               	movwf	(_blinkerSM+5)^0,c
  1476   000066  0E00               	movlw	0
  1477   000068  6E05               	movwf	(_blinkerSM+4)^0,c
  1478                           
  1479                           ;sgl.c: 130: counter = blinkerSM.carryCounter;
  1480   00006A  C00C  F026         	movff	_blinkerSM+11,SGL_BlinkSwitchOnState@counter
  1481   00006E  6A27               	clrf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1482   000070                     l2291:
  1483   000070  FFFF               	dw	65535	; assembler added errata NOP
  1484                           
  1485                           ;sgl.c: 131: };sgl.c: 134: if(1 == firstEntry)
  1486   000072  0456               	decf	SGL_BlinkSwitchOnState@firstEntry^0,w,c
  1487   000074  A4D8               	btfss	status,2,c
  1488   000076  D007               	goto	l2297
  1489                           
  1490                           ;sgl.c: 135: {;sgl.c: 136: SGL_setSideHazardLights(1, side);
  1491   000078  C031  F053         	movff	SGL_BlinkSwitchOnState@side,SGL_setSideHazardLights@side
  1492   00007C  0E01               	movlw	1
  1493   00007E  ECE8  F004         	call	_SGL_setSideHazardLights
  1494                           
  1495                           ;sgl.c: 137: firstEntry = 0;
  1496   000082  0E00               	movlw	0
  1497   000084  6E56               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1498   000086                     l2297:
  1499   000086  FFFF               	dw	65535	; assembler added errata NOP
  1500                           
  1501                           ;sgl.c: 138: };sgl.c: 139: if(500 == counter)
  1502   000088  0EF4               	movlw	244
  1503   00008A  1826               	xorwf	SGL_BlinkSwitchOnState@counter^0,w,c
  1504   00008C  E110               	bnz	l2303
  1505   00008E  0427               	decf	(SGL_BlinkSwitchOnState@counter+1)^0,w,c
  1506   000090  A4D8               	btfss	status,2,c
  1507   000092  D00D               	goto	l2303
  1508                           
  1509                           ;sgl.c: 140: {;sgl.c: 141: SGL_toggleSideHazardLights(&toggleLights, side);
  1510   000094  0E35               	movlw	low SGL_BlinkSwitchOnState@toggleLights
  1511   000096  6E53               	movwf	SGL_toggleSideHazardLights@toggle^0,c
  1512   000098  0E00               	movlw	high SGL_BlinkSwitchOnState@toggleLights
  1513   00009A  6E54               	movwf	(SGL_toggleSideHazardLights@toggle+1)^0,c
  1514   00009C  C031  F055         	movff	SGL_BlinkSwitchOnState@side,SGL_toggleSideHazardLights@side
  1515   0000A0  EC46  F002         	call	_SGL_toggleSideHazardLights	;wreg free
  1516                           
  1517                           ;sgl.c: 142: counter = 0;
  1518   0000A4  0E00               	movlw	0
  1519   0000A6  6E27               	movwf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1520   0000A8  0E00               	movlw	0
  1521   0000AA  6E26               	movwf	SGL_BlinkSwitchOnState@counter^0,c
  1522                           
  1523                           ;sgl.c: 143: }
  1524   0000AC  D003               	goto	l2305
  1525   0000AE                     l2303:
  1526   0000AE  FFFF               	dw	65535	; assembler added errata NOP
  1527                           
  1528                           ;sgl.c: 144: else;sgl.c: 145: {;sgl.c: 146: counter++;
  1529   0000B0  4A26               	infsnz	SGL_BlinkSwitchOnState@counter^0,f,c
  1530   0000B2  2A27               	incf	(SGL_BlinkSwitchOnState@counter+1)^0,f,c
  1531   0000B4                     l2305:
  1532   0000B4  FFFF               	dw	65535	; assembler added errata NOP
  1533                           
  1534                           ;sgl.c: 147: };sgl.c: 150: if( 1 == blinkerSM.avarie )
  1535   0000B6  0407               	decf	(_blinkerSM+6)^0,w,c
  1536   0000B8  A4D8               	btfss	status,2,c
  1537   0000BA  D014               	goto	l2319
  1538                           
  1539                           ;sgl.c: 151: {;sgl.c: 152: blinkerSM._currentState = SGL_BlinkPasiveState;
  1540   0000BC  0EBA               	movlw	low _SGL_BlinkPasiveState
  1541   0000BE  6E01               	movwf	_blinkerSM^0,c
  1542   0000C0  0E02               	movlw	high _SGL_BlinkPasiveState
  1543   0000C2  6E02               	movwf	(_blinkerSM+1)^0,c
  1544                           
  1545                           ;sgl.c: 153: blinkerSM.firstEntry = 1;
  1546   0000C4  0E00               	movlw	0
  1547   0000C6  6E06               	movwf	(_blinkerSM+5)^0,c
  1548   0000C8  0E01               	movlw	1
  1549   0000CA  6E05               	movwf	(_blinkerSM+4)^0,c
  1550                           
  1551                           ;sgl.c: 154: counter = 0;
  1552   0000CC  0E00               	movlw	0
  1553   0000CE  6E27               	movwf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1554   0000D0  0E00               	movlw	0
  1555   0000D2  6E26               	movwf	SGL_BlinkSwitchOnState@counter^0,c
  1556                           
  1557                           ;sgl.c: 155: toggleLights = 0;
  1558   0000D4  0E00               	movlw	0
  1559   0000D6  6E35               	movwf	SGL_BlinkSwitchOnState@toggleLights^0,c
  1560                           
  1561                           ;sgl.c: 156: firstEntry = 1;
  1562   0000D8  0E01               	movlw	1
  1563   0000DA  6E56               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1564                           
  1565                           ;sgl.c: 157: SGL_setAllHazardLights(0);
  1566   0000DC  0E00               	movlw	0
  1567   0000DE  EC12  F005         	call	_SGL_setAllHazardLights
  1568                           
  1569                           ;sgl.c: 158: }else if( (0 == blinkerSM.avarie) && (0 == blinkerSM.leftSwitch) && (0 == b
      +                          linkerSM.rightSwitch) )
  1570   0000E2  D01E               	goto	l309
  1571   0000E4                     l2319:
  1572   0000E4  FFFF               	dw	65535	; assembler added errata NOP
  1573   0000E6  5007               	movf	(_blinkerSM+6)^0,w,c
  1574   0000E8  A4D8               	btfss	status,2,c
  1575   0000EA  D01A               	goto	l309
  1576   0000EC  5008               	movf	(_blinkerSM+7)^0,w,c
  1577   0000EE  A4D8               	btfss	status,2,c
  1578   0000F0  D017               	goto	l309
  1579   0000F2  5009               	movf	(_blinkerSM+8)^0,w,c
  1580   0000F4  A4D8               	btfss	status,2,c
  1581   0000F6  D014               	goto	l309
  1582                           
  1583                           ;sgl.c: 159: {;sgl.c: 160: blinkerSM._currentState = SGL_BlinkSwitchOffState;
  1584   0000F8  0E26               	movlw	low _SGL_BlinkSwitchOffState
  1585   0000FA  6E01               	movwf	_blinkerSM^0,c
  1586   0000FC  0E01               	movlw	high _SGL_BlinkSwitchOffState
  1587   0000FE  6E02               	movwf	(_blinkerSM+1)^0,c
  1588                           
  1589                           ;sgl.c: 161: blinkerSM.firstEntry = 1;
  1590   000100  0E00               	movlw	0
  1591   000102  6E06               	movwf	(_blinkerSM+5)^0,c
  1592   000104  0E01               	movlw	1
  1593   000106  6E05               	movwf	(_blinkerSM+4)^0,c
  1594                           
  1595                           ;sgl.c: 162: blinkerSM.lastToggle = toggleLights;
  1596   000108  C035  F00B         	movff	SGL_BlinkSwitchOnState@toggleLights,_blinkerSM+10
  1597                           
  1598                           ;sgl.c: 163: blinkerSM.carryCounter = counter;
  1599   00010C  C026  F00C         	movff	SGL_BlinkSwitchOnState@counter,_blinkerSM+11
  1600                           
  1601                           ;sgl.c: 164: counter = 0;
  1602   000110  0E00               	movlw	0
  1603   000112  6E27               	movwf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1604   000114  0E00               	movlw	0
  1605   000116  6E26               	movwf	SGL_BlinkSwitchOnState@counter^0,c
  1606                           
  1607                           ;sgl.c: 165: toggleLights = 0;
  1608   000118  0E00               	movlw	0
  1609   00011A  6E35               	movwf	SGL_BlinkSwitchOnState@toggleLights^0,c
  1610                           
  1611                           ;sgl.c: 166: firstEntry = 1;
  1612   00011C  0E01               	movlw	1
  1613   00011E  6E56               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1614   000120                     l309:
  1615   000120  FFFF               	dw	65535	; assembler added errata NOP
  1616   000122  0012               	return		;funcret
  1617   000124  FFFF               	dw	65535	; errata NOP
  1618   000126                     __end_of_SGL_BlinkSwitchOnState:
  1619                           	callstack 0
  1620                           
  1621 ;; *************** function _SGL_setSideHazardLights *****************
  1622 ;; Defined at:
  1623 ;;		line 48 in file "sgl.c"
  1624 ;; Parameters:    Size  Location     Type
  1625 ;;  value           1    wreg     unsigned char 
  1626 ;;  side            1   28[COMRAM] unsigned char 
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  value           1   29[COMRAM] unsigned char 
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  1    wreg      void 
  1631 ;; Registers used:
  1632 ;;		wreg, status,2, status,0, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1638 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1641 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1642 ;;Total ram usage:        2 bytes
  1643 ;; Hardware stack levels used: 1
  1644 ;; Hardware stack levels required when called: 4
  1645 ;; This function calls:
  1646 ;;		_IOC_vSetOutputPort
  1647 ;; This function is called by:
  1648 ;;		_SGL_BlinkSwitchOnState
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           	psect	text12
  1653   0009D0                     __ptext12:
  1654                           	callstack 0
  1655   0009D0                     _SGL_setSideHazardLights:
  1656                           	callstack 0
  1657   0009D0  FFFF               	dw	65535	; assembler added errata NOP
  1658                           
  1659                           ;incstack = 0
  1660                           ;SGL_setSideHazardLights@value stored from wreg
  1661   0009D2  6E54               	movwf	SGL_setSideHazardLights@value^0,c
  1662                           
  1663                           ;sgl.c: 50: if(0 == side)
  1664   0009D4  5053               	movf	SGL_setSideHazardLights@side^0,w,c
  1665   0009D6  A4D8               	btfss	status,2,c
  1666   0009D8  D011               	goto	l1873
  1667                           
  1668                           ;sgl.c: 51: {;sgl.c: 52: IOC_vSetOutputPort(IOC_SFS, value);
  1669   0009DA  0E01               	movlw	1
  1670   0009DC  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1671   0009DE  0E03               	movlw	3
  1672   0009E0  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1673   0009E2  C054  F050         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1674   0009E6  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1675                           
  1676                           ;sgl.c: 53: IOC_vSetOutputPort(IOC_SSS, value);
  1677   0009EA  0E01               	movlw	1
  1678   0009EC  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1679   0009EE  0E07               	movlw	7
  1680   0009F0  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1681   0009F2  C054  F050         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1682   0009F6  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1683                           
  1684                           ;sgl.c: 54: }
  1685   0009FA  D011               	goto	l273
  1686   0009FC                     l1873:
  1687   0009FC  FFFF               	dw	65535	; assembler added errata NOP
  1688                           
  1689                           ;sgl.c: 55: else;sgl.c: 56: {;sgl.c: 57: IOC_vSetOutputPort(IOC_SFD, value);
  1690   0009FE  0E01               	movlw	1
  1691   000A00  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1692   000A02  0E00               	movlw	0
  1693   000A04  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1694   000A06  C054  F050         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1695   000A0A  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1696                           
  1697                           ;sgl.c: 58: IOC_vSetOutputPort(IOC_SSD, value);
  1698   000A0E  0E01               	movlw	1
  1699   000A10  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1700   000A12  0E04               	movlw	4
  1701   000A14  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1702   000A16  C054  F050         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1703   000A1A  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1704   000A1E                     l273:
  1705   000A1E  FFFF               	dw	65535	; assembler added errata NOP
  1706   000A20  0012               	return		;funcret
  1707   000A22  FFFF               	dw	65535	; errata NOP
  1708   000A24                     __end_of_SGL_setSideHazardLights:
  1709                           	callstack 0
  1710                           
  1711 ;; *************** function _SGL_toggleSideHazardLights *****************
  1712 ;; Defined at:
  1713 ;;		line 25 in file "sgl.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  toggle          2   28[COMRAM] PTR unsigned char 
  1716 ;;		 -> SGL_BlinkSwitchOffState@toggleLights(1), SGL_BlinkSwitchOnState@toggleLights(1), 
  1717 ;;  side            1   30[COMRAM] unsigned char 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;		None
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      void 
  1722 ;; Registers used:
  1723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1729 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1732 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1733 ;;Total ram usage:        3 bytes
  1734 ;; Hardware stack levels used: 1
  1735 ;; Hardware stack levels required when called: 4
  1736 ;; This function calls:
  1737 ;;		_IOC_vSetOutputPort
  1738 ;; This function is called by:
  1739 ;;		_SGL_BlinkSwitchOnState
  1740 ;;		_SGL_BlinkSwitchOffState
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text13
  1745   00048C                     __ptext13:
  1746                           	callstack 0
  1747   00048C                     _SGL_toggleSideHazardLights:
  1748                           	callstack 0
  1749   00048C  FFFF               	dw	65535	; assembler added errata NOP
  1750                           
  1751                           ;sgl.c: 27: if(0 == side)
  1752                           
  1753                           ;incstack = 0
  1754   00048E  5055               	movf	SGL_toggleSideHazardLights@side^0,w,c
  1755   000490  A4D8               	btfss	status,2,c
  1756   000492  D019               	goto	l1863
  1757                           
  1758                           ;sgl.c: 28: {;sgl.c: 29: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1759   000494  0E01               	movlw	1
  1760   000496  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1761   000498  0E03               	movlw	3
  1762   00049A  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1763   00049C  C053  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1764   0004A0  C054  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1765   0004A4  50DF               	movf	indf2,w,c
  1766   0004A6  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1767   0004A8  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1768                           
  1769                           ;sgl.c: 30: IOC_vSetOutputPort(IOC_SSS, *toggle);
  1770   0004AC  0E01               	movlw	1
  1771   0004AE  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1772   0004B0  0E07               	movlw	7
  1773   0004B2  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1774   0004B4  C053  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1775   0004B8  C054  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1776   0004BC  50DF               	movf	indf2,w,c
  1777   0004BE  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1778   0004C0  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1779                           
  1780                           ;sgl.c: 31: }
  1781   0004C4  D019               	goto	l1865
  1782   0004C6                     l1863:
  1783   0004C6  FFFF               	dw	65535	; assembler added errata NOP
  1784                           
  1785                           ;sgl.c: 32: else;sgl.c: 33: {;sgl.c: 34: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1786   0004C8  0E01               	movlw	1
  1787   0004CA  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1788   0004CC  0E00               	movlw	0
  1789   0004CE  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1790   0004D0  C053  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1791   0004D4  C054  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1792   0004D8  50DF               	movf	indf2,w,c
  1793   0004DA  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1794   0004DC  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1795                           
  1796                           ;sgl.c: 35: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1797   0004E0  0E01               	movlw	1
  1798   0004E2  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1799   0004E4  0E04               	movlw	4
  1800   0004E6  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1801   0004E8  C053  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1802   0004EC  C054  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1803   0004F0  50DF               	movf	indf2,w,c
  1804   0004F2  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1805   0004F4  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1806   0004F8                     l1865:
  1807   0004F8  FFFF               	dw	65535	; assembler added errata NOP
  1808                           
  1809                           ;sgl.c: 36: };sgl.c: 37: *toggle = *toggle ^ 1;
  1810   0004FA  C053  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1811   0004FE  C054  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1812   000502  50DF               	movf	indf2,w,c
  1813   000504  0A01               	xorlw	1
  1814   000506  C053  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1815   00050A  C054  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1816   00050E  6EDF               	movwf	indf2,c
  1817   000510  0012               	return		;funcret
  1818   000512  FFFF               	dw	65535	; errata NOP
  1819   000514                     __end_of_SGL_toggleSideHazardLights:
  1820                           	callstack 0
  1821                           
  1822 ;; *************** function _SGL_toggleAllHazardLights *****************
  1823 ;; Defined at:
  1824 ;;		line 16 in file "sgl.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  toggle          2   28[COMRAM] PTR unsigned char 
  1827 ;;		 -> SGL_BlinkPasiveState@toggleLights(1), 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;		None
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  1    wreg      void 
  1832 ;; Registers used:
  1833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1842 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1843 ;;Total ram usage:        2 bytes
  1844 ;; Hardware stack levels used: 1
  1845 ;; Hardware stack levels required when called: 4
  1846 ;; This function calls:
  1847 ;;		_IOC_vSetOutputPort
  1848 ;; This function is called by:
  1849 ;;		_SGL_BlinkPasiveState
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           	psect	text14
  1854   000718                     __ptext14:
  1855                           	callstack 0
  1856   000718                     _SGL_toggleAllHazardLights:
  1857                           	callstack 0
  1858   000718  FFFF               	dw	65535	; assembler added errata NOP
  1859                           
  1860                           ;sgl.c: 18: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1861                           
  1862                           ;incstack = 0
  1863   00071A  0E01               	movlw	1
  1864   00071C  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1865   00071E  0E00               	movlw	0
  1866   000720  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1867   000722  C053  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1868   000726  C054  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1869   00072A  50DF               	movf	indf2,w,c
  1870   00072C  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1871   00072E  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1872                           
  1873                           ;sgl.c: 19: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1874   000732  0E01               	movlw	1
  1875   000734  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1876   000736  0E03               	movlw	3
  1877   000738  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1878   00073A  C053  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1879   00073E  C054  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1880   000742  50DF               	movf	indf2,w,c
  1881   000744  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1882   000746  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1883                           
  1884                           ;sgl.c: 20: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1885   00074A  0E01               	movlw	1
  1886   00074C  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1887   00074E  0E04               	movlw	4
  1888   000750  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1889   000752  C053  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1890   000756  C054  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1891   00075A  50DF               	movf	indf2,w,c
  1892   00075C  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1893   00075E  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1894                           
  1895                           ;sgl.c: 21: IOC_vSetOutputPort(IOC_SSS, *toggle);
  1896   000762  0E01               	movlw	1
  1897   000764  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1898   000766  0E07               	movlw	7
  1899   000768  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1900   00076A  C053  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1901   00076E  C054  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1902   000772  50DF               	movf	indf2,w,c
  1903   000774  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1904   000776  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1905                           
  1906                           ;sgl.c: 22: *toggle = *toggle ^ 1;
  1907   00077A  C053  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1908   00077E  C054  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1909   000782  50DF               	movf	indf2,w,c
  1910   000784  0A01               	xorlw	1
  1911   000786  C053  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1912   00078A  C054  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1913   00078E  6EDF               	movwf	indf2,c
  1914   000790  0012               	return		;funcret
  1915   000792  FFFF               	dw	65535	; errata NOP
  1916   000794                     __end_of_SGL_toggleAllHazardLights:
  1917                           	callstack 0
  1918                           
  1919 ;; *************** function _SGL_setAllHazardLights *****************
  1920 ;; Defined at:
  1921 ;;		line 40 in file "sgl.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;  value           1    wreg     unsigned char 
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;  value           1   28[COMRAM] unsigned char 
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		wreg, status,2, status,0, cstack
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1938 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1939 ;;Total ram usage:        1 bytes
  1940 ;; Hardware stack levels used: 1
  1941 ;; Hardware stack levels required when called: 4
  1942 ;; This function calls:
  1943 ;;		_IOC_vSetOutputPort
  1944 ;; This function is called by:
  1945 ;;		_SGL_BlinkPasiveState
  1946 ;;		_SGL_BlinkSwitchOnState
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           	psect	text15
  1951   000A24                     __ptext15:
  1952                           	callstack 0
  1953   000A24                     _SGL_setAllHazardLights:
  1954                           	callstack 0
  1955   000A24  FFFF               	dw	65535	; assembler added errata NOP
  1956                           
  1957                           ;incstack = 0
  1958                           ;SGL_setAllHazardLights@value stored from wreg
  1959   000A26  6E53               	movwf	SGL_setAllHazardLights@value^0,c
  1960                           
  1961                           ;sgl.c: 42: IOC_vSetOutputPort(IOC_SFD, value);
  1962   000A28  0E01               	movlw	1
  1963   000A2A  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1964   000A2C  0E00               	movlw	0
  1965   000A2E  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1966   000A30  C053  F050         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  1967   000A34  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1968                           
  1969                           ;sgl.c: 43: IOC_vSetOutputPort(IOC_SFS, value);
  1970   000A38  0E01               	movlw	1
  1971   000A3A  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1972   000A3C  0E03               	movlw	3
  1973   000A3E  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1974   000A40  C053  F050         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  1975   000A44  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1976                           
  1977                           ;sgl.c: 44: IOC_vSetOutputPort(IOC_SSD, value);
  1978   000A48  0E01               	movlw	1
  1979   000A4A  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1980   000A4C  0E04               	movlw	4
  1981   000A4E  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1982   000A50  C053  F050         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  1983   000A54  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1984                           
  1985                           ;sgl.c: 45: IOC_vSetOutputPort(IOC_SSS, value);
  1986   000A58  0E01               	movlw	1
  1987   000A5A  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1988   000A5C  0E07               	movlw	7
  1989   000A5E  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1990   000A60  C053  F050         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  1991   000A64  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  1992   000A68  0012               	return		;funcret
  1993   000A6A  FFFF               	dw	65535	; errata NOP
  1994   000A6C                     __end_of_SGL_setAllHazardLights:
  1995                           	callstack 0
  1996                           
  1997 ;; *************** function _SGL_BlinkEventPoll *****************
  1998 ;; Defined at:
  1999 ;;		line 222 in file "sgl.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;		None
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;		None
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      void 
  2006 ;; Registers used:
  2007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2017 ;;Total ram usage:        0 bytes
  2018 ;; Hardware stack levels used: 1
  2019 ;; Hardware stack levels required when called: 4
  2020 ;; This function calls:
  2021 ;;		_IOC_T16GetInputPort
  2022 ;; This function is called by:
  2023 ;;		_SGL_BlinkersInit
  2024 ;;		_SGL_BlinkersRun
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           	psect	text16
  2029   000B62                     __ptext16:
  2030                           	callstack 0
  2031   000B62                     _SGL_BlinkEventPoll:
  2032                           	callstack 0
  2033   000B62  FFFF               	dw	65535	; assembler added errata NOP
  2034                           
  2035                           ;sgl.c: 224: blinkerSM.avarie = IOC_T16GetInputPort(IOC_AVARII);
  2036                           
  2037                           ;incstack = 0
  2038   000B64  0E00               	movlw	0
  2039   000B66  6E49               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2040   000B68  0E02               	movlw	2
  2041   000B6A  6E48               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2042   000B6C  ECBD  F004         	call	_IOC_T16GetInputPort	;wreg free
  2043   000B70  5048               	movf	?_IOC_T16GetInputPort^0,w,c
  2044   000B72  6E07               	movwf	(_blinkerSM+6)^0,c
  2045                           
  2046                           ;sgl.c: 225: blinkerSM.leftSwitch = IOC_T16GetInputPort(IOC_SEM_S);
  2047   000B74  0E00               	movlw	0
  2048   000B76  6E49               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2049   000B78  0E04               	movlw	4
  2050   000B7A  6E48               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2051   000B7C  ECBD  F004         	call	_IOC_T16GetInputPort	;wreg free
  2052   000B80  5048               	movf	?_IOC_T16GetInputPort^0,w,c
  2053   000B82  6E08               	movwf	(_blinkerSM+7)^0,c
  2054                           
  2055                           ;sgl.c: 226: blinkerSM.rightSwitch = IOC_T16GetInputPort(IOC_SEM_D);
  2056   000B84  0E00               	movlw	0
  2057   000B86  6E49               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2058   000B88  0E03               	movlw	3
  2059   000B8A  6E48               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2060   000B8C  ECBD  F004         	call	_IOC_T16GetInputPort	;wreg free
  2061   000B90  5048               	movf	?_IOC_T16GetInputPort^0,w,c
  2062   000B92  6E09               	movwf	(_blinkerSM+8)^0,c
  2063   000B94  0012               	return		;funcret
  2064   000B96  FFFF               	dw	65535	; errata NOP
  2065   000B98                     __end_of_SGL_BlinkEventPoll:
  2066                           	callstack 0
  2067                           
  2068 ;; *************** function _LIGHTS_BrakeRun *****************
  2069 ;; Defined at:
  2070 ;;		line 10 in file "lights.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used: 1
  2090 ;; Hardware stack levels required when called: 4
  2091 ;; This function calls:
  2092 ;;		_IOC_T16GetInputPort
  2093 ;;		_IOC_vSetOutputPort
  2094 ;; This function is called by:
  2095 ;;		_TASK_vTask1ms
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text17
  2100   000BFE                     __ptext17:
  2101                           	callstack 0
  2102   000BFE                     _LIGHTS_BrakeRun:
  2103                           	callstack 0
  2104   000BFE  FFFF               	dw	65535	; assembler added errata NOP
  2105                           
  2106                           ;lights.c: 12: static T_U8 counter = 0;;lights.c: 14: if(4 == counter)
  2107                           
  2108                           ;incstack = 0
  2109   000C00  0E04               	movlw	4
  2110   000C02  182F               	xorwf	LIGHTS_BrakeRun@counter^0,w,c
  2111   000C04  A4D8               	btfss	status,2,c
  2112   000C06  D010               	goto	l2135
  2113                           
  2114                           ;lights.c: 15: {;lights.c: 16: IOC_vSetOutputPort(IOC_LSF, IOC_T16GetInputPort(IOC_FRANA
      +                          ));
  2115   000C08  0E01               	movlw	1
  2116   000C0A  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2117   000C0C  0E05               	movlw	5
  2118   000C0E  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2119   000C10  0E00               	movlw	0
  2120   000C12  6E49               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2121   000C14  0E00               	movlw	0
  2122   000C16  6E48               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2123   000C18  ECBD  F004         	call	_IOC_T16GetInputPort	;wreg free
  2124   000C1C  5048               	movf	?_IOC_T16GetInputPort^0,w,c
  2125   000C1E  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2126   000C20  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2127                           
  2128                           ;lights.c: 17: counter = 0;
  2129   000C24  0E00               	movlw	0
  2130   000C26  6E2F               	movwf	LIGHTS_BrakeRun@counter^0,c
  2131   000C28                     l2135:
  2132   000C28  FFFF               	dw	65535	; assembler added errata NOP
  2133                           
  2134                           ;lights.c: 18: };lights.c: 19: ++counter;
  2135   000C2A  2A2F               	incf	LIGHTS_BrakeRun@counter^0,f,c
  2136   000C2C  0012               	return		;funcret
  2137   000C2E  FFFF               	dw	65535	; errata NOP
  2138   000C30                     __end_of_LIGHTS_BrakeRun:
  2139                           	callstack 0
  2140                           
  2141 ;; *************** function _TASK_vTask10ms *****************
  2142 ;; Defined at:
  2143 ;;		line 22 in file "tasks.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;		None
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;		None
  2148 ;; Return value:  Size  Location     Type
  2149 ;;                  1    wreg      void 
  2150 ;; Registers used:
  2151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2161 ;;Total ram usage:        0 bytes
  2162 ;; Hardware stack levels used: 1
  2163 ;; Hardware stack levels required when called: 7
  2164 ;; This function calls:
  2165 ;;		_LIGHTS_HeadLampRun
  2166 ;; This function is called by:
  2167 ;;		_SCHED_vStartScheduler
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text18
  2172   000D4C                     __ptext18:
  2173                           	callstack 0
  2174   000D4C                     _TASK_vTask10ms:
  2175                           	callstack 0
  2176   000D4C  FFFF               	dw	65535	; assembler added errata NOP
  2177                           
  2178                           ;tasks.c: 24: LIGHTS_HeadLampRun();
  2179                           
  2180                           ;incstack = 0
  2181   000D4E  EC92  F004         	call	_LIGHTS_HeadLampRun	;wreg free
  2182   000D52  0012               	return		;funcret
  2183   000D54  FFFF               	dw	65535	; errata NOP
  2184   000D56                     __end_of_TASK_vTask10ms:
  2185                           	callstack 0
  2186                           
  2187 ;; *************** function _LIGHTS_HeadLampRun *****************
  2188 ;; Defined at:
  2189 ;;		line 119 in file "lights.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;		None
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;		None
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2207 ;;Total ram usage:        0 bytes
  2208 ;; Hardware stack levels used: 1
  2209 ;; Hardware stack levels required when called: 6
  2210 ;; This function calls:
  2211 ;;		_SGL_HeadLightActiveState
  2212 ;;		_SGL_HeadLightEventPoll
  2213 ;;		_SGL_HeadLightPasiveState
  2214 ;; This function is called by:
  2215 ;;		_TASK_vTask10ms
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text19
  2220   000924                     __ptext19:
  2221                           	callstack 0
  2222   000924                     _LIGHTS_HeadLampRun:
  2223                           	callstack 0
  2224   000924  FFFF               	dw	65535	; assembler added errata NOP
  2225                           
  2226                           ;lights.c: 121: if(0 != headLightSM._currentState)
  2227                           
  2228                           ;incstack = 0
  2229   000926  500D               	movf	_headLightSM^0,w,c
  2230   000928  100E               	iorwf	(_headLightSM+1)^0,w,c
  2231   00092A  B4D8               	btfsc	status,2,c
  2232   00092C  D00E               	goto	u1619
  2233                           
  2234                           ;lights.c: 122: {;lights.c: 123: (*headLightSM._currentState)();
  2235   00092E  D801               	call	u1618
  2236   000930  D00C               	goto	u1619
  2237   000932                     u1618:
  2238   000932  FFFF               	dw	65535	; assembler added errata NOP
  2239   000934  0005               	push	
  2240   000936  6EFA               	movwf	pclath,c
  2241   000938  500D               	movf	_headLightSM^0,w,c
  2242   00093A  6EFD               	movwf	tosl,c
  2243   00093C  500E               	movf	(_headLightSM+1)^0,w,c
  2244   00093E  6EFE               	movwf	tosh,c
  2245   000940  50F8               	movf	tblptru,w,c
  2246   000942  6EFF               	movwf	tosu,c
  2247   000944  50FA               	movf	pclath,w,c
  2248   000946  0012               	return		;indir
  2249   000948  FFFF               	dw	65535	; errata NOP
  2250   00094A                     u1619:
  2251   00094A  FFFF               	dw	65535	; assembler added errata NOP
  2252                           
  2253                           ;lights.c: 124: };lights.c: 125: if(0 != headLightSM._pollEvents)
  2254   00094C  500F               	movf	(_headLightSM+2)^0,w,c
  2255   00094E  1010               	iorwf	(_headLightSM+3)^0,w,c
  2256   000950  B4D8               	btfsc	status,2,c
  2257   000952  D010               	goto	u1639
  2258                           
  2259                           ;lights.c: 126: {;lights.c: 127: (*headLightSM._pollEvents)();
  2260   000954  EE20  F00F         	lfsr	2,_headLightSM+2
  2261   000958  D801               	call	u1638
  2262   00095A  D00C               	goto	u1639
  2263   00095C                     u1638:
  2264   00095C  FFFF               	dw	65535	; assembler added errata NOP
  2265   00095E  0005               	push	
  2266   000960  6EFA               	movwf	pclath,c
  2267   000962  50DE               	movf	postinc2,w,c
  2268   000964  6EFD               	movwf	tosl,c
  2269   000966  50DE               	movf	postinc2,w,c
  2270   000968  6EFE               	movwf	tosh,c
  2271   00096A  50F8               	movf	tblptru,w,c
  2272   00096C  6EFF               	movwf	tosu,c
  2273   00096E  50FA               	movf	pclath,w,c
  2274   000970  0012               	return		;indir
  2275   000972  FFFF               	dw	65535	; errata NOP
  2276   000974                     u1639:
  2277   000974  FFFF               	dw	65535	; assembler added errata NOP
  2278   000976  0012               	return		;funcret
  2279   000978  FFFF               	dw	65535	; errata NOP
  2280   00097A                     __end_of_LIGHTS_HeadLampRun:
  2281                           	callstack 0
  2282                           
  2283 ;; *************** function _SGL_HeadLightActiveState *****************
  2284 ;; Defined at:
  2285 ;;		line 79 in file "lights.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      void 
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, status,0, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2303 ;;Total ram usage:        0 bytes
  2304 ;; Hardware stack levels used: 1
  2305 ;; Hardware stack levels required when called: 4
  2306 ;; This function calls:
  2307 ;;		_IOC_vSetOutputPort
  2308 ;; This function is called by:
  2309 ;;		_SGL_HeadLightPasiveState
  2310 ;;		_LIGHTS_HeadLampRun
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text20
  2315   00036C                     __ptext20:
  2316                           	callstack 0
  2317   00036C                     _SGL_HeadLightActiveState:
  2318                           	callstack 0
  2319   00036C  FFFF               	dw	65535	; assembler added errata NOP
  2320                           
  2321                           ;lights.c: 82: if(headLightSM.firstEntry == 1)
  2322                           
  2323                           ;incstack = 0
  2324   00036E  0411               	decf	(_headLightSM+4)^0,w,c
  2325   000370  1012               	iorwf	(_headLightSM+5)^0,w,c
  2326   000372  A4D8               	btfss	status,2,c
  2327   000374  D01C               	goto	l2081
  2328                           
  2329                           ;lights.c: 83: {;lights.c: 84: IOC_vSetOutputPort(IOC_LS, 1);
  2330   000376  0E01               	movlw	1
  2331   000378  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2332   00037A  0E06               	movlw	6
  2333   00037C  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2334   00037E  0E01               	movlw	1
  2335   000380  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2336   000382  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2337                           
  2338                           ;lights.c: 85: IOC_vSetOutputPort(IOC_FS, 1);
  2339   000386  0E01               	movlw	1
  2340   000388  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2341   00038A  0E02               	movlw	2
  2342   00038C  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2343   00038E  0E01               	movlw	1
  2344   000390  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2345   000392  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2346                           
  2347                           ;lights.c: 86: IOC_vSetOutputPort(IOC_FD, 1);
  2348   000396  0E01               	movlw	1
  2349   000398  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2350   00039A  0E01               	movlw	1
  2351   00039C  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2352   00039E  0E01               	movlw	1
  2353   0003A0  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2354   0003A2  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2355                           
  2356                           ;lights.c: 87: headLightSM.firstEntry = 0;
  2357   0003A6  0E00               	movlw	0
  2358   0003A8  6E12               	movwf	(_headLightSM+5)^0,c
  2359   0003AA  0E00               	movlw	0
  2360   0003AC  6E11               	movwf	(_headLightSM+4)^0,c
  2361   0003AE                     l2081:
  2362   0003AE  FFFF               	dw	65535	; assembler added errata NOP
  2363                           
  2364                           ;lights.c: 88: };lights.c: 93: if(0 == headLightSM.faruri)
  2365   0003B0  5013               	movf	(_headLightSM+6)^0,w,c
  2366   0003B2  A4D8               	btfss	status,2,c
  2367   0003B4  D020               	goto	l376
  2368                           
  2369                           ;lights.c: 94: {;lights.c: 95: headLightSM._currentState = SGL_HeadLightPasiveState;
  2370   0003B6  0EFC               	movlw	low _SGL_HeadLightPasiveState
  2371   0003B8  6E0D               	movwf	_headLightSM^0,c
  2372   0003BA  0E03               	movlw	high _SGL_HeadLightPasiveState
  2373   0003BC  6E0E               	movwf	(_headLightSM+1)^0,c
  2374                           
  2375                           ;lights.c: 96: headLightSM.firstEntry = 1;
  2376   0003BE  0E00               	movlw	0
  2377   0003C0  6E12               	movwf	(_headLightSM+5)^0,c
  2378   0003C2  0E01               	movlw	1
  2379   0003C4  6E11               	movwf	(_headLightSM+4)^0,c
  2380                           
  2381                           ;lights.c: 97: IOC_vSetOutputPort(IOC_LS, 0);
  2382   0003C6  0E01               	movlw	1
  2383   0003C8  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2384   0003CA  0E06               	movlw	6
  2385   0003CC  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2386   0003CE  0E00               	movlw	0
  2387   0003D0  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2388   0003D2  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2389                           
  2390                           ;lights.c: 98: IOC_vSetOutputPort(IOC_FS, 0);
  2391   0003D6  0E01               	movlw	1
  2392   0003D8  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2393   0003DA  0E02               	movlw	2
  2394   0003DC  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2395   0003DE  0E00               	movlw	0
  2396   0003E0  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2397   0003E2  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2398                           
  2399                           ;lights.c: 99: IOC_vSetOutputPort(IOC_FD, 0);
  2400   0003E6  0E01               	movlw	1
  2401   0003E8  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2402   0003EA  0E01               	movlw	1
  2403   0003EC  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2404   0003EE  0E00               	movlw	0
  2405   0003F0  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2406   0003F2  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2407   0003F6                     l376:
  2408   0003F6  FFFF               	dw	65535	; assembler added errata NOP
  2409   0003F8  0012               	return		;funcret
  2410   0003FA  FFFF               	dw	65535	; errata NOP
  2411   0003FC                     __end_of_SGL_HeadLightActiveState:
  2412                           	callstack 0
  2413                           
  2414 ;; *************** function _SGL_HeadLightPasiveState *****************
  2415 ;; Defined at:
  2416 ;;		line 50 in file "lights.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;		None
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;		None
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      void 
  2423 ;; Registers used:
  2424 ;;		wreg, status,2, status,0, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2434 ;;Total ram usage:        0 bytes
  2435 ;; Hardware stack levels used: 1
  2436 ;; Hardware stack levels required when called: 5
  2437 ;; This function calls:
  2438 ;;		_IOC_vSetOutputPort
  2439 ;;		_SGL_isNight
  2440 ;; This function is called by:
  2441 ;;		_SGL_HeadLightActiveState
  2442 ;;		_LIGHTS_HeadLampInit
  2443 ;;		_LIGHTS_HeadLampRun
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text21
  2448   0003FC                     __ptext21:
  2449                           	callstack 0
  2450   0003FC                     _SGL_HeadLightPasiveState:
  2451                           	callstack 0
  2452   0003FC  FFFF               	dw	65535	; assembler added errata NOP
  2453                           
  2454                           ;lights.c: 53: if(headLightSM.firstEntry == 1)
  2455                           
  2456                           ;incstack = 0
  2457   0003FE  0411               	decf	(_headLightSM+4)^0,w,c
  2458   000400  1012               	iorwf	(_headLightSM+5)^0,w,c
  2459   000402  A4D8               	btfss	status,2,c
  2460   000404  D014               	goto	l2061
  2461                           
  2462                           ;lights.c: 54: {;lights.c: 55: IOC_vSetOutputPort(IOC_IFS, 0);
  2463   000406  0E02               	movlw	2
  2464   000408  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2465   00040A  0E01               	movlw	1
  2466   00040C  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2467   00040E  0E00               	movlw	0
  2468   000410  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2469   000412  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2470                           
  2471                           ;lights.c: 56: IOC_vSetOutputPort(IOC_LS, 0);
  2472   000416  0E01               	movlw	1
  2473   000418  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2474   00041A  0E06               	movlw	6
  2475   00041C  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2476   00041E  0E00               	movlw	0
  2477   000420  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2478   000422  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2479                           
  2480                           ;lights.c: 57: headLightSM.firstEntry = 0;
  2481   000426  0E00               	movlw	0
  2482   000428  6E12               	movwf	(_headLightSM+5)^0,c
  2483   00042A  0E00               	movlw	0
  2484   00042C  6E11               	movwf	(_headLightSM+4)^0,c
  2485   00042E                     l2061:
  2486   00042E  FFFF               	dw	65535	; assembler added errata NOP
  2487                           
  2488                           ;lights.c: 58: };lights.c: 61: if(SGL_isNight())
  2489   000430  EC8A  F002         	call	_SGL_isNight	;wreg free
  2490   000434  0900               	iorlw	0
  2491   000436  B4D8               	btfsc	status,2,c
  2492   000438  D009               	goto	l2065
  2493                           
  2494                           ;lights.c: 62: {;lights.c: 63: IOC_vSetOutputPort(IOC_IFS, 1);
  2495   00043A  0E02               	movlw	2
  2496   00043C  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2497   00043E  0E01               	movlw	1
  2498   000440  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2499   000442  0E01               	movlw	1
  2500   000444  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2501   000446  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2502                           
  2503                           ;lights.c: 64: }
  2504   00044A  D009               	goto	l2067
  2505   00044C                     l2065:
  2506   00044C  FFFF               	dw	65535	; assembler added errata NOP
  2507                           
  2508                           ;lights.c: 65: else;lights.c: 66: {;lights.c: 67: IOC_vSetOutputPort(IOC_IFS, 0);
  2509   00044E  0E02               	movlw	2
  2510   000450  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2511   000452  0E01               	movlw	1
  2512   000454  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2513   000456  0E00               	movlw	0
  2514   000458  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2515   00045A  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2516   00045E                     l2067:
  2517   00045E  FFFF               	dw	65535	; assembler added errata NOP
  2518                           
  2519                           ;lights.c: 68: };lights.c: 71: if(1 == headLightSM.faruri)
  2520   000460  0413               	decf	(_headLightSM+6)^0,w,c
  2521   000462  A4D8               	btfss	status,2,c
  2522   000464  D010               	goto	l371
  2523                           
  2524                           ;lights.c: 72: {;lights.c: 73: headLightSM.firstEntry = 1;
  2525   000466  0E00               	movlw	0
  2526   000468  6E12               	movwf	(_headLightSM+5)^0,c
  2527   00046A  0E01               	movlw	1
  2528   00046C  6E11               	movwf	(_headLightSM+4)^0,c
  2529                           
  2530                           ;lights.c: 74: headLightSM._currentState = SGL_HeadLightActiveState;
  2531   00046E  0E6C               	movlw	low _SGL_HeadLightActiveState
  2532   000470  6E0D               	movwf	_headLightSM^0,c
  2533   000472  0E03               	movlw	high _SGL_HeadLightActiveState
  2534   000474  6E0E               	movwf	(_headLightSM+1)^0,c
  2535                           
  2536                           ;lights.c: 75: IOC_vSetOutputPort(IOC_IFS, 0);
  2537   000476  0E02               	movlw	2
  2538   000478  6E4F               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2539   00047A  0E01               	movlw	1
  2540   00047C  6E4E               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2541   00047E  0E00               	movlw	0
  2542   000480  6E50               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2543   000482  EC77  F005         	call	_IOC_vSetOutputPort	;wreg free
  2544   000486                     l371:
  2545   000486  FFFF               	dw	65535	; assembler added errata NOP
  2546   000488  0012               	return		;funcret
  2547   00048A  FFFF               	dw	65535	; errata NOP
  2548   00048C                     __end_of_SGL_HeadLightPasiveState:
  2549                           	callstack 0
  2550                           
  2551 ;; *************** function _SGL_isNight *****************
  2552 ;; Defined at:
  2553 ;;		line 30 in file "lights.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;  currentLight    2   27[COMRAM] unsigned int 
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      unsigned char 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2, status,0, cstack
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2568 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2571 ;;Total ram usage:        2 bytes
  2572 ;; Hardware stack levels used: 1
  2573 ;; Hardware stack levels required when called: 4
  2574 ;; This function calls:
  2575 ;;		___ftge
  2576 ;;		___lwtoft
  2577 ;; This function is called by:
  2578 ;;		_SGL_HeadLightPasiveState
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text22
  2583   000514                     __ptext22:
  2584                           	callstack 0
  2585   000514                     _SGL_isNight:
  2586                           	callstack 0
  2587   000514  FFFF               	dw	65535	; assembler added errata NOP
  2588                           
  2589                           ;lights.c: 32: static T_U8 prevState = 0;;lights.c: 33: T_U16 currentLightLevel = headLi
      +                          ghtSM.lightLevel;
  2590                           
  2591                           ;incstack = 0
  2592   000516  C014  F052         	movff	_headLightSM+7,SGL_isNight@currentLightLevel
  2593   00051A  C015  F053         	movff	_headLightSM+8,SGL_isNight@currentLightLevel+1
  2594                           
  2595                           ;lights.c: 35: if(prevState == 0 && currentLightLevel < (2.2*204))
  2596   00051E  502E               	movf	SGL_isNight@prevState^0,w,c
  2597   000520  A4D8               	btfss	status,2,c
  2598   000522  D01B               	goto	l1887
  2599   000524  C052  F046         	movff	SGL_isNight@currentLightLevel,___lwtoft@c
  2600   000528  C053  F047         	movff	SGL_isNight@currentLightLevel+1,___lwtoft@c+1
  2601   00052C  EC42  F006         	call	___lwtoft	;wreg free
  2602   000530  C046  F049         	movff	?___lwtoft,___ftge@ff1
  2603   000534  C047  F04A         	movff	?___lwtoft+1,___ftge@ff1+1
  2604   000538  C048  F04B         	movff	?___lwtoft+2,___ftge@ff1+2
  2605   00053C  0E66               	movlw	102
  2606   00053E  6E4C               	movwf	___ftge@ff2^0,c
  2607   000540  0EE0               	movlw	224
  2608   000542  6E4D               	movwf	(___ftge@ff2+1)^0,c
  2609   000544  0E43               	movlw	67
  2610   000546  6E4E               	movwf	(___ftge@ff2+2)^0,c
  2611   000548  ECCE  F002         	call	___ftge	;wreg free
  2612   00054C  B0D8               	btfsc	status,0,c
  2613   00054E  D005               	goto	l1887
  2614                           
  2615                           ;lights.c: 36: {;lights.c: 37: prevState = 1;
  2616   000550  0E01               	movlw	1
  2617   000552  FFFF               	dw	65535	; assembler added errata NOP
  2618   000554  6E2E               	movwf	SGL_isNight@prevState^0,c
  2619                           
  2620                           ;lights.c: 38: return 1;
  2621   000556  0E01               	movlw	1
  2622   000558  D01E               	goto	l363
  2623   00055A                     l1887:
  2624   00055A  FFFF               	dw	65535	; assembler added errata NOP
  2625                           
  2626                           ;lights.c: 39: };lights.c: 41: if(prevState == 1 && currentLightLevel > (2.4*204))
  2627   00055C  042E               	decf	SGL_isNight@prevState^0,w,c
  2628   00055E  A4D8               	btfss	status,2,c
  2629   000560  D018               	goto	l1897
  2630   000562  0ECD               	movlw	205
  2631   000564  6E49               	movwf	___ftge@ff1^0,c
  2632   000566  0EF4               	movlw	244
  2633   000568  6E4A               	movwf	(___ftge@ff1+1)^0,c
  2634   00056A  0E43               	movlw	67
  2635   00056C  6E4B               	movwf	(___ftge@ff1+2)^0,c
  2636   00056E  C052  F046         	movff	SGL_isNight@currentLightLevel,___lwtoft@c
  2637   000572  C053  F047         	movff	SGL_isNight@currentLightLevel+1,___lwtoft@c+1
  2638   000576  EC42  F006         	call	___lwtoft	;wreg free
  2639   00057A  C046  F04C         	movff	?___lwtoft,___ftge@ff2
  2640   00057E  C047  F04D         	movff	?___lwtoft+1,___ftge@ff2+1
  2641   000582  C048  F04E         	movff	?___lwtoft+2,___ftge@ff2+2
  2642   000586  ECCE  F002         	call	___ftge	;wreg free
  2643   00058A  B0D8               	btfsc	status,0,c
  2644   00058C  D002               	goto	l1897
  2645                           
  2646                           ;lights.c: 42: {;lights.c: 43: prevState = 0;
  2647   00058E  0E00               	movlw	0
  2648   000590  D7E0               	goto	L2
  2649   000592                     l1897:
  2650   000592  FFFF               	dw	65535	; assembler added errata NOP
  2651                           
  2652                           ;lights.c: 45: };lights.c: 47: return prevState;
  2653   000594  502E               	movf	SGL_isNight@prevState^0,w,c
  2654   000596                     l363:
  2655   000596  FFFF               	dw	65535	; assembler added errata NOP
  2656   000598  0012               	return		;funcret
  2657   00059A  FFFF               	dw	65535	; errata NOP
  2658   00059C                     __end_of_SGL_isNight:
  2659                           	callstack 0
  2660                           
  2661 ;; *************** function ___lwtoft *****************
  2662 ;; Defined at:
  2663 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwtoft.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  c               2   15[COMRAM] unsigned int 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;		None
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  3   15[COMRAM] float 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2677 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2680 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2681 ;;Total ram usage:        3 bytes
  2682 ;; Hardware stack levels used: 1
  2683 ;; Hardware stack levels required when called: 3
  2684 ;; This function calls:
  2685 ;;		___ftpack
  2686 ;; This function is called by:
  2687 ;;		_SGL_isNight
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text23
  2692   000C84                     __ptext23:
  2693                           	callstack 0
  2694   000C84                     ___lwtoft:
  2695                           	callstack 0
  2696   000C84  FFFF               	dw	65535	; assembler added errata NOP
  2697                           
  2698                           ;incstack = 0
  2699   000C86  C046  F03E         	movff	___lwtoft@c,___ftpack@arg
  2700   000C8A  C047  F03F         	movff	___lwtoft@c+1,___ftpack@arg+1
  2701   000C8E  6A40               	clrf	(___ftpack@arg+2)^0,c
  2702   000C90  0E8E               	movlw	142
  2703   000C92  6E41               	movwf	___ftpack@exp^0,c
  2704   000C94  0E00               	movlw	0
  2705   000C96  6E42               	movwf	___ftpack@sign^0,c
  2706   000C98  ECFB  F000         	call	___ftpack	;wreg free
  2707   000C9C  C03E  F046         	movff	?___ftpack,?___lwtoft
  2708   000CA0  C03F  F047         	movff	?___ftpack+1,?___lwtoft+1
  2709   000CA4  C040  F048         	movff	?___ftpack+2,?___lwtoft+2
  2710   000CA8  0012               	return		;funcret
  2711   000CAA  FFFF               	dw	65535	; errata NOP
  2712   000CAC                     __end_of___lwtoft:
  2713                           	callstack 0
  2714                           
  2715 ;; *************** function ___ftpack *****************
  2716 ;; Defined at:
  2717 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\float.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  arg             3    7[COMRAM] unsigned um
  2720 ;;  exp             1   10[COMRAM] unsigned char 
  2721 ;;  sign            1   11[COMRAM] unsigned char 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;		None
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  3    7[COMRAM] float 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2733 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2735 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2736 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2737 ;;Total ram usage:        8 bytes
  2738 ;; Hardware stack levels used: 1
  2739 ;; Hardware stack levels required when called: 2
  2740 ;; This function calls:
  2741 ;;		Nothing
  2742 ;; This function is called by:
  2743 ;;		___lwtoft
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text24
  2748   0001F6                     __ptext24:
  2749                           	callstack 0
  2750   0001F6                     ___ftpack:
  2751                           	callstack 0
  2752   0001F6  FFFF               	dw	65535	; assembler added errata NOP
  2753                           
  2754                           ;incstack = 0
  2755   0001F8  5041               	movf	___ftpack@exp^0,w,c
  2756   0001FA  B4D8               	btfsc	status,2,c
  2757   0001FC  D005               	goto	u1050
  2758   0001FE  503E               	movf	___ftpack@arg^0,w,c
  2759   000200  103F               	iorwf	(___ftpack@arg+1)^0,w,c
  2760   000202  1040               	iorwf	(___ftpack@arg+2)^0,w,c
  2761   000204  A4D8               	btfss	status,2,c
  2762   000206  D00E               	goto	l1767
  2763   000208                     u1050:
  2764   000208  FFFF               	dw	65535	; assembler added errata NOP
  2765   00020A  0E00               	movlw	0
  2766   00020C  6E3E               	movwf	?___ftpack^0,c
  2767   00020E  0E00               	movlw	0
  2768   000210  6E3F               	movwf	(?___ftpack+1)^0,c
  2769   000212  0E00               	movlw	0
  2770   000214  6E40               	movwf	(?___ftpack+2)^0,c
  2771   000216  D04E               	goto	l662
  2772   000218                     l1765:
  2773   000218  FFFF               	dw	65535	; assembler added errata NOP
  2774   00021A  2A41               	incf	___ftpack@exp^0,f,c
  2775   00021C  90D8               	bcf	status,0,c
  2776   00021E  3240               	rrcf	(___ftpack@arg+2)^0,f,c
  2777   000220  323F               	rrcf	(___ftpack@arg+1)^0,f,c
  2778   000222  323E               	rrcf	___ftpack@arg^0,f,c
  2779   000224                     l1767:
  2780   000224  FFFF               	dw	65535	; assembler added errata NOP
  2781   000226  0E00               	movlw	0
  2782   000228  143E               	andwf	___ftpack@arg^0,w,c
  2783   00022A  6E43               	movwf	??___ftpack^0,c
  2784   00022C  0E00               	movlw	0
  2785   00022E  143F               	andwf	(___ftpack@arg+1)^0,w,c
  2786   000230  6E44               	movwf	(??___ftpack+1)^0,c
  2787   000232  0EFE               	movlw	254
  2788   000234  1440               	andwf	(___ftpack@arg+2)^0,w,c
  2789   000236  6E45               	movwf	(??___ftpack+2)^0,c
  2790   000238  5043               	movf	??___ftpack^0,w,c
  2791   00023A  1044               	iorwf	(??___ftpack+1)^0,w,c
  2792   00023C  1045               	iorwf	(??___ftpack+2)^0,w,c
  2793   00023E  B4D8               	btfsc	status,2,c
  2794   000240  D00D               	goto	l1773
  2795   000242  D7EA               	goto	l1765
  2796   000244                     l1769:
  2797   000244  FFFF               	dw	65535	; assembler added errata NOP
  2798   000246  2A41               	incf	___ftpack@exp^0,f,c
  2799   000248  0E01               	movlw	1
  2800   00024A  263E               	addwf	___ftpack@arg^0,f,c
  2801   00024C  0E00               	movlw	0
  2802   00024E  223F               	addwfc	(___ftpack@arg+1)^0,f,c
  2803   000250  0E00               	movlw	0
  2804   000252  2240               	addwfc	(___ftpack@arg+2)^0,f,c
  2805   000254  90D8               	bcf	status,0,c
  2806   000256  3240               	rrcf	(___ftpack@arg+2)^0,f,c
  2807   000258  323F               	rrcf	(___ftpack@arg+1)^0,f,c
  2808   00025A  323E               	rrcf	___ftpack@arg^0,f,c
  2809   00025C                     l1773:
  2810   00025C  FFFF               	dw	65535	; assembler added errata NOP
  2811   00025E  0E00               	movlw	0
  2812   000260  143E               	andwf	___ftpack@arg^0,w,c
  2813   000262  6E43               	movwf	??___ftpack^0,c
  2814   000264  0E00               	movlw	0
  2815   000266  143F               	andwf	(___ftpack@arg+1)^0,w,c
  2816   000268  6E44               	movwf	(??___ftpack+1)^0,c
  2817   00026A  0EFF               	movlw	255
  2818   00026C  1440               	andwf	(___ftpack@arg+2)^0,w,c
  2819   00026E  6E45               	movwf	(??___ftpack+2)^0,c
  2820   000270  5043               	movf	??___ftpack^0,w,c
  2821   000272  1044               	iorwf	(??___ftpack+1)^0,w,c
  2822   000274  1045               	iorwf	(??___ftpack+2)^0,w,c
  2823   000276  B4D8               	btfsc	status,2,c
  2824   000278  D007               	goto	l1777
  2825   00027A  D7E4               	goto	l1769
  2826   00027C                     l1775:
  2827   00027C  FFFF               	dw	65535	; assembler added errata NOP
  2828   00027E  0641               	decf	___ftpack@exp^0,f,c
  2829   000280  90D8               	bcf	status,0,c
  2830   000282  363E               	rlcf	___ftpack@arg^0,f,c
  2831   000284  363F               	rlcf	(___ftpack@arg+1)^0,f,c
  2832   000286  3640               	rlcf	(___ftpack@arg+2)^0,f,c
  2833   000288                     l1777:
  2834   000288  FFFF               	dw	65535	; assembler added errata NOP
  2835   00028A  BE3F               	btfsc	(___ftpack@arg+1)^0,7,c
  2836   00028C  D003               	goto	u1090
  2837   00028E  0E02               	movlw	2
  2838   000290  6041               	cpfslt	___ftpack@exp^0,c
  2839   000292  D7F4               	goto	l1775
  2840   000294                     u1090:
  2841   000294  FFFF               	dw	65535	; assembler added errata NOP
  2842   000296  A041               	btfss	___ftpack@exp^0,0,c
  2843   000298  9E3F               	bcf	(___ftpack@arg+1)^0,7,c
  2844   00029A  90D8               	bcf	status,0,c
  2845   00029C  3241               	rrcf	___ftpack@exp^0,f,c
  2846   00029E  5041               	movf	___ftpack@exp^0,w,c
  2847   0002A0  1240               	iorwf	(___ftpack@arg+2)^0,f,c
  2848   0002A2  5042               	movf	___ftpack@sign^0,w,c
  2849   0002A4  A4D8               	btfss	status,2,c
  2850   0002A6  8E40               	bsf	(___ftpack@arg+2)^0,7,c
  2851   0002A8  C03E  F03E         	movff	___ftpack@arg,?___ftpack
  2852   0002AC  C03F  F03F         	movff	___ftpack@arg+1,?___ftpack+1
  2853   0002B0  C040  F040         	movff	___ftpack@arg+2,?___ftpack+2
  2854   0002B4                     l662:
  2855   0002B4  FFFF               	dw	65535	; assembler added errata NOP
  2856   0002B6  0012               	return		;funcret
  2857   0002B8  FFFF               	dw	65535	; errata NOP
  2858   0002BA                     __end_of___ftpack:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function ___ftge *****************
  2862 ;; Defined at:
  2863 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftge.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;  ff1             3   18[COMRAM] float 
  2866 ;;  ff2             3   21[COMRAM] float 
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;		None
  2869 ;; Return value:  Size  Location     Type
  2870 ;;		None               void
  2871 ;; Registers used:
  2872 ;;		wreg, status,2, status,0
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2878 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2880 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2881 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2882 ;;Total ram usage:        9 bytes
  2883 ;; Hardware stack levels used: 1
  2884 ;; Hardware stack levels required when called: 2
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		_SGL_isNight
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text25
  2893   00059C                     __ptext25:
  2894                           	callstack 0
  2895   00059C                     ___ftge:
  2896                           	callstack 0
  2897   00059C  FFFF               	dw	65535	; assembler added errata NOP
  2898                           
  2899                           ;incstack = 0
  2900   00059E  AE4B               	btfss	(___ftge@ff1+2)^0,7,c
  2901   0005A0  D00F               	goto	l1821
  2902   0005A2  0E00               	movlw	0
  2903   0005A4  6E4F               	movwf	??___ftge^0,c
  2904   0005A6  0E00               	movlw	0
  2905   0005A8  6E50               	movwf	(??___ftge+1)^0,c
  2906   0005AA  0E80               	movlw	128
  2907   0005AC  6E51               	movwf	(??___ftge+2)^0,c
  2908   0005AE  5049               	movf	___ftge@ff1^0,w,c
  2909   0005B0  5C4F               	subwf	??___ftge^0,w,c
  2910   0005B2  6E49               	movwf	___ftge@ff1^0,c
  2911   0005B4  504A               	movf	(___ftge@ff1+1)^0,w,c
  2912   0005B6  5850               	subwfb	(??___ftge+1)^0,w,c
  2913   0005B8  6E4A               	movwf	(___ftge@ff1+1)^0,c
  2914   0005BA  504B               	movf	(___ftge@ff1+2)^0,w,c
  2915   0005BC  5851               	subwfb	(??___ftge+2)^0,w,c
  2916   0005BE  6E4B               	movwf	(___ftge@ff1+2)^0,c
  2917   0005C0                     l1821:
  2918   0005C0  FFFF               	dw	65535	; assembler added errata NOP
  2919   0005C2  AE4E               	btfss	(___ftge@ff2+2)^0,7,c
  2920   0005C4  D00F               	goto	l1825
  2921   0005C6  0E00               	movlw	0
  2922   0005C8  6E4F               	movwf	??___ftge^0,c
  2923   0005CA  0E00               	movlw	0
  2924   0005CC  6E50               	movwf	(??___ftge+1)^0,c
  2925   0005CE  0E80               	movlw	128
  2926   0005D0  6E51               	movwf	(??___ftge+2)^0,c
  2927   0005D2  504C               	movf	___ftge@ff2^0,w,c
  2928   0005D4  5C4F               	subwf	??___ftge^0,w,c
  2929   0005D6  6E4C               	movwf	___ftge@ff2^0,c
  2930   0005D8  504D               	movf	(___ftge@ff2+1)^0,w,c
  2931   0005DA  5850               	subwfb	(??___ftge+1)^0,w,c
  2932   0005DC  6E4D               	movwf	(___ftge@ff2+1)^0,c
  2933   0005DE  504E               	movf	(___ftge@ff2+2)^0,w,c
  2934   0005E0  5851               	subwfb	(??___ftge+2)^0,w,c
  2935   0005E2  6E4E               	movwf	(___ftge@ff2+2)^0,c
  2936   0005E4                     l1825:
  2937   0005E4  FFFF               	dw	65535	; assembler added errata NOP
  2938   0005E6  0E00               	movlw	0
  2939   0005E8  1A49               	xorwf	___ftge@ff1^0,f,c
  2940   0005EA  0E00               	movlw	0
  2941   0005EC  1A4A               	xorwf	(___ftge@ff1+1)^0,f,c
  2942   0005EE  0E80               	movlw	128
  2943   0005F0  1A4B               	xorwf	(___ftge@ff1+2)^0,f,c
  2944   0005F2  0E00               	movlw	0
  2945   0005F4  1A4C               	xorwf	___ftge@ff2^0,f,c
  2946   0005F6  0E00               	movlw	0
  2947   0005F8  1A4D               	xorwf	(___ftge@ff2+1)^0,f,c
  2948   0005FA  0E80               	movlw	128
  2949   0005FC  1A4E               	xorwf	(___ftge@ff2+2)^0,f,c
  2950   0005FE  504C               	movf	___ftge@ff2^0,w,c
  2951   000600  5C49               	subwf	___ftge@ff1^0,w,c
  2952   000602  504D               	movf	(___ftge@ff2+1)^0,w,c
  2953   000604  584A               	subwfb	(___ftge@ff1+1)^0,w,c
  2954   000606  504E               	movf	(___ftge@ff2+2)^0,w,c
  2955   000608  584B               	subwfb	(___ftge@ff1+2)^0,w,c
  2956   00060A  B0D8               	btfsc	status,0,c
  2957   00060C  D002               	goto	l1831
  2958   00060E  90D8               	bcf	status,0,c
  2959   000610  D002               	goto	l737
  2960   000612                     l1831:
  2961   000612  FFFF               	dw	65535	; assembler added errata NOP
  2962   000614  80D8               	bsf	status,0,c
  2963   000616                     l737:
  2964   000616  FFFF               	dw	65535	; assembler added errata NOP
  2965   000618  0012               	return		;funcret
  2966   00061A  FFFF               	dw	65535	; errata NOP
  2967   00061C                     __end_of___ftge:
  2968                           	callstack 0
  2969                           
  2970 ;; *************** function _SGL_HeadLightEventPoll *****************
  2971 ;; Defined at:
  2972 ;;		line 104 in file "lights.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;		None
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;		None
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2990 ;;Total ram usage:        0 bytes
  2991 ;; Hardware stack levels used: 1
  2992 ;; Hardware stack levels required when called: 4
  2993 ;; This function calls:
  2994 ;;		_IOC_T16GetInputPort
  2995 ;; This function is called by:
  2996 ;;		_LIGHTS_HeadLampInit
  2997 ;;		_LIGHTS_HeadLampRun
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text26
  3002   000C5A                     __ptext26:
  3003                           	callstack 0
  3004   000C5A                     _SGL_HeadLightEventPoll:
  3005                           	callstack 0
  3006   000C5A  FFFF               	dw	65535	; assembler added errata NOP
  3007                           
  3008                           ;lights.c: 106: headLightSM.faruri = IOC_T16GetInputPort(IOC_FARURI);
  3009                           
  3010                           ;incstack = 0
  3011   000C5C  0E00               	movlw	0
  3012   000C5E  6E49               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  3013   000C60  0E01               	movlw	1
  3014   000C62  6E48               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  3015   000C64  ECBD  F004         	call	_IOC_T16GetInputPort	;wreg free
  3016   000C68  5048               	movf	?_IOC_T16GetInputPort^0,w,c
  3017   000C6A  6E13               	movwf	(_headLightSM+6)^0,c
  3018                           
  3019                           ;lights.c: 107: headLightSM.lightLevel = IOC_T16GetInputPort(IOC_ADC0);
  3020   000C6C  0E03               	movlw	3
  3021   000C6E  6E49               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  3022   000C70  0E00               	movlw	0
  3023   000C72  6E48               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  3024   000C74  ECBD  F004         	call	_IOC_T16GetInputPort	;wreg free
  3025   000C78  C048  F014         	movff	?_IOC_T16GetInputPort,_headLightSM+7
  3026   000C7C  C049  F015         	movff	?_IOC_T16GetInputPort+1,_headLightSM+8
  3027   000C80  0012               	return		;funcret
  3028   000C82  FFFF               	dw	65535	; errata NOP
  3029   000C84                     __end_of_SGL_HeadLightEventPoll:
  3030                           	callstack 0
  3031                           
  3032 ;; *************** function _IOC_T16GetInputPort *****************
  3033 ;; Defined at:
  3034 ;;		line 19 in file "ioc.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  u16ChannelSe    2   17[COMRAM] const enum E10339
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  u16ChannelMa    2   21[COMRAM] unsigned int 
  3039 ;;  pinValue        2   19[COMRAM] unsigned int 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  2   17[COMRAM] unsigned int 
  3042 ;; Registers used:
  3043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3049 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3050 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3052 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3053 ;;Total ram usage:        6 bytes
  3054 ;; Hardware stack levels used: 1
  3055 ;; Hardware stack levels required when called: 3
  3056 ;; This function calls:
  3057 ;;		_ADC_u16ReadAdcValue
  3058 ;;		_PCS_T16GetInputPortC
  3059 ;; This function is called by:
  3060 ;;		_SGL_BlinkEventPoll
  3061 ;;		_LIGHTS_BrakeRun
  3062 ;;		_SGL_HeadLightEventPoll
  3063 ;;		_LIGHTS_DemoEventPoll
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           	psect	text27
  3068   00097A                     __ptext27:
  3069                           	callstack 0
  3070   00097A                     _IOC_T16GetInputPort:
  3071                           	callstack 0
  3072   00097A  FFFF               	dw	65535	; assembler added errata NOP
  3073                           
  3074                           ;ioc.c: 21: T_U16 pinValue = 0;
  3075                           
  3076                           ;incstack = 0
  3077   00097C  0E00               	movlw	0
  3078   00097E  6E4B               	movwf	(IOC_T16GetInputPort@pinValue+1)^0,c
  3079   000980  0E00               	movlw	0
  3080   000982  6E4A               	movwf	IOC_T16GetInputPort@pinValue^0,c
  3081                           
  3082                           ;ioc.c: 22: T_U16 u16ChannelMask = (u16ChannelSelect&0xFF00);
  3083   000984  0E00               	movlw	0
  3084   000986  1448               	andwf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3085   000988  6E4C               	movwf	IOC_T16GetInputPort@u16ChannelMask^0,c
  3086   00098A  0EFF               	movlw	255
  3087   00098C  1449               	andwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,w,c
  3088   00098E  6E4D               	movwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,c
  3089                           
  3090                           ;ioc.c: 24: if(u16ChannelMask == IOC_PORTC)
  3091   000990  504C               	movf	IOC_T16GetInputPort@u16ChannelMask^0,w,c
  3092   000992  104D               	iorwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,w,c
  3093   000994  A4D8               	btfss	status,2,c
  3094   000996  D008               	goto	l1847
  3095                           
  3096                           ;ioc.c: 25: {;ioc.c: 26: pinValue = PCS_T16GetInputPortC(u16ChannelSelect);
  3097   000998  5048               	movf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3098   00099A  EC38  F004         	call	_PCS_T16GetInputPortC
  3099   00099E  C03E  F04A         	movff	?_PCS_T16GetInputPortC,IOC_T16GetInputPort@pinValue
  3100   0009A2  C03F  F04B         	movff	?_PCS_T16GetInputPortC+1,IOC_T16GetInputPort@pinValue+1
  3101                           
  3102                           ;ioc.c: 27: }
  3103   0009A6  D00D               	goto	l1851
  3104   0009A8                     l1847:
  3105   0009A8  FFFF               	dw	65535	; assembler added errata NOP
  3106                           
  3107                           ;ioc.c: 28: else if(u16ChannelMask == IOC_PORTA)
  3108   0009AA  0E03               	movlw	3
  3109   0009AC  184D               	xorwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,w,c
  3110   0009AE  104C               	iorwf	IOC_T16GetInputPort@u16ChannelMask^0,w,c
  3111   0009B0  A4D8               	btfss	status,2,c
  3112   0009B2  D007               	goto	l1851
  3113                           
  3114                           ;ioc.c: 29: {;ioc.c: 30: pinValue = ADC_u16ReadAdcValue(u16ChannelSelect);
  3115   0009B4  5048               	movf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3116   0009B6  EC58  F005         	call	_ADC_u16ReadAdcValue
  3117   0009BA  C03E  F04A         	movff	?_ADC_u16ReadAdcValue,IOC_T16GetInputPort@pinValue
  3118   0009BE  C03F  F04B         	movff	?_ADC_u16ReadAdcValue+1,IOC_T16GetInputPort@pinValue+1
  3119   0009C2                     l1851:
  3120   0009C2  FFFF               	dw	65535	; assembler added errata NOP
  3121                           
  3122                           ;ioc.c: 31: };ioc.c: 33: return pinValue;
  3123   0009C4  C04A  F048         	movff	IOC_T16GetInputPort@pinValue,?_IOC_T16GetInputPort
  3124   0009C8  C04B  F049         	movff	IOC_T16GetInputPort@pinValue+1,?_IOC_T16GetInputPort+1
  3125   0009CC  0012               	return		;funcret
  3126   0009CE  FFFF               	dw	65535	; errata NOP
  3127   0009D0                     __end_of_IOC_T16GetInputPort:
  3128                           	callstack 0
  3129                           
  3130 ;; *************** function _PCS_T16GetInputPortC *****************
  3131 ;; Defined at:
  3132 ;;		line 50 in file "pcs.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  u8BitNumber     1    wreg     const unsigned char 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  u8BitNumber     1   15[COMRAM] const unsigned char 
  3137 ;;  u8BitNumberV    1   16[COMRAM] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  2    7[COMRAM] unsigned int 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3147 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3148 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3149 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3150 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3151 ;;Total ram usage:       10 bytes
  3152 ;; Hardware stack levels used: 1
  3153 ;; Hardware stack levels required when called: 2
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_IOC_T16GetInputPort
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text28
  3162   000870                     __ptext28:
  3163                           	callstack 0
  3164   000870                     _PCS_T16GetInputPortC:
  3165                           	callstack 0
  3166   000870  FFFF               	dw	65535	; assembler added errata NOP
  3167                           
  3168                           ;incstack = 0
  3169                           ;PCS_T16GetInputPortC@u8BitNumber stored from wreg
  3170   000872  6E46               	movwf	PCS_T16GetInputPortC@u8BitNumber^0,c
  3171                           
  3172                           ;pcs.c: 52: T_U8 u8BitNumberValue = u8BitNumber<=4 ? u8BitNumber : 4;
  3173   000874  0E04               	movlw	4
  3174   000876  6446               	cpfsgt	PCS_T16GetInputPortC@u8BitNumber^0,c
  3175   000878  D005               	goto	l127
  3176   00087A  0E00               	movlw	0
  3177   00087C  6E45               	movwf	(_PCS_T16GetInputPortC$716+1)^0,c
  3178   00087E  0E04               	movlw	4
  3179   000880  6E44               	movwf	_PCS_T16GetInputPortC$716^0,c
  3180   000882  D004               	goto	l129
  3181   000884                     l127:
  3182   000884  FFFF               	dw	65535	; assembler added errata NOP
  3183   000886  C046  F044         	movff	PCS_T16GetInputPortC@u8BitNumber,_PCS_T16GetInputPortC$716
  3184   00088A  6A45               	clrf	(_PCS_T16GetInputPortC$716+1)^0,c
  3185   00088C                     l129:
  3186   00088C  FFFF               	dw	65535	; assembler added errata NOP
  3187   00088E  C044  F047         	movff	_PCS_T16GetInputPortC$716,PCS_T16GetInputPortC@u8BitNumberValue
  3188                           
  3189                           ;pcs.c: 53: return (PORTC & 0x01<<u8BitNumberValue)>>u8BitNumberValue;
  3190   000892  C047  F040         	movff	PCS_T16GetInputPortC@u8BitNumberValue,??_PCS_T16GetInputPortC
  3191   000896  C047  F041         	movff	PCS_T16GetInputPortC@u8BitNumberValue,??_PCS_T16GetInputPortC+1
  3192   00089A  0E01               	movlw	1
  3193   00089C  6E42               	movwf	(??_PCS_T16GetInputPortC+2)^0,c
  3194   00089E  2A41               	incf	(??_PCS_T16GetInputPortC+1)^0,f,c
  3195   0008A0  D003               	goto	u1164
  3196   0008A2                     u1165:
  3197   0008A2  FFFF               	dw	65535	; assembler added errata NOP
  3198   0008A4  90D8               	bcf	status,0,c
  3199   0008A6  3642               	rlcf	(??_PCS_T16GetInputPortC+2)^0,f,c
  3200   0008A8                     u1164:
  3201   0008A8  FFFF               	dw	65535	; assembler added errata NOP
  3202   0008AA  2E41               	decfsz	(??_PCS_T16GetInputPortC+1)^0,f,c
  3203   0008AC  D7FA               	goto	u1165
  3204   0008AE  5042               	movf	(??_PCS_T16GetInputPortC+2)^0,w,c
  3205   0008B0  1482               	andwf	130,w,c	;volatile
  3206   0008B2  6E43               	movwf	(??_PCS_T16GetInputPortC+3)^0,c
  3207   0008B4  2A40               	incf	??_PCS_T16GetInputPortC^0,f,c
  3208   0008B6  D003               	goto	u1174
  3209   0008B8                     u1175:
  3210   0008B8  FFFF               	dw	65535	; assembler added errata NOP
  3211   0008BA  90D8               	bcf	status,0,c
  3212   0008BC  3243               	rrcf	(??_PCS_T16GetInputPortC+3)^0,f,c
  3213   0008BE                     u1174:
  3214   0008BE  FFFF               	dw	65535	; assembler added errata NOP
  3215   0008C0  2E40               	decfsz	??_PCS_T16GetInputPortC^0,f,c
  3216   0008C2  D7FA               	goto	u1175
  3217   0008C4  5043               	movf	(??_PCS_T16GetInputPortC+3)^0,w,c
  3218   0008C6  6E3E               	movwf	?_PCS_T16GetInputPortC^0,c
  3219   0008C8  6A3F               	clrf	(?_PCS_T16GetInputPortC+1)^0,c
  3220   0008CA  0012               	return		;funcret
  3221   0008CC  FFFF               	dw	65535	; errata NOP
  3222   0008CE                     __end_of_PCS_T16GetInputPortC:
  3223                           	callstack 0
  3224                           
  3225 ;; *************** function _ADC_u16ReadAdcValue *****************
  3226 ;; Defined at:
  3227 ;;		line 48 in file "adc.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  U8Channel       1    wreg     const unsigned char 
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;  U8Channel       1   12[COMRAM] const unsigned char 
  3232 ;;  U8ChannelVal    1   11[COMRAM] unsigned char 
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  2    7[COMRAM] unsigned int 
  3235 ;; Registers used:
  3236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3242 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3243 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3245 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3246 ;;Total ram usage:        6 bytes
  3247 ;; Hardware stack levels used: 1
  3248 ;; Hardware stack levels required when called: 2
  3249 ;; This function calls:
  3250 ;;		Nothing
  3251 ;; This function is called by:
  3252 ;;		_IOC_T16GetInputPort
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           	psect	text29
  3257   000AB0                     __ptext29:
  3258                           	callstack 0
  3259   000AB0                     _ADC_u16ReadAdcValue:
  3260                           	callstack 0
  3261   000AB0  FFFF               	dw	65535	; assembler added errata NOP
  3262                           
  3263                           ;incstack = 0
  3264                           ;ADC_u16ReadAdcValue@U8Channel stored from wreg
  3265   000AB2  6E43               	movwf	ADC_u16ReadAdcValue@U8Channel^0,c
  3266                           
  3267                           ;adc.c: 50: T_U8 U8ChannelValue = U8Channel<=1 ? U8Channel : 1;
  3268   000AB4  0E01               	movlw	1
  3269   000AB6  6443               	cpfsgt	ADC_u16ReadAdcValue@U8Channel^0,c
  3270   000AB8  D005               	goto	l59
  3271   000ABA  0E00               	movlw	0
  3272   000ABC  6E41               	movwf	(_ADC_u16ReadAdcValue$374+1)^0,c
  3273   000ABE  0E01               	movlw	1
  3274   000AC0  6E40               	movwf	_ADC_u16ReadAdcValue$374^0,c
  3275   000AC2  D004               	goto	l61
  3276   000AC4                     l59:
  3277   000AC4  FFFF               	dw	65535	; assembler added errata NOP
  3278   000AC6  C043  F040         	movff	ADC_u16ReadAdcValue@U8Channel,_ADC_u16ReadAdcValue$374
  3279   000ACA  6A41               	clrf	(_ADC_u16ReadAdcValue$374+1)^0,c
  3280   000ACC                     l61:
  3281   000ACC  FFFF               	dw	65535	; assembler added errata NOP
  3282   000ACE  C040  F042         	movff	_ADC_u16ReadAdcValue$374,ADC_u16ReadAdcValue@U8ChannelValue
  3283                           
  3284                           ;adc.c: 51: return au16AdcReadValue[U8ChannelValue];
  3285   000AD2  5042               	movf	ADC_u16ReadAdcValue@U8ChannelValue^0,w,c
  3286   000AD4  0D02               	mullw	2
  3287   000AD6  0E1E               	movlw	low _au16AdcReadValue
  3288   000AD8  24F3               	addwf	243,w,c
  3289   000ADA  6ED9               	movwf	fsr2l,c
  3290   000ADC  0E00               	movlw	high _au16AdcReadValue
  3291   000ADE  20F4               	addwfc	prodh,w,c
  3292   000AE0  6EDA               	movwf	fsr2h,c
  3293   000AE2  CFDE F03E          	movff	postinc2,?_ADC_u16ReadAdcValue
  3294   000AE6  CFDD F03F          	movff	postdec2,?_ADC_u16ReadAdcValue+1
  3295   000AEA  0012               	return		;funcret
  3296   000AEC  FFFF               	dw	65535	; errata NOP
  3297   000AEE                     __end_of_ADC_u16ReadAdcValue:
  3298                           	callstack 0
  3299                           
  3300 ;; *************** function _IOC_vSetOutputPort *****************
  3301 ;; Defined at:
  3302 ;;		line 5 in file "ioc.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  u16ChannelSe    2   23[COMRAM] const enum E10327
  3305 ;;  u8Value         1   25[COMRAM] const unsigned char 
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;  u16ChannelMa    2   26[COMRAM] unsigned int 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  1    wreg      void 
  3310 ;; Registers used:
  3311 ;;		wreg, status,2, status,0, cstack
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3317 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3318 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3320 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3321 ;;Total ram usage:        5 bytes
  3322 ;; Hardware stack levels used: 1
  3323 ;; Hardware stack levels required when called: 3
  3324 ;; This function calls:
  3325 ;;		_PCS_vSetOutputPortD
  3326 ;;		_PCS_vSetOutputPortE
  3327 ;; This function is called by:
  3328 ;;		_SGL_toggleAllHazardLights
  3329 ;;		_SGL_toggleSideHazardLights
  3330 ;;		_SGL_setAllHazardLights
  3331 ;;		_SGL_setSideHazardLights
  3332 ;;		_LIGHTS_BrakeInit
  3333 ;;		_LIGHTS_BrakeRun
  3334 ;;		_SGL_HeadLightPasiveState
  3335 ;;		_SGL_HeadLightActiveState
  3336 ;;		_LIGHTS_DemoState1
  3337 ;;		_LIGHTS_DemoState2
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text30
  3342   000AEE                     __ptext30:
  3343                           	callstack 0
  3344   000AEE                     _IOC_vSetOutputPort:
  3345                           	callstack 0
  3346   000AEE  FFFF               	dw	65535	; assembler added errata NOP
  3347                           
  3348                           ;ioc.c: 7: T_U16 u16ChannelMask = (u16ChannelSelect&0xFF00);
  3349                           
  3350                           ;incstack = 0
  3351   000AF0  0E00               	movlw	0
  3352   000AF2  144E               	andwf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3353   000AF4  6E51               	movwf	IOC_vSetOutputPort@u16ChannelMask^0,c
  3354   000AF6  0EFF               	movlw	255
  3355   000AF8  144F               	andwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,w,c
  3356   000AFA  6E52               	movwf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,c
  3357                           
  3358                           ;ioc.c: 9: if(u16ChannelMask == IOC_PORTD)
  3359   000AFC  0452               	decf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,w,c
  3360   000AFE  1051               	iorwf	IOC_vSetOutputPort@u16ChannelMask^0,w,c
  3361   000B00  A4D8               	btfss	status,2,c
  3362   000B02  D006               	goto	l1797
  3363                           
  3364                           ;ioc.c: 10: {;ioc.c: 11: PCS_vSetOutputPortD(u16ChannelSelect, u8Value);
  3365   000B04  C050  F03E         	movff	IOC_vSetOutputPort@u8Value,PCS_vSetOutputPortD@u8Value
  3366   000B08  504E               	movf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3367   000B0A  EC4D  F003         	call	_PCS_vSetOutputPortD
  3368                           
  3369                           ;ioc.c: 12: }
  3370   000B0E  D00B               	goto	l214
  3371   000B10                     l1797:
  3372   000B10  FFFF               	dw	65535	; assembler added errata NOP
  3373                           
  3374                           ;ioc.c: 13: else if(u16ChannelMask == IOC_PORTE)
  3375   000B12  0E02               	movlw	2
  3376   000B14  1852               	xorwf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,w,c
  3377   000B16  1051               	iorwf	IOC_vSetOutputPort@u16ChannelMask^0,w,c
  3378   000B18  A4D8               	btfss	status,2,c
  3379   000B1A  D005               	goto	l214
  3380                           
  3381                           ;ioc.c: 14: {;ioc.c: 15: PCS_vSetOutputPortE(u16ChannelSelect, u8Value);
  3382   000B1C  C050  F03E         	movff	IOC_vSetOutputPort@u8Value,PCS_vSetOutputPortE@u8Value
  3383   000B20  504E               	movf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3384   000B22  EC0E  F003         	call	_PCS_vSetOutputPortE
  3385   000B26                     l214:
  3386   000B26  FFFF               	dw	65535	; assembler added errata NOP
  3387   000B28  0012               	return		;funcret
  3388   000B2A  FFFF               	dw	65535	; errata NOP
  3389   000B2C                     __end_of_IOC_vSetOutputPort:
  3390                           	callstack 0
  3391                           
  3392 ;; *************** function _PCS_vSetOutputPortE *****************
  3393 ;; Defined at:
  3394 ;;		line 35 in file "pcs.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  u8BitNumber     1    wreg     const unsigned char 
  3397 ;;  u8Value         1    7[COMRAM] const unsigned char 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  u8BitNumber     1   13[COMRAM] const unsigned char 
  3400 ;;  u8BitNumberV    1   14[COMRAM] unsigned char 
  3401 ;;  u8BitValue      1   12[COMRAM] unsigned char 
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3411 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3412 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3413 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3414 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3415 ;;Total ram usage:        8 bytes
  3416 ;; Hardware stack levels used: 1
  3417 ;; Hardware stack levels required when called: 2
  3418 ;; This function calls:
  3419 ;;		Nothing
  3420 ;; This function is called by:
  3421 ;;		_IOC_vSetOutputPort
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           	psect	text31
  3426   00061C                     __ptext31:
  3427                           	callstack 0
  3428   00061C                     _PCS_vSetOutputPortE:
  3429                           	callstack 0
  3430   00061C  FFFF               	dw	65535	; assembler added errata NOP
  3431                           
  3432                           ;incstack = 0
  3433                           ;PCS_vSetOutputPortE@u8BitNumber stored from wreg
  3434   00061E  6E44               	movwf	PCS_vSetOutputPortE@u8BitNumber^0,c
  3435                           
  3436                           ;pcs.c: 37: T_U8 u8BitValue = u8Value>0 ? 1 : 0;
  3437   000620  503E               	movf	PCS_vSetOutputPortE@u8Value^0,w,c
  3438   000622  B4D8               	btfsc	status,2,c
  3439   000624  D002               	goto	u980
  3440   000626  0E01               	movlw	1
  3441   000628  D002               	goto	u990
  3442   00062A                     u980:
  3443   00062A  FFFF               	dw	65535	; assembler added errata NOP
  3444   00062C  0E00               	movlw	0
  3445   00062E                     u990:
  3446   00062E  FFFF               	dw	65535	; assembler added errata NOP
  3447   000630  6E43               	movwf	PCS_vSetOutputPortE@u8BitValue^0,c
  3448                           
  3449                           ;pcs.c: 38: T_U8 u8BitNumberValue = u8BitNumber<=1 ? u8BitNumber : 1;
  3450   000632  0E01               	movlw	1
  3451   000634  6444               	cpfsgt	PCS_vSetOutputPortE@u8BitNumber^0,c
  3452   000636  D005               	goto	l118
  3453   000638  0E00               	movlw	0
  3454   00063A  6E42               	movwf	(_PCS_vSetOutputPortE$712+1)^0,c
  3455   00063C  0E01               	movlw	1
  3456   00063E  6E41               	movwf	_PCS_vSetOutputPortE$712^0,c
  3457   000640  D004               	goto	l120
  3458   000642                     l118:
  3459   000642  FFFF               	dw	65535	; assembler added errata NOP
  3460   000644  C044  F041         	movff	PCS_vSetOutputPortE@u8BitNumber,_PCS_vSetOutputPortE$712
  3461   000648  6A42               	clrf	(_PCS_vSetOutputPortE$712+1)^0,c
  3462   00064A                     l120:
  3463   00064A  FFFF               	dw	65535	; assembler added errata NOP
  3464   00064C  C041  F045         	movff	_PCS_vSetOutputPortE$712,PCS_vSetOutputPortE@u8BitNumberValue
  3465                           
  3466                           ;pcs.c: 40: if(1 == u8BitValue)
  3467   000650  0443               	decf	PCS_vSetOutputPortE@u8BitValue^0,w,c
  3468   000652  A4D8               	btfss	status,2,c
  3469   000654  D00F               	goto	l1755
  3470                           
  3471                           ;pcs.c: 41: {;pcs.c: 42: PORTE |= (0x01<<u8BitNumberValue);
  3472   000656  C045  F03F         	movff	PCS_vSetOutputPortE@u8BitNumberValue,??_PCS_vSetOutputPortE
  3473   00065A  0E01               	movlw	1
  3474   00065C  6E40               	movwf	(??_PCS_vSetOutputPortE+1)^0,c
  3475   00065E  2A3F               	incf	??_PCS_vSetOutputPortE^0,f,c
  3476   000660  D003               	goto	u1024
  3477   000662                     u1025:
  3478   000662  FFFF               	dw	65535	; assembler added errata NOP
  3479   000664  90D8               	bcf	status,0,c
  3480   000666  3640               	rlcf	(??_PCS_vSetOutputPortE+1)^0,f,c
  3481   000668                     u1024:
  3482   000668  FFFF               	dw	65535	; assembler added errata NOP
  3483   00066A  2E3F               	decfsz	??_PCS_vSetOutputPortE^0,f,c
  3484   00066C  D7FA               	goto	u1025
  3485   00066E  5040               	movf	(??_PCS_vSetOutputPortE+1)^0,w,c
  3486   000670  1284               	iorwf	132,f,c	;volatile
  3487                           
  3488                           ;pcs.c: 43: }
  3489   000672  D010               	goto	l123
  3490   000674                     l1755:
  3491   000674  FFFF               	dw	65535	; assembler added errata NOP
  3492                           
  3493                           ;pcs.c: 44: else;pcs.c: 45: {;pcs.c: 46: PORTE &= ~(0x01<<u8BitNumberValue);
  3494   000676  C045  F03F         	movff	PCS_vSetOutputPortE@u8BitNumberValue,??_PCS_vSetOutputPortE
  3495   00067A  0E01               	movlw	1
  3496   00067C  6E40               	movwf	(??_PCS_vSetOutputPortE+1)^0,c
  3497   00067E  2A3F               	incf	??_PCS_vSetOutputPortE^0,f,c
  3498   000680  D003               	goto	u1034
  3499   000682                     u1035:
  3500   000682  FFFF               	dw	65535	; assembler added errata NOP
  3501   000684  90D8               	bcf	status,0,c
  3502   000686  3640               	rlcf	(??_PCS_vSetOutputPortE+1)^0,f,c
  3503   000688                     u1034:
  3504   000688  FFFF               	dw	65535	; assembler added errata NOP
  3505   00068A  2E3F               	decfsz	??_PCS_vSetOutputPortE^0,f,c
  3506   00068C  D7FA               	goto	u1035
  3507   00068E  5040               	movf	(??_PCS_vSetOutputPortE+1)^0,w,c
  3508   000690  0AFF               	xorlw	255
  3509   000692  1684               	andwf	132,f,c	;volatile
  3510   000694                     l123:
  3511   000694  FFFF               	dw	65535	; assembler added errata NOP
  3512   000696  0012               	return		;funcret
  3513   000698  FFFF               	dw	65535	; errata NOP
  3514   00069A                     __end_of_PCS_vSetOutputPortE:
  3515                           	callstack 0
  3516                           
  3517 ;; *************** function _PCS_vSetOutputPortD *****************
  3518 ;; Defined at:
  3519 ;;		line 20 in file "pcs.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;  u8BitNumber     1    wreg     const unsigned char 
  3522 ;;  u8Value         1    7[COMRAM] const unsigned char 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  u8BitNumber     1   13[COMRAM] const unsigned char 
  3525 ;;  u8BitNumberV    1   14[COMRAM] unsigned char 
  3526 ;;  u8BitValue      1   12[COMRAM] unsigned char 
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  1    wreg      void 
  3529 ;; Registers used:
  3530 ;;		wreg, status,2, status,0
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3536 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3537 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3538 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;Total ram usage:        8 bytes
  3541 ;; Hardware stack levels used: 1
  3542 ;; Hardware stack levels required when called: 2
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_IOC_vSetOutputPort
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text32
  3551   00069A                     __ptext32:
  3552                           	callstack 0
  3553   00069A                     _PCS_vSetOutputPortD:
  3554                           	callstack 0
  3555   00069A  FFFF               	dw	65535	; assembler added errata NOP
  3556                           
  3557                           ;incstack = 0
  3558                           ;PCS_vSetOutputPortD@u8BitNumber stored from wreg
  3559   00069C  6E44               	movwf	PCS_vSetOutputPortD@u8BitNumber^0,c
  3560                           
  3561                           ;pcs.c: 22: T_U8 u8BitValue = u8Value>0 ? 1 : 0;
  3562   00069E  503E               	movf	PCS_vSetOutputPortD@u8Value^0,w,c
  3563   0006A0  B4D8               	btfsc	status,2,c
  3564   0006A2  D002               	goto	u920
  3565   0006A4  0E01               	movlw	1
  3566   0006A6  D002               	goto	u930
  3567   0006A8                     u920:
  3568   0006A8  FFFF               	dw	65535	; assembler added errata NOP
  3569   0006AA  0E00               	movlw	0
  3570   0006AC                     u930:
  3571   0006AC  FFFF               	dw	65535	; assembler added errata NOP
  3572   0006AE  6E43               	movwf	PCS_vSetOutputPortD@u8BitValue^0,c
  3573                           
  3574                           ;pcs.c: 23: T_U8 u8BitNumberValue = u8BitNumber<=7 ? u8BitNumber : 7;
  3575   0006B0  0E07               	movlw	7
  3576   0006B2  6444               	cpfsgt	PCS_vSetOutputPortD@u8BitNumber^0,c
  3577   0006B4  D005               	goto	l109
  3578   0006B6  0E00               	movlw	0
  3579   0006B8  6E42               	movwf	(_PCS_vSetOutputPortD$706+1)^0,c
  3580   0006BA  0E07               	movlw	7
  3581   0006BC  6E41               	movwf	_PCS_vSetOutputPortD$706^0,c
  3582   0006BE  D004               	goto	l111
  3583   0006C0                     l109:
  3584   0006C0  FFFF               	dw	65535	; assembler added errata NOP
  3585   0006C2  C044  F041         	movff	PCS_vSetOutputPortD@u8BitNumber,_PCS_vSetOutputPortD$706
  3586   0006C6  6A42               	clrf	(_PCS_vSetOutputPortD$706+1)^0,c
  3587   0006C8                     l111:
  3588   0006C8  FFFF               	dw	65535	; assembler added errata NOP
  3589   0006CA  C041  F045         	movff	_PCS_vSetOutputPortD$706,PCS_vSetOutputPortD@u8BitNumberValue
  3590                           
  3591                           ;pcs.c: 25: if(1 == u8BitValue)
  3592   0006CE  0443               	decf	PCS_vSetOutputPortD@u8BitValue^0,w,c
  3593   0006D0  A4D8               	btfss	status,2,c
  3594   0006D2  D00F               	goto	l1743
  3595                           
  3596                           ;pcs.c: 26: {;pcs.c: 27: PORTD |= (0x01<<u8BitNumberValue);
  3597   0006D4  C045  F03F         	movff	PCS_vSetOutputPortD@u8BitNumberValue,??_PCS_vSetOutputPortD
  3598   0006D8  0E01               	movlw	1
  3599   0006DA  6E40               	movwf	(??_PCS_vSetOutputPortD+1)^0,c
  3600   0006DC  2A3F               	incf	??_PCS_vSetOutputPortD^0,f,c
  3601   0006DE  D003               	goto	u964
  3602   0006E0                     u965:
  3603   0006E0  FFFF               	dw	65535	; assembler added errata NOP
  3604   0006E2  90D8               	bcf	status,0,c
  3605   0006E4  3640               	rlcf	(??_PCS_vSetOutputPortD+1)^0,f,c
  3606   0006E6                     u964:
  3607   0006E6  FFFF               	dw	65535	; assembler added errata NOP
  3608   0006E8  2E3F               	decfsz	??_PCS_vSetOutputPortD^0,f,c
  3609   0006EA  D7FA               	goto	u965
  3610   0006EC  5040               	movf	(??_PCS_vSetOutputPortD+1)^0,w,c
  3611   0006EE  1283               	iorwf	131,f,c	;volatile
  3612                           
  3613                           ;pcs.c: 28: }
  3614   0006F0  D010               	goto	l114
  3615   0006F2                     l1743:
  3616   0006F2  FFFF               	dw	65535	; assembler added errata NOP
  3617                           
  3618                           ;pcs.c: 29: else;pcs.c: 30: {;pcs.c: 31: PORTD &= ~(0x01<<u8BitNumberValue);
  3619   0006F4  C045  F03F         	movff	PCS_vSetOutputPortD@u8BitNumberValue,??_PCS_vSetOutputPortD
  3620   0006F8  0E01               	movlw	1
  3621   0006FA  6E40               	movwf	(??_PCS_vSetOutputPortD+1)^0,c
  3622   0006FC  2A3F               	incf	??_PCS_vSetOutputPortD^0,f,c
  3623   0006FE  D003               	goto	u974
  3624   000700                     u975:
  3625   000700  FFFF               	dw	65535	; assembler added errata NOP
  3626   000702  90D8               	bcf	status,0,c
  3627   000704  3640               	rlcf	(??_PCS_vSetOutputPortD+1)^0,f,c
  3628   000706                     u974:
  3629   000706  FFFF               	dw	65535	; assembler added errata NOP
  3630   000708  2E3F               	decfsz	??_PCS_vSetOutputPortD^0,f,c
  3631   00070A  D7FA               	goto	u975
  3632   00070C  5040               	movf	(??_PCS_vSetOutputPortD+1)^0,w,c
  3633   00070E  0AFF               	xorlw	255
  3634   000710  1683               	andwf	131,f,c	;volatile
  3635   000712                     l114:
  3636   000712  FFFF               	dw	65535	; assembler added errata NOP
  3637   000714  0012               	return		;funcret
  3638   000716  FFFF               	dw	65535	; errata NOP
  3639   000718                     __end_of_PCS_vSetOutputPortD:
  3640                           	callstack 0
  3641                           
  3642 ;; *************** function _TASK_vTask100ms *****************
  3643 ;; Defined at:
  3644 ;;		line 27 in file "tasks.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		None
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used: 1
  3664 ;; Hardware stack levels required when called: 2
  3665 ;; This function calls:
  3666 ;;		Nothing
  3667 ;; This function is called by:
  3668 ;;		_SCHED_vStartScheduler
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text33
  3673   000D5C                     __ptext33:
  3674                           	callstack 0
  3675   000D5C                     _TASK_vTask100ms:
  3676                           	callstack 0
  3677   000D5C  FFFF               	dw	65535	; assembler added errata NOP
  3678                           
  3679                           ;incstack = 0
  3680   000D5E  0012               	return		;funcret
  3681   000D60  FFFF               	dw	65535	; errata NOP
  3682   000D62                     __end_of_TASK_vTask100ms:
  3683                           	callstack 0
  3684                           
  3685 ;; *************** function _SCHED_vInitSystem *****************
  3686 ;; Defined at:
  3687 ;;		line 13 in file "sched.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;		None
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  1    wreg      void 
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, cstack
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3705 ;;Total ram usage:        0 bytes
  3706 ;; Hardware stack levels used: 1
  3707 ;; Hardware stack levels required when called: 3
  3708 ;; This function calls:
  3709 ;;		_ADC_vInit
  3710 ;;		_INT_vInit
  3711 ;;		_PCS_vInit
  3712 ;;		_TIM_vInit
  3713 ;; This function is called by:
  3714 ;;		_main
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text34
  3719   000CDE                     __ptext34:
  3720                           	callstack 0
  3721   000CDE                     _SCHED_vInitSystem:
  3722                           	callstack 0
  3723   000CDE  FFFF               	dw	65535	; assembler added errata NOP
  3724                           
  3725                           ;sched.c: 15: PCS_vInit();
  3726                           
  3727                           ;incstack = 0
  3728   000CE0  EC56  F006         	call	_PCS_vInit	;wreg free
  3729                           
  3730                           ;sched.c: 16: INT_vInit();
  3731   000CE4  EC85  F006         	call	_INT_vInit	;wreg free
  3732                           
  3733                           ;sched.c: 17: ADC_vInit();
  3734   000CE8  EC36  F005         	call	_ADC_vInit	;wreg free
  3735                           
  3736                           ;sched.c: 18: TIM_vInit();
  3737   000CEC  ECCC  F005         	call	_TIM_vInit	;wreg free
  3738   000CF0  0012               	return		;funcret
  3739   000CF2  FFFF               	dw	65535	; errata NOP
  3740   000CF4                     __end_of_SCHED_vInitSystem:
  3741                           	callstack 0
  3742                           
  3743 ;; *************** function _TIM_vInit *****************
  3744 ;; Defined at:
  3745 ;;		line 3 in file "tim.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;		None
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;		None
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  1    wreg      void 
  3752 ;; Registers used:
  3753 ;;		wreg, status,2
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3763 ;;Total ram usage:        0 bytes
  3764 ;; Hardware stack levels used: 1
  3765 ;; Hardware stack levels required when called: 2
  3766 ;; This function calls:
  3767 ;;		Nothing
  3768 ;; This function is called by:
  3769 ;;		_SCHED_vInitSystem
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           	psect	text35
  3774   000B98                     __ptext35:
  3775                           	callstack 0
  3776   000B98                     _TIM_vInit:
  3777                           	callstack 0
  3778   000B98  FFFF               	dw	65535	; assembler added errata NOP
  3779                           
  3780                           ;tim.c: 5: T2CONbits.TMR2ON = 0b0;
  3781                           
  3782                           ;incstack = 0
  3783   000B9A  94CA               	bcf	202,2,c	;volatile
  3784                           
  3785                           ;tim.c: 6: TMR2 = 0x00;
  3786   000B9C  0E00               	movlw	0
  3787   000B9E  6ECC               	movwf	204,c	;volatile
  3788                           
  3789                           ;tim.c: 7: T2CON = 0x00;
  3790   000BA0  0E00               	movlw	0
  3791   000BA2  6ECA               	movwf	202,c	;volatile
  3792                           
  3793                           ;tim.c: 8: PR2 = 0x00;
  3794   000BA4  0E00               	movlw	0
  3795   000BA6  6ECB               	movwf	203,c	;volatile
  3796                           
  3797                           ;tim.c: 10: T2CONbits.TOUTPS = 0b0100;
  3798   000BA8  50CA               	movf	202,w,c	;volatile
  3799   000BAA  0B87               	andlw	-121
  3800   000BAC  0920               	iorlw	32
  3801   000BAE  6ECA               	movwf	202,c	;volatile
  3802                           
  3803                           ;tim.c: 11: T2CONbits.T2CKPS = 0b01;
  3804   000BB0  50CA               	movf	202,w,c	;volatile
  3805   000BB2  0BFC               	andlw	-4
  3806   000BB4  0901               	iorlw	1
  3807   000BB6  6ECA               	movwf	202,c	;volatile
  3808                           
  3809                           ;tim.c: 12: PR2 = 125;
  3810   000BB8  0E7D               	movlw	125
  3811   000BBA  6ECB               	movwf	203,c	;volatile
  3812                           
  3813                           ;tim.c: 14: PIR1bits.TMR2IF = 0b0;
  3814   000BBC  929E               	bcf	158,1,c	;volatile
  3815                           
  3816                           ;tim.c: 15: IPR1bits.TMR2IP = 0b1;
  3817   000BBE  829F               	bsf	159,1,c	;volatile
  3818                           
  3819                           ;tim.c: 16: PIE1bits.TMR2IE = 0b1;
  3820   000BC0  829D               	bsf	157,1,c	;volatile
  3821                           
  3822                           ;tim.c: 17: INTCONbits.PEIE = 1;
  3823   000BC2  8CF2               	bsf	242,6,c	;volatile
  3824                           
  3825                           ;tim.c: 18: INTCONbits.GIE = 1;
  3826   000BC4  8EF2               	bsf	242,7,c	;volatile
  3827                           
  3828                           ;tim.c: 20: T2CONbits.TMR2ON = 0b1;
  3829   000BC6  84CA               	bsf	202,2,c	;volatile
  3830   000BC8  0012               	return		;funcret
  3831   000BCA  FFFF               	dw	65535	; errata NOP
  3832   000BCC                     __end_of_TIM_vInit:
  3833                           	callstack 0
  3834                           
  3835 ;; *************** function _PCS_vInit *****************
  3836 ;; Defined at:
  3837 ;;		line 3 in file "pcs.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;		None
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;		None
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  1    wreg      void 
  3844 ;; Registers used:
  3845 ;;		wreg, status,2
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;Total ram usage:        0 bytes
  3856 ;; Hardware stack levels used: 1
  3857 ;; Hardware stack levels required when called: 2
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_SCHED_vInitSystem
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text36
  3866   000CAC                     __ptext36:
  3867                           	callstack 0
  3868   000CAC                     _PCS_vInit:
  3869                           	callstack 0
  3870   000CAC  FFFF               	dw	65535	; assembler added errata NOP
  3871                           
  3872                           ;pcs.c: 5: TRISAbits.RA0 = 1;
  3873                           
  3874                           ;incstack = 0
  3875   000CAE  8092               	bsf	146,0,c	;volatile
  3876                           
  3877                           ;pcs.c: 6: TRISAbits.RA1 = 1;
  3878   000CB0  8292               	bsf	146,1,c	;volatile
  3879                           
  3880                           ;pcs.c: 8: TRISCbits.RC0 = 1;
  3881   000CB2  8094               	bsf	148,0,c	;volatile
  3882                           
  3883                           ;pcs.c: 9: TRISCbits.RC1 = 1;
  3884   000CB4  8294               	bsf	148,1,c	;volatile
  3885                           
  3886                           ;pcs.c: 10: TRISCbits.RC2 = 1;
  3887   000CB6  8494               	bsf	148,2,c	;volatile
  3888                           
  3889                           ;pcs.c: 11: TRISCbits.RC3 = 1;
  3890   000CB8  8694               	bsf	148,3,c	;volatile
  3891                           
  3892                           ;pcs.c: 12: TRISCbits.RC4 = 1;
  3893   000CBA  8894               	bsf	148,4,c	;volatile
  3894                           
  3895                           ;pcs.c: 14: TRISD = 0x00;
  3896   000CBC  0E00               	movlw	0
  3897   000CBE  6E95               	movwf	149,c	;volatile
  3898                           
  3899                           ;pcs.c: 16: TRISEbits.RE0 = 0;
  3900   000CC0  9096               	bcf	150,0,c	;volatile
  3901                           
  3902                           ;pcs.c: 17: TRISEbits.RE1 = 0;
  3903   000CC2  9296               	bcf	150,1,c	;volatile
  3904   000CC4  0012               	return		;funcret
  3905   000CC6  FFFF               	dw	65535	; errata NOP
  3906   000CC8                     __end_of_PCS_vInit:
  3907                           	callstack 0
  3908                           
  3909 ;; *************** function _INT_vInit *****************
  3910 ;; Defined at:
  3911 ;;		line 6 in file "int.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;		None
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;		None
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      void 
  3918 ;; Registers used:
  3919 ;;		None
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3929 ;;Total ram usage:        0 bytes
  3930 ;; Hardware stack levels used: 1
  3931 ;; Hardware stack levels required when called: 2
  3932 ;; This function calls:
  3933 ;;		Nothing
  3934 ;; This function is called by:
  3935 ;;		_SCHED_vInitSystem
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text37
  3940   000D0A                     __ptext37:
  3941                           	callstack 0
  3942   000D0A                     _INT_vInit:
  3943                           	callstack 0
  3944   000D0A  FFFF               	dw	65535	; assembler added errata NOP
  3945                           
  3946                           ;int.c: 9: PIR1bits.ADIF = 0;
  3947                           
  3948                           ;incstack = 0
  3949   000D0C  9C9E               	bcf	158,6,c	;volatile
  3950                           
  3951                           ;int.c: 10: PIE1bits.ADIE = 1;
  3952   000D0E  8C9D               	bsf	157,6,c	;volatile
  3953                           
  3954                           ;int.c: 13: PIR1bits.TMR2IF = 0b0;
  3955   000D10  929E               	bcf	158,1,c	;volatile
  3956                           
  3957                           ;int.c: 14: IPR1bits.TMR2IP = 0b1;
  3958   000D12  829F               	bsf	159,1,c	;volatile
  3959                           
  3960                           ;int.c: 15: PIE1bits.TMR2IE = 0b1;
  3961   000D14  829D               	bsf	157,1,c	;volatile
  3962                           
  3963                           ;int.c: 18: INTCONbits.PEIE = 1;
  3964   000D16  8CF2               	bsf	242,6,c	;volatile
  3965                           
  3966                           ;int.c: 19: INTCONbits.GIE = 1;
  3967   000D18  8EF2               	bsf	242,7,c	;volatile
  3968   000D1A  0012               	return		;funcret
  3969   000D1C  FFFF               	dw	65535	; errata NOP
  3970   000D1E                     __end_of_INT_vInit:
  3971                           	callstack 0
  3972                           
  3973 ;; *************** function _ADC_vInit *****************
  3974 ;; Defined at:
  3975 ;;		line 9 in file "adc.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;		None
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;		None
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3993 ;;Total ram usage:        0 bytes
  3994 ;; Hardware stack levels used: 1
  3995 ;; Hardware stack levels required when called: 2
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_SCHED_vInitSystem
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text38
  4004   000A6C                     __ptext38:
  4005                           	callstack 0
  4006   000A6C                     _ADC_vInit:
  4007                           	callstack 0
  4008   000A6C  FFFF               	dw	65535	; assembler added errata NOP
  4009                           
  4010                           ;adc.c: 11: ADRESH = 0x00;
  4011                           
  4012                           ;incstack = 0
  4013   000A6E  0E00               	movlw	0
  4014   000A70  6EC4               	movwf	196,c	;volatile
  4015                           
  4016                           ;adc.c: 12: ADRESL = 0x00;
  4017   000A72  0E00               	movlw	0
  4018   000A74  6EC3               	movwf	195,c	;volatile
  4019                           
  4020                           ;adc.c: 14: ADCON0bits.CHS = 0b0000;
  4021   000A76  0EC3               	movlw	-61
  4022   000A78  16C2               	andwf	194,f,c	;volatile
  4023                           
  4024                           ;adc.c: 16: ADCON1bits.VCFG = 0b00;
  4025   000A7A  0ECF               	movlw	-49
  4026   000A7C  16C1               	andwf	193,f,c	;volatile
  4027                           
  4028                           ;adc.c: 17: ADCON1bits.PCFG = 0b1101;
  4029   000A7E  50C1               	movf	193,w,c	;volatile
  4030   000A80  0BF0               	andlw	-16
  4031   000A82  090D               	iorlw	13
  4032   000A84  6EC1               	movwf	193,c	;volatile
  4033                           
  4034                           ;adc.c: 19: ADCON2bits.ADFM = 1;
  4035   000A86  8EC0               	bsf	192,7,c	;volatile
  4036                           
  4037                           ;adc.c: 20: ADCON2bits.ACQT = 0b100;
  4038   000A88  50C0               	movf	192,w,c	;volatile
  4039   000A8A  0BC7               	andlw	-57
  4040   000A8C  0920               	iorlw	32
  4041   000A8E  6EC0               	movwf	192,c	;volatile
  4042                           
  4043                           ;adc.c: 21: ADCON2bits.ADCS = 0b001;
  4044   000A90  50C0               	movf	192,w,c	;volatile
  4045   000A92  0BF8               	andlw	-8
  4046   000A94  0901               	iorlw	1
  4047   000A96  6EC0               	movwf	192,c	;volatile
  4048                           
  4049                           ;adc.c: 23: PIR1bits.ADIF = 0;
  4050   000A98  9C9E               	bcf	158,6,c	;volatile
  4051                           
  4052                           ;adc.c: 24: PIE1bits.ADIE = 1;
  4053   000A9A  8C9D               	bsf	157,6,c	;volatile
  4054                           
  4055                           ;adc.c: 25: INTCONbits.PEIE = 1;
  4056   000A9C  8CF2               	bsf	242,6,c	;volatile
  4057                           
  4058                           ;adc.c: 26: INTCONbits.GIE = 1;
  4059   000A9E  8EF2               	bsf	242,7,c	;volatile
  4060                           
  4061                           ;adc.c: 28: ADCON0bits.ADON = 1;
  4062   000AA0  80C2               	bsf	194,0,c	;volatile
  4063                           
  4064                           ;adc.c: 29: _delay((unsigned long)((40)*(10000000UL/4000000.0)));
  4065   000AA2  0E19               	movlw	25
  4066   000AA4                     u2057:
  4067   000AA4  FFFF               	dw	65535	; errata NOP
  4068   000AA6  2EE8               	decfsz	wreg,f,c
  4069   000AA8  D7FD               	bra	u2057
  4070                           
  4071                           ;adc.c: 30: ADCON0bits.GO_nDONE = 1;
  4072   000AAA  82C2               	bsf	194,1,c	;volatile
  4073   000AAC  0012               	return		;funcret
  4074   000AAE  FFFF               	dw	65535	; errata NOP
  4075   000AB0                     __end_of_ADC_vInit:
  4076                           	callstack 0
  4077                           
  4078 ;; *************** function _INT_vInterruptHandler *****************
  4079 ;; Defined at:
  4080 ;;		line 22 in file "int.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;		None
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      void 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4096 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;Total ram usage:        4 bytes
  4099 ;; Hardware stack levels used: 1
  4100 ;; Hardware stack levels required when called: 1
  4101 ;; This function calls:
  4102 ;;		_ADC_vConversionCompleted
  4103 ;;		_SCHED_vTickFunctionCall
  4104 ;; This function is called by:
  4105 ;;		Interrupt level 2
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	intcode
  4110   000008                     __pintcode:
  4111                           	callstack 0
  4112   000008                     _INT_vInterruptHandler:
  4113                           	callstack 0
  4114   000008  FFFF               	dw	65535	; assembler added errata NOP
  4115                           
  4116                           ;incstack = 0
  4117   00000A  8258               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4118   00000C  CFD9 F03A          	movff	fsr2l,??_INT_vInterruptHandler
  4119   000010  CFDA F03B          	movff	fsr2h,??_INT_vInterruptHandler+1
  4120   000014  CFF3 F03C          	movff	prodl,??_INT_vInterruptHandler+2
  4121   000018  CFF4 F03D          	movff	prodh,??_INT_vInterruptHandler+3
  4122                           
  4123                           ;int.c: 24: if(PIR1bits.ADIF && ADCON0bits.ADON)
  4124   00001C  BC9E               	btfsc	158,6,c	;volatile
  4125   00001E  A0C2               	btfss	194,0,c	;volatile
  4126   000020  D002               	goto	i2l1717
  4127                           
  4128                           ;int.c: 25: {;int.c: 26: ADC_vConversionCompleted();
  4129   000022  EC05  F004         	call	_ADC_vConversionCompleted	;wreg free
  4130   000026                     i2l1717:
  4131   000026  FFFF               	dw	65535	; assembler added errata NOP
  4132                           
  4133                           ;int.c: 27: };int.c: 29: if(PIR1bits.TMR2IF && T2CONbits.TMR2ON)
  4134   000028  B29E               	btfsc	158,1,c	;volatile
  4135   00002A  A4CA               	btfss	202,2,c	;volatile
  4136   00002C  D003               	goto	i2l88
  4137                           
  4138                           ;int.c: 30: {;int.c: 31: SCHED_vTickFunctionCall();
  4139   00002E  EC7A  F006         	call	_SCHED_vTickFunctionCall	;wreg free
  4140                           
  4141                           ;int.c: 32: PIR1bits.TMR2IF = 0b0;
  4142   000032  929E               	bcf	158,1,c	;volatile
  4143   000034                     i2l88:
  4144   000034  FFFF               	dw	65535	; assembler added errata NOP
  4145   000036  C03D  FFF4         	movff	??_INT_vInterruptHandler+3,prodh
  4146   00003A  C03C  FFF3         	movff	??_INT_vInterruptHandler+2,prodl
  4147   00003E  C03B  FFDA         	movff	??_INT_vInterruptHandler+1,fsr2h
  4148   000042  C03A  FFD9         	movff	??_INT_vInterruptHandler,fsr2l
  4149   000046  9258               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4150   000048  0011               	retfie		f
  4151   00004A  FFFF               	dw	65535	; errata NOP
  4152   00004C                     __end_of_INT_vInterruptHandler:
  4153                           	callstack 0
  4154                           
  4155 ;; *************** function _SCHED_vTickFunctionCall *****************
  4156 ;; Defined at:
  4157 ;;		line 21 in file "sched.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;		None
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;		None
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  1    wreg      void 
  4164 ;; Registers used:
  4165 ;;		wreg, status,2, status,0
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;Total ram usage:        0 bytes
  4176 ;; Hardware stack levels used: 1
  4177 ;; This function calls:
  4178 ;;		Nothing
  4179 ;; This function is called by:
  4180 ;;		_INT_vInterruptHandler
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           	psect	text40
  4185   000CF4                     __ptext40:
  4186                           	callstack 0
  4187   000CF4                     _SCHED_vTickFunctionCall:
  4188                           	callstack 0
  4189   000CF4  FFFF               	dw	65535	; assembler added errata NOP
  4190                           
  4191                           ;sched.c: 23: ++sched_gTick10ms;
  4192                           
  4193                           ;incstack = 0
  4194   000CF6  2A33               	incf	_sched_gTick10ms^0,f,c
  4195                           
  4196                           ;sched.c: 24: ++sched_gTick100ms;
  4197   000CF8  2A32               	incf	_sched_gTick100ms^0,f,c
  4198                           
  4199                           ;sched.c: 25: ++sched_gTick1s;
  4200   000CFA  4A2C               	infsnz	_sched_gTick1s^0,f,c
  4201   000CFC  2A2D               	incf	(_sched_gTick1s+1)^0,f,c
  4202                           
  4203                           ;sched.c: 26: sched_bTicked = 1;;
  4204   000CFE  0E00               	movlw	0
  4205   000D00  6E2B               	movwf	(_sched_bTicked+1)^0,c
  4206   000D02  0E01               	movlw	1
  4207   000D04  6E2A               	movwf	_sched_bTicked^0,c
  4208   000D06  0012               	return		;funcret
  4209   000D08  FFFF               	dw	65535	; errata NOP
  4210   000D0A                     __end_of_SCHED_vTickFunctionCall:
  4211                           	callstack 0
  4212                           
  4213 ;; *************** function _ADC_vConversionCompleted *****************
  4214 ;; Defined at:
  4215 ;;		line 40 in file "adc.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4232 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4233 ;;Total ram usage:        3 bytes
  4234 ;; Hardware stack levels used: 1
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_INT_vInterruptHandler
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           	psect	text41
  4243   00080A                     __ptext41:
  4244                           	callstack 0
  4245   00080A                     _ADC_vConversionCompleted:
  4246                           	callstack 0
  4247   00080A  FFFF               	dw	65535	; assembler added errata NOP
  4248                           
  4249                           ;adc.c: 42: au16AdcReadValue[ADCON0bits.CHS0] = (ADRESH << 8) | ADRESL;
  4250                           
  4251                           ;incstack = 0
  4252   00080C  50C3               	movf	195,w,c	;volatile
  4253   00080E  CFC4 F037          	movff	4036,??_ADC_vConversionCompleted	;volatile
  4254   000812  6A38               	clrf	(??_ADC_vConversionCompleted+1)^0,c
  4255   000814  C037  F038         	movff	??_ADC_vConversionCompleted,??_ADC_vConversionCompleted+1
  4256   000818  6A37               	clrf	??_ADC_vConversionCompleted^0,c
  4257   00081A  1237               	iorwf	??_ADC_vConversionCompleted^0,f,c
  4258   00081C  0E00               	movlw	0
  4259   00081E  1238               	iorwf	(??_ADC_vConversionCompleted+1)^0,f,c
  4260   000820  A4C2               	btfss	194,2,c	;volatile
  4261   000822  D003               	goto	i2u73_40
  4262   000824  6A39               	clrf	(??_ADC_vConversionCompleted+2)^0,c
  4263   000826  2A39               	incf	(??_ADC_vConversionCompleted+2)^0,f,c
  4264   000828  D002               	goto	i2u73_48
  4265   00082A                     i2u73_40:
  4266   00082A  FFFF               	dw	65535	; assembler added errata NOP
  4267   00082C  6A39               	clrf	(??_ADC_vConversionCompleted+2)^0,c
  4268   00082E                     i2u73_48:
  4269   00082E  FFFF               	dw	65535	; assembler added errata NOP
  4270   000830  5039               	movf	(??_ADC_vConversionCompleted+2)^0,w,c
  4271   000832  0D02               	mullw	2
  4272   000834  0E1E               	movlw	low _au16AdcReadValue
  4273   000836  24F3               	addwf	243,w,c
  4274   000838  6ED9               	movwf	fsr2l,c
  4275   00083A  0E00               	movlw	high _au16AdcReadValue
  4276   00083C  20F4               	addwfc	prodh,w,c
  4277   00083E  6EDA               	movwf	fsr2h,c
  4278   000840  C037  FFDE         	movff	??_ADC_vConversionCompleted,postinc2
  4279   000844  C038  FFDD         	movff	??_ADC_vConversionCompleted+1,postdec2
  4280                           
  4281                           ;adc.c: 43: ADCON0bits.CHS0 = !ADCON0bits.CHS0;
  4282   000848  B4C2               	btfsc	194,2,c	;volatile
  4283   00084A  D003               	goto	i2u74_40
  4284   00084C  6A37               	clrf	??_ADC_vConversionCompleted^0,c
  4285   00084E  2A37               	incf	??_ADC_vConversionCompleted^0,f,c
  4286   000850  D002               	goto	i2u75_48
  4287   000852                     i2u74_40:
  4288   000852  FFFF               	dw	65535	; assembler added errata NOP
  4289   000854  6A37               	clrf	??_ADC_vConversionCompleted^0,c
  4290   000856                     i2u75_48:
  4291   000856  FFFF               	dw	65535	; assembler added errata NOP
  4292   000858  4637               	rlncf	??_ADC_vConversionCompleted^0,f,c
  4293   00085A  4637               	rlncf	??_ADC_vConversionCompleted^0,f,c
  4294   00085C  50C2               	movf	194,w,c	;volatile
  4295   00085E  1837               	xorwf	??_ADC_vConversionCompleted^0,w,c
  4296   000860  0BFB               	andlw	-5
  4297   000862  1837               	xorwf	??_ADC_vConversionCompleted^0,w,c
  4298   000864  6EC2               	movwf	194,c	;volatile
  4299                           
  4300                           ;adc.c: 44: PIR1bits.ADIF = 0;
  4301   000866  9C9E               	bcf	158,6,c	;volatile
  4302                           
  4303                           ;adc.c: 45: ADCON0bits.GO_nDONE = 1;
  4304   000868  82C2               	bsf	194,1,c	;volatile
  4305   00086A  0012               	return		;funcret
  4306   00086C  FFFF               	dw	65535	; errata NOP
  4307   00086E                     __end_of_ADC_vConversionCompleted:
  4308                           	callstack 0
  4309   00086E  FFFF               	dw	65535	; assembler added errata NOP
  4310                           
  4311                           	psect	text42
  4312   000000                     __ptext42:
  4313                           	callstack 0
  4314                           
  4315                           	psect	rparam
  4316   000000                     
  4317                           	psect	temp
  4318   000058                     btemp:
  4319                           	callstack 0
  4320   000058                     	ds	1
  4321   000000                     int$flags	set	btemp
  4322   000000                     wtemp8	set	btemp+1
  4323   000000                     ttemp5	set	btemp+1
  4324   000000                     ttemp6	set	btemp+4
  4325   000000                     ttemp7	set	btemp+8
  4326                           
  4327                           	psect	idloc
  4328                           
  4329                           ;Config register IDLOC0 @ 0x200000
  4330                           ;	unspecified, using default values
  4331   200000                     	org	2097152
  4332   200000  FF                 	db	255
  4333                           
  4334                           ;Config register IDLOC1 @ 0x200001
  4335                           ;	unspecified, using default values
  4336   200001                     	org	2097153
  4337   200001  FF                 	db	255
  4338                           
  4339                           ;Config register IDLOC2 @ 0x200002
  4340                           ;	unspecified, using default values
  4341   200002                     	org	2097154
  4342   200002  FF                 	db	255
  4343                           
  4344                           ;Config register IDLOC3 @ 0x200003
  4345                           ;	unspecified, using default values
  4346   200003                     	org	2097155
  4347   200003  FF                 	db	255
  4348                           
  4349                           ;Config register IDLOC4 @ 0x200004
  4350                           ;	unspecified, using default values
  4351   200004                     	org	2097156
  4352   200004  FF                 	db	255
  4353                           
  4354                           ;Config register IDLOC5 @ 0x200005
  4355                           ;	unspecified, using default values
  4356   200005                     	org	2097157
  4357   200005  FF                 	db	255
  4358                           
  4359                           ;Config register IDLOC6 @ 0x200006
  4360                           ;	unspecified, using default values
  4361   200006                     	org	2097158
  4362   200006  FF                 	db	255
  4363                           
  4364                           ;Config register IDLOC7 @ 0x200007
  4365                           ;	unspecified, using default values
  4366   200007                     	org	2097159
  4367   200007  FF                 	db	255
  4368                           
  4369                           	psect	config
  4370                           
  4371                           ; Padding undefined space
  4372   300000                     	org	3145728
  4373   300000  FF                 	db	255
  4374                           
  4375                           ;Config register CONFIG1H @ 0x300001
  4376                           ;	unspecified, using default values
  4377                           ;	Oscillator
  4378                           ;	OSC = 0xF, unprogrammed default
  4379                           ;	Osc. Switch Enable
  4380                           ;	OSCS = 0x1, unprogrammed default
  4381   300001                     	org	3145729
  4382   300001  2F                 	db	47
  4383                           
  4384                           ;Config register CONFIG2L @ 0x300002
  4385                           ;	unspecified, using default values
  4386                           ;	Power Up Timer
  4387                           ;	PWRT = 0x1, unprogrammed default
  4388                           ;	Brown Out Detect
  4389                           ;	BOR = 0x1, unprogrammed default
  4390                           ;	Brown Out Voltage
  4391                           ;	BORV = 0x3, unprogrammed default
  4392   300002                     	org	3145730
  4393   300002  0F                 	db	15
  4394                           
  4395                           ;Config register CONFIG2H @ 0x300003
  4396                           ;	unspecified, using default values
  4397                           ;	Watchdog Timer
  4398                           ;	WDT = 0x1, unprogrammed default
  4399                           ;	Watchdog Postscaler
  4400                           ;	WDTPS = 0xF, unprogrammed default
  4401   300003                     	org	3145731
  4402   300003  1F                 	db	31
  4403                           
  4404                           ;Config register CONFIG3L @ 0x300004
  4405                           ;	unspecified, using default values
  4406   300004                     	org	3145732
  4407   300004  83                 	db	131
  4408                           
  4409                           ;Config register CONFIG3H @ 0x300005
  4410                           ;	unspecified, using default values
  4411                           ;	CCP2 Mux
  4412                           ;	CCP2MX = 0x1, unprogrammed default
  4413                           ;	MCLR enable
  4414                           ;	MCLRE = 0x1, unprogrammed default
  4415   300005                     	org	3145733
  4416   300005  83                 	db	131
  4417                           
  4418                           ;Config register CONFIG4L @ 0x300006
  4419                           ;	unspecified, using default values
  4420                           ;	Stack Overflow Reset
  4421                           ;	STVR = 0x1, unprogrammed default
  4422                           ;	Low Voltage Program
  4423                           ;	LVP = 0x1, unprogrammed default
  4424                           ;	Background Debugger Enable bit
  4425                           ;	DEBUG = 0x1, unprogrammed default
  4426   300006                     	org	3145734
  4427   300006  85                 	db	133
  4428                           
  4429                           ; Padding undefined space
  4430   300007                     	org	3145735
  4431   300007  FF                 	db	255
  4432                           
  4433                           ;Config register CONFIG5L @ 0x300008
  4434                           ;	unspecified, using default values
  4435                           ;	Code Protect 000800-0003FFF
  4436                           ;	CP0 = 0x1, unprogrammed default
  4437                           ;	Code Protect 0004000-007FFF
  4438                           ;	CP1 = 0x1, unprogrammed default
  4439                           ;	Code Protect 008000-00BFFF
  4440                           ;	CP2 = 0x1, unprogrammed default
  4441   300008                     	org	3145736
  4442   300008  0F                 	db	15
  4443                           
  4444                           ;Config register CONFIG5H @ 0x300009
  4445                           ;	unspecified, using default values
  4446                           ;	Code Protect Boot
  4447                           ;	CPB = 0x1, unprogrammed default
  4448                           ;	Data EE Read Protect
  4449                           ;	CPD = 0x1, unprogrammed default
  4450   300009                     	org	3145737
  4451   300009  C0                 	db	192
  4452                           
  4453                           ;Config register CONFIG6L @ 0x30000A
  4454                           ;	unspecified, using default values
  4455                           ;	Table Write Protect 00800-003FFF
  4456                           ;	WRT0 = 0x1, unprogrammed default
  4457                           ;	Table Write Protect 004000-007FFF
  4458                           ;	WRT1 = 0x1, unprogrammed default
  4459                           ;	Table Write Protect 08000-0BFFF
  4460                           ;	WRT2 = 0x1, unprogrammed default
  4461   30000A                     	org	3145738
  4462   30000A  0F                 	db	15
  4463                           
  4464                           ;Config register CONFIG6H @ 0x30000B
  4465                           ;	unspecified, using default values
  4466                           ;	Config. Write Protect
  4467                           ;	WRTC = 0x1, unprogrammed default
  4468                           ;	Table Write Protect Boot
  4469                           ;	WRTB = 0x1, unprogrammed default
  4470                           ;	Data EE Write Protect
  4471                           ;	WRTD = 0x1, unprogrammed default
  4472   30000B                     	org	3145739
  4473   30000B  E0                 	db	224
  4474                           
  4475                           ;Config register CONFIG7L @ 0x30000C
  4476                           ;	unspecified, using default values
  4477                           ;	Table Read Protect 00800-003FFF
  4478                           ;	EBTR0 = 0x1, unprogrammed default
  4479                           ;	Table Read Protect 004000-07FFF
  4480                           ;	EBTR1 = 0x1, unprogrammed default
  4481                           ;	Table Read Protect 08000-0BFFF
  4482                           ;	EBTR2 = 0x1, unprogrammed default
  4483   30000C                     	org	3145740
  4484   30000C  0F                 	db	15
  4485                           
  4486                           ;Config register CONFIG7H @ 0x30000D
  4487                           ;	unspecified, using default values
  4488                           ;	Table Read Protect Boot
  4489                           ;	EBTRB = 0x1, unprogrammed default
  4490   30000D                     	org	3145741
  4491   30000D  40                 	db	64
  4492                           tosu	equ	0xFFF
  4493                           tosh	equ	0xFFE
  4494                           tosl	equ	0xFFD
  4495                           stkptr	equ	0xFFC
  4496                           pclatu	equ	0xFFB
  4497                           pclath	equ	0xFFA
  4498                           pcl	equ	0xFF9
  4499                           tblptru	equ	0xFF8
  4500                           tblptrh	equ	0xFF7
  4501                           tblptrl	equ	0xFF6
  4502                           tablat	equ	0xFF5
  4503                           prodh	equ	0xFF4
  4504                           prodl	equ	0xFF3
  4505                           indf0	equ	0xFEF
  4506                           postinc0	equ	0xFEE
  4507                           postdec0	equ	0xFED
  4508                           preinc0	equ	0xFEC
  4509                           plusw0	equ	0xFEB
  4510                           fsr0h	equ	0xFEA
  4511                           fsr0l	equ	0xFE9
  4512                           wreg	equ	0xFE8
  4513                           indf1	equ	0xFE7
  4514                           postinc1	equ	0xFE6
  4515                           postdec1	equ	0xFE5
  4516                           preinc1	equ	0xFE4
  4517                           plusw1	equ	0xFE3
  4518                           fsr1h	equ	0xFE2
  4519                           fsr1l	equ	0xFE1
  4520                           bsr	equ	0xFE0
  4521                           indf2	equ	0xFDF
  4522                           postinc2	equ	0xFDE
  4523                           postdec2	equ	0xFDD
  4524                           preinc2	equ	0xFDC
  4525                           plusw2	equ	0xFDB
  4526                           fsr2h	equ	0xFDA
  4527                           fsr2l	equ	0xFD9
  4528                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      87
    BANK0           160      2       2
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    S1039s_HeadLightStateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightEventPoll(), 

    headLightSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightEventPoll(), 

    S1039s_HeadLightStateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightActiveState(), SGL_HeadLightPasiveState(), 

    headLightSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightActiveState(), SGL_HeadLightPasiveState(), 

    SGL_toggleSideHazardLights@toggle	PTR unsigned char  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState@toggleLights(COMRAM[1]), SGL_BlinkSwitchOnState@toggleLights(COMRAM[1]), 

    SGL_toggleAllHazardLights@toggle	PTR unsigned char  size(2) Largest target is 1
		 -> SGL_BlinkPasiveState@toggleLights(COMRAM[1]), 

    S934s_blinkStateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkEventPoll(), 

    blinkerSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkEventPoll(), 

    S934s_blinkStateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState(), SGL_BlinkSwitchOnState(), SGL_BlinkPasiveState(), 

    blinkerSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState(), SGL_BlinkSwitchOnState(), SGL_BlinkPasiveState(), 

    S26s_stateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoEventPoll(), 

    demoSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoEventPoll(), 

    S26s_stateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoState2(), LIGHTS_DemoState1(), 

    demoSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoState2(), LIGHTS_DemoState1(), 


Critical Paths under _main in COMRAM

    _LIGHTS_BrakeInit->_IOC_vSetOutputPort
    _SGL_BlinkSwitchOnState->_SGL_toggleSideHazardLights
    _SGL_setSideHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkSwitchOffState->_SGL_toggleSideHazardLights
    _SGL_toggleSideHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkPasiveState->_SGL_toggleAllHazardLights
    _SGL_toggleAllHazardLights->_IOC_vSetOutputPort
    _SGL_setAllHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkEventPoll->_IOC_T16GetInputPort
    _LIGHTS_BrakeRun->_IOC_vSetOutputPort
    _SGL_HeadLightPasiveState->_SGL_isNight
    _SGL_isNight->___ftge
    ___lwtoft->___ftpack
    ___ftge->___lwtoft
    _SGL_HeadLightEventPoll->_IOC_T16GetInputPort
    _IOC_T16GetInputPort->_PCS_T16GetInputPortC
    _SGL_HeadLightActiveState->_IOC_vSetOutputPort
    _IOC_vSetOutputPort->_IOC_T16GetInputPort

Critical Paths under _INT_vInterruptHandler in COMRAM

    _INT_vInterruptHandler->_ADC_vConversionCompleted

Critical Paths under _main in BANK0

    _SGL_BlinkersRun->_SGL_BlinkSwitchOffState

Critical Paths under _INT_vInterruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT_vInterruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT_vInterruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT_vInterruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT_vInterruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT_vInterruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT_vInterruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT_vInterruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INT_vInterruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INT_vInterruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INT_vInterruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INT_vInterruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INT_vInterruptHandler in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   69958
                  _SCHED_vInitSystem
              _SCHED_vStartScheduler
 ---------------------------------------------------------------------------------
 (1) _SCHED_vStartScheduler                                0     0      0   69958
                    _TASK_vTask100ms
                     _TASK_vTask10ms
                      _TASK_vTask1ms
                       _TASK_vTask1s
                  _TASK_vTaskAppInit
 ---------------------------------------------------------------------------------
 (2) _TASK_vTaskAppInit                                    0     0      0    6247
                   _LIGHTS_BrakeInit
                _LIGHTS_HeadLampInit
                   _SGL_BlinkersInit
 ---------------------------------------------------------------------------------
 (3) _SGL_BlinkersInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_HeadLampInit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_BrakeInit                                     0     0      0    6247
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask1s                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask1ms                                        0     0      0   46959
                    _LIGHTS_BrakeRun
                    _SGL_BlinkersRun
 ---------------------------------------------------------------------------------
 (3) _SGL_BlinkersRun                                      0     0      0   39840
                 _SGL_BlinkEventPoll *
               _SGL_BlinkPasiveState *
            _SGL_BlinkSwitchOffState *
             _SGL_BlinkSwitchOnState *
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkSwitchOnState                               0     0      0   19473
             _SGL_setAllHazardLights
            _SGL_setSideHazardLights
         _SGL_toggleSideHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_setSideHazardLights                              2     1      1    6433
                                             28 COMRAM     2     1      1
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkSwitchOffState                              2     2      0    6705
                                              0 BANK0      2     2      0
         _SGL_toggleSideHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_toggleSideHazardLights                           3     0      3    6705
                                             28 COMRAM     3     0      3
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkPasiveState                                 0     0      0   12790
             _SGL_setAllHazardLights
          _SGL_toggleAllHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_toggleAllHazardLights                            2     0      2    6455
                                             28 COMRAM     2     0      2
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (5) _SGL_setAllHazardLights                               1     1      0    6335
                                             28 COMRAM     1     1      0
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkEventPoll                                   0     0      0     872
                _IOC_T16GetInputPort
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_BrakeRun                                      0     0      0    7119
                _IOC_T16GetInputPort
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask10ms                                       0     0      0   16752
                 _LIGHTS_HeadLampRun
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_HeadLampRun                                   0     0      0   16752
           _SGL_HeadLightActiveState *
             _SGL_HeadLightEventPoll *
           _SGL_HeadLightPasiveState *
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightPasiveState                             0     0      0    9633
                 _IOC_vSetOutputPort
                        _SGL_isNight
 ---------------------------------------------------------------------------------
 (5) _SGL_isNight                                          2     2      0    3386
                                             27 COMRAM     2     2      0
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2901
                                             15 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2727
                                              7 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     440
                                             18 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightEventPoll                               0     0      0     872
                _IOC_T16GetInputPort
 ---------------------------------------------------------------------------------
 (5) _IOC_T16GetInputPort                                  6     4      2     872
                                             17 COMRAM     6     4      2
                _ADC_u16ReadAdcValue
               _PCS_T16GetInputPortC
 ---------------------------------------------------------------------------------
 (6) _PCS_T16GetInputPortC                                10     8      2     113
                                              7 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _ADC_u16ReadAdcValue                                  6     4      2      91
                                              7 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightActiveState                             0     0      0    6247
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _IOC_vSetOutputPort                                   5     2      3    6247
                                             23 COMRAM     5     2      3
                _IOC_T16GetInputPort (ARG)
                _PCS_vSetOutputPortD
                _PCS_vSetOutputPortE
 ---------------------------------------------------------------------------------
 (5) _PCS_vSetOutputPortE                                  8     7      1     234
                                              7 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (5) _PCS_vSetOutputPortD                                  8     7      1     234
                                              7 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask100ms                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SCHED_vInitSystem                                    0     0      0       0
                          _ADC_vInit
                          _INT_vInit
                          _PCS_vInit
                          _TIM_vInit
 ---------------------------------------------------------------------------------
 (2) _TIM_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PCS_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INT_vInterruptHandler                                4     4      0       0
                                              3 COMRAM     4     4      0
           _ADC_vConversionCompleted
            _SCHED_vTickFunctionCall
 ---------------------------------------------------------------------------------
 (9) _SCHED_vTickFunctionCall                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _ADC_vConversionCompleted                             3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SCHED_vInitSystem
     _ADC_vInit
     _INT_vInit
     _PCS_vInit
     _TIM_vInit
   _SCHED_vStartScheduler
     _TASK_vTask100ms
     _TASK_vTask10ms
       _LIGHTS_HeadLampRun
         _SGL_HeadLightActiveState *
           _IOC_vSetOutputPort
             _IOC_T16GetInputPort (ARG)
               _ADC_u16ReadAdcValue
               _PCS_T16GetInputPortC
             _PCS_vSetOutputPortD (ARG)
             _PCS_vSetOutputPortE (ARG)
         _SGL_HeadLightEventPoll *
           _IOC_T16GetInputPort
         _SGL_HeadLightPasiveState *
           _IOC_vSetOutputPort
           _SGL_isNight
             ___ftge
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
     _TASK_vTask1ms
       _LIGHTS_BrakeRun
         _IOC_T16GetInputPort
         _IOC_vSetOutputPort
       _SGL_BlinkersRun
         _SGL_BlinkEventPoll *
           _IOC_T16GetInputPort
         _SGL_BlinkPasiveState *
           _SGL_setAllHazardLights
             _IOC_vSetOutputPort
           _SGL_toggleAllHazardLights
             _IOC_vSetOutputPort
         _SGL_BlinkSwitchOffState *
           _SGL_toggleSideHazardLights
             _IOC_vSetOutputPort
         _SGL_BlinkSwitchOnState *
           _SGL_setAllHazardLights
           _SGL_setSideHazardLights
             _IOC_vSetOutputPort
           _SGL_toggleSideHazardLights
     _TASK_vTask1s
     _TASK_vTaskAppInit
       _LIGHTS_BrakeInit
         _IOC_vSetOutputPort
       _LIGHTS_HeadLampInit
       _SGL_BlinkersInit

 _INT_vInterruptHandler (ROOT)
   _ADC_vConversionCompleted
   _SCHED_vTickFunctionCall

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      39        0.0%
EEDATA             400      0       0       0        0.0%
BITBIGSFRllll      282      0       0      38        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2       2       5        1.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1F      57       1       92.6%
BITBIGSFRhlhh       25      0       0      32        0.0%
BITBIGSFRlh         20      0       0      34        0.0%
BITBIGSFRlllh        D      0       0      37        0.0%
BITBIGSFRhh          D      0       0      31        0.0%
BITBIGSFRllhh        6      0       0      35        0.0%
BITBIGSFRhll         5      0       0      33        0.0%
BITBIGSFRllhl        1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      59       6        0.0%
DATA                 0      0      59       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Nov 24 18:48:41 2022

                                                  ?_SGL_BlinkSwitchOnState 0037  
                                                 ?_SGL_BlinkSwitchOffState 0037  
                                         SGL_BlinkSwitchOnState@firstEntry 0056  
                                                                       l61 0ACC  
                                                                       l59 0AC4  
                                                     ?_LIGHTS_HeadLampInit 0037  
                                                                      l111 06C8  
                                                                      l120 064A  
                                                                      l114 0712  
                                                                      l123 0694  
                                                                      l109 06C0  
                                                                      l118 0642  
                                                                      l214 0B26  
                                                                      l127 0884  
                                                                      l129 088C  
                                                                      l309 0120  
                                                                      l273 0A1E  
                                                                      l329 01F0  
                                                                      l363 0596  
                                                                      l371 0486  
                                                                      l291 0366  
                                                                      l376 03F6  
                                                                      l662 02B4  
                                                                      l737 0616  
                                                                      _PR2 000FCB  
                                                                      u920 06A8  
                                                                      u930 06AC  
                                                                      u964 06E6  
                                                                      u980 062A  
                                                                      u965 06E0  
                                                                      u974 0706  
                                                                      u990 062E  
                                                                      u975 0700  
                                                                      prod 000FF3  
                                                                      tosl 000FFD  
                                                                      wreg 000FE8  
                                                                     l2061 042E  
                                                                     l2135 0C28  
                                                                     l2303 00AE  
                                                                     l2065 044C  
                                                                     l2081 03AE  
                                                                     l2305 00B4  
                                                                     l2067 045E  
                                                                     l2251 02EA  
                                                                     l2243 02D2  
                                                                     l2319 00E4  
                                                                     l2423 07B2  
                                                                     l2257 030E  
                                                                     l2441 07EA  
                                                                     l2291 0070  
                                                                     l2363 01AC  
                                                                     l2267 032E  
                                                                     l2259 0316  
                                                                     l2435 07D8  
                                                                     l1821 05C0  
                                                                     l2349 0148  
                                                                     l1743 06F2  
                                                                     l1831 0612  
                                                                     l2375 01D8  
                                                                     l2359 018C  
                                                                     l1825 05E4  
                                                                     l2297 0086  
                                                                     l1755 0674  
                                                                     l1851 09C2  
                                                                     l1773 025C  
                                                                     l1765 0218  
                                                                     l1847 09A8  
                                                                     l1775 027C  
                                                                     l1767 0224  
                                                                     l1863 04C6  
                                                                     l1777 0288  
                                                                     l1769 0244  
                                                                     l1865 04F8  
                                                                     l1873 09FC  
                                                                     l1797 0B10  
                                                                     l1887 055A  
                                                                     l1897 0592  
                                                  ?_SGL_HeadLightEventPoll 0037  
                                                                     u1024 0668  
                                                                     u1025 0662  
                                                                     u1034 0688  
                                                                     u1050 0208  
                                                                     u1035 0682  
                                                                     u2008 0906  
                                                                     u2009 091E  
                                                                     u1090 0294  
                                                                     u1164 08A8  
                                                                     u1165 08A2  
                                                                     u1174 08BE  
                                                                     u1175 08B8  
                                                                     u2057 0AA4  
                                                                     u1618 0932  
                                                                     u1810 033C  
                                                                     u1619 094A  
                                                                     u1638 095C  
                                                                     u1639 0974  
                                                                     u1960 01E6  
                                                                     u1988 08DC  
                                                                     u1989 08F4  
                                                                     i2l88 0034  
                                                                     _TMR2 000FCC  
                                                 ??_SGL_setAllHazardLights 0053  
                                                                     _main 0D30  
                                                             ___ftpack@arg 003E  
                                                             ___ftpack@exp 0041  
                                                                     fsr2h 000FDA  
                                                                     indf2 000FDF  
                                                                     fsr2l 000FD9  
                                                                     btemp 0058  
                                           PCS_vSetOutputPortD@u8BitNumber 0044  
                                                                     prodh 000FF4  
                                                                     prodl 000FF3  
                                                                     start 004C  
                                                    ?_PCS_T16GetInputPortC 003E  
                                           __end_of_SGL_BlinkSwitchOnState 0126  
                                                          _LIGHTS_BrakeRun 0BFE  
                                                             ___param_bank 000000  
                                                    _INT_vInterruptHandler 0008  
                                         __end_of_SGL_HeadLightPasiveState 048C  
                                                    ??_LIGHTS_HeadLampInit 003E  
                                          __end_of_SCHED_vTickFunctionCall 0D0A  
                                                                    ?_main 0037  
                                                       _IOC_vSetOutputPort 0AEE  
                                                                    _T2CON 000FCA  
                                                                    _PORTC 000F82  
                                                                    _PORTD 000F83  
                                                                    _PORTE 000F84  
                                                                    _TRISD 000F95  
                                                         ?_SGL_BlinkersRun 0037  
                                                      ?_IOC_vSetOutputPort 004E  
                                           __end_of_SGL_HeadLightEventPoll 0C84  
                                                            ___ftpack@sign 0042  
                                                                    pclath 000FFA  
                                                                    tablat 000FF5  
                                                                    ttemp5 0059  
                                                                    ttemp6 005C  
                                                                    ttemp7 0060  
                                                                    status 000FD8  
                                                        __end_of_ADC_vInit 0AB0  
                                                                    wtemp8 0059  
                                           PCS_vSetOutputPortE@u8BitNumber 0044  
                                          __end_of_SGL_BlinkSwitchOffState 01F6  
                                                         _LIGHTS_BrakeInit 0CC8  
                                                          __initialization 0BCC  
                                                     ??_IOC_vSetOutputPort 0051  
                                                             __end_of_main 0D3E  
                                            __end_of_SCHED_vStartScheduler 080A  
                                                                   ??_main 0056  
                                                            __activetblptr 000002  
                                      PCS_vSetOutputPortD@u8BitNumberValue 0045  
                                                    __end_of_TASK_vTask1ms 0D4C  
                                                                   _ADRESH 000FC4  
                                                                   _ADRESL 000FC3  
                                      SGL_BlinkSwitchOffState@toggleLights 0034  
                                                         __end_of___ftpack 02BA  
                                                                   i2l1717 0026  
                                                         __end_of___lwtoft 0CAC  
                                                  __end_of_LIGHTS_BrakeRun 0C30  
                                                   ??_PCS_T16GetInputPortC 0040  
                                                        __end_of_INT_vInit 0D1E  
                                                        __end_of_PCS_vInit 0CC8  
                                               __end_of_LIGHTS_HeadLampRun 097A  
                                                   ?_INT_vInterruptHandler 0037  
                                                        ?_SGL_BlinkersInit 0037  
                                                                   ___ftge 059C  
                                       IOC_vSetOutputPort@u16ChannelSelect 004E  
                                                                   _demoSM 0016  
                                             ??_SGL_toggleSideHazardLights 0056  
                                                       ??_SGL_BlinkersInit 003E  
                                                                   clear_0 0BEA  
                                                                   isa$std 000001  
                                                 _SGL_HeadLightPasiveState 03FC  
                                                        __end_of_TIM_vInit 0BCC  
                                            SGL_BlinkSwitchOffState@cycles 0030  
                                                             __pdataCOMRAM 0056  
                                                ?_ADC_vConversionCompleted 0037  
                                      IOC_T16GetInputPort@u16ChannelSelect 0048  
                                                             ?_SGL_isNight 0037  
                                                                   tblptrh 000FF7  
                                                                   tblptrl 000FF6  
                                                                   tblptru 000FF8  
                                               ??_SGL_HeadLightActiveState 0053  
                                              SGL_setSideHazardLights@side 0053  
                                              __end_of_IOC_T16GetInputPort 09D0  
                                                        _SCHED_vInitSystem 0CDE  
                                                               __accesstop 0060  
                                                  __end_of__initialization 0BF0  
                                                        _TASK_vTaskAppInit 0D1E  
                                              __end_of_PCS_vSetOutputPortD 0718  
                                              __end_of_PCS_vSetOutputPortE 069A  
                                                               ___ftge@ff1 0049  
                                                               ___ftge@ff2 004C  
                                                        _LIGHTS_DemoState1 000000  
                                                        _LIGHTS_DemoState2 000000  
                                                       ?_SCHED_vInitSystem 0037  
                                                            ___rparam_used 000001  
                                                       ?_TASK_vTaskAppInit 0037  
                                                           __pcstackCOMRAM 0037  
                                                      ??_SCHED_vInitSystem 003E  
                                                           _TASK_vTask10ms 0D4C  
                                                      ??_TASK_vTaskAppInit 0053  
                                                   _SGL_setAllHazardLights 0A24  
                                                               ___lwtoft@c 0046  
                                                  _SGL_setSideHazardLights 09D0  
                                             SGL_isNight@currentLightLevel 0052  
                                                        ??_TASK_vTask100ms 003E  
                                                __end_of_SCHED_vInitSystem 0CF4  
                                                __end_of_TASK_vTaskAppInit 0D30  
                                                         ?_LIGHTS_BrakeRun 0037  
                                         SGL_BlinkPasiveState@toggleLights 0036  
                                      PCS_vSetOutputPortE@u8BitNumberValue 0045  
                                                   __end_of_TASK_vTask10ms 0D56  
                                                                  ?___ftge 0049  
                                                   LIGHTS_BrakeRun@counter 002F  
                                                                ?___ftpack 003E  
                                                            ?_TASK_vTask1s 0037  
                                                                ?___lwtoft 0046  
                                                 __end_of_LIGHTS_BrakeInit 0CDE  
                                                                  i2u73_40 082A  
                                                                  i2u74_40 0852  
                                                                  i2u73_48 082E  
                                                                  i2u75_48 0856  
                                               __end_of_SGL_BlinkEventPoll 0B98  
                                              __end_of_LIGHTS_HeadLampInit 0C5A  
                                                                  __Hparam 0000  
                                                                  __Lparam 0000  
                                                                _ADC_vInit 0A6C  
                                                          ?_TASK_vTask10ms 0037  
                                       __end_of_SGL_toggleSideHazardLights 0514  
                                               _SGL_toggleSideHazardLights 048C  
                                         IOC_vSetOutputPort@u16ChannelMask 0051  
                                                ??_SGL_setSideHazardLights 0054  
                                                           ??_TASK_vTask1s 003E  
                                                                  __pcinit 0BCC  
                                                               ??___ftpack 0043  
                                                                  __ramtop 1000  
                                                                  __ptext0 0D30  
                                                                  __ptext1 0794  
                                                                  __ptext2 0D1E  
                                                                  __ptext3 0B2C  
                                                                  __ptext4 0C30  
                                                                  __ptext5 0CC8  
                                                                  __ptext6 0D56  
                                                                  __ptext7 0D3E  
                                                                  __ptext8 08CE  
                                                                  __ptext9 02BA  
                                                               ??___lwtoft 0049  
                                                  _PCS_vSetOutputPortD$706 0041  
                                                  _PCS_vSetOutputPortE$712 0041  
                                                                _T2CONbits 000FCA  
                                           SGL_BlinkSwitchOffState@counter 0024  
                                                     end_of_initialization 0BF0  
                                                            _sched_bTicked 002A  
                                                            _sched_gTick1s 002C  
                                                  _SCHED_vTickFunctionCall 0CF4  
                                                            __Lmediumconst 0000  
                                                  ??_INT_vInterruptHandler 003A  
                                                               ?_ADC_vInit 0037  
                                       SGL_BlinkSwitchOnState@toggleLights 0035  
                                               ??_SGL_HeadLightPasiveState 0054  
                                         __end_of_ADC_vConversionCompleted 086E  
                                                      _ADC_u16ReadAdcValue 0AB0  
                                                                  postdec2 000FDD  
                                               ?_SGL_toggleAllHazardLights 0053  
                                                                _INT_vInit 0D0A  
                                                                  postinc0 000FEE  
                                                                  postinc2 000FDE  
                                           SGL_BlinkPasiveState@firstEntry 0057  
                                                                _PCS_vInit 0CAC  
                                             SGL_setSideHazardLights@value 0054  
                                                       _LIGHTS_HeadLampRun 0924  
                                                    _SCHED_vStartScheduler 0794  
                                                  _SGL_BlinkSwitchOffState 0126  
                                                                _TRISAbits 000F92  
                                                                _TRISCbits 000F94  
                                                                _TRISEbits 000F96  
                                                                _TIM_vInit 0B98  
                                                     ?_ADC_u16ReadAdcValue 003E  
                                                      ?_LIGHTS_HeadLampRun 0037  
                                                 ??_SGL_BlinkSwitchOnState 0056  
                                                  _ADC_u16ReadAdcValue$374 0040  
                                                  ?_SGL_setAllHazardLights 0037  
                                                               ?_INT_vInit 0037  
                                                     ??_LIGHTS_HeadLampRun 0054  
                                        __end_of_SGL_toggleAllHazardLights 0794  
                                          SGL_toggleAllHazardLights@toggle 0053  
                                                           __end_of___ftge 061C  
                                                               ?_PCS_vInit 0037  
                                                          _TASK_vTask100ms 0D5C  
                                                            __pidataCOMRAM 0D62  
                                                 ??_SGL_HeadLightEventPoll 004E  
                                              SGL_BlinkPasiveState@counter 0028  
                                                      start_initialization 0BCC  
                                                    ??_ADC_u16ReadAdcValue 0040  
                                                               ?_TIM_vInit 0037  
                                                     SGL_isNight@prevState 002E  
                                             __end_of_SGL_BlinkPasiveState 036C  
                                                ??_SCHED_vTickFunctionCall 0037  
                                                         _sched_gTick100ms 0032  
                                                     __end_of_TASK_vTask1s 0D5C  
                                           __end_of_SGL_setAllHazardLights 0A6C  
                                                              ??_ADC_vInit 003E  
                                                ?_SGL_HeadLightActiveState 0037  
                                                                 ??___ftge 004F  
                                                        ??_SGL_BlinkersRun 0056  
                                                 _ADC_vConversionCompleted 080A  
                                                ??_SGL_BlinkSwitchOffState 0060  
                                                   ?_SCHED_vStartScheduler 0037  
                                               PCS_vSetOutputPortD@u8Value 003E  
                                                              __pbssCOMRAM 0001  
                                               PCS_vSetOutputPortE@u8Value 003E  
                                     PCS_T16GetInputPortC@u8BitNumberValue 0047  
                                                            __pcstackBANK0 0060  
                                                        ?_LIGHTS_BrakeInit 0037  
                                                            _TASK_vTask1ms 0D3E  
                                              IOC_T16GetInputPort@pinValue 004A  
                                                              _headLightSM 000D  
                                                       ??_LIGHTS_BrakeInit 0053  
                                                         ??_TASK_vTask10ms 0054  
                                                  __end_of_TASK_vTask100ms 0D62  
                                                       _SGL_BlinkEventPoll 0B62  
                                                                __pintcode 0008  
                                                                _blinkerSM 0001  
                                                              ??_INT_vInit 003E  
                                              ?_SGL_toggleSideHazardLights 0053  
                                                              ??_PCS_vInit 003E  
                                                      ?_SGL_BlinkEventPoll 0037  
                                               SGL_BlinkSwitchOnState@side 0031  
                                                         _SGL_BlinkersInit 0B2C  
                                                              ??_TIM_vInit 003E  
                                                           ?_TASK_vTask1ms 0037  
                                                     ??_SGL_BlinkEventPoll 004E  
                                                                 _IPR1bits 000F9F  
                                                                 _PIE1bits 000F9D  
                                            __end_of_INT_vInterruptHandler 004C  
                                                                 _PIR1bits 000F9E  
                                            PCS_vSetOutputPortD@u8BitValue 0043  
                                          PCS_T16GetInputPortC@u8BitNumber 0046  
                                              ??_SGL_toggleAllHazardLights 0055  
                                                     _SGL_BlinkPasiveState 02BA  
                                        ADC_u16ReadAdcValue@U8ChannelValue 0042  
                                                   _SGL_BlinkSwitchOnState 0050  
                                                               _ADCON0bits 000FC2  
                                                               _ADCON1bits 000FC1  
                                                               _ADCON2bits 000FC0  
                                                            ??_SGL_isNight 0052  
                                           SGL_toggleSideHazardLights@side 0055  
                                            PCS_vSetOutputPortE@u8BitValue 0043  
                                                   _SGL_HeadLightEventPoll 0C5A  
                                             ADC_u16ReadAdcValue@U8Channel 0043  
                                                          _sched_gTick10ms 0033  
                                               __end_of_IOC_vSetOutputPort 0B2C  
                                                                 __Hrparam 0000  
                                                         ?_TASK_vTask100ms 0037  
                                                                 __Lrparam 0000  
                                                 ?_SGL_setSideHazardLights 0053  
                                                    ?_SGL_BlinkPasiveState 0037  
                                              SGL_BlinkSwitchOffState@side 0022  
                                        IOC_T16GetInputPort@u16ChannelMask 004C  
                                                                 ___ftpack 01F6  
                                                             _TASK_vTask1s 0D56  
                                                                 ___lwtoft 0C84  
                                                        ??_LIGHTS_BrakeRun 0053  
                                             __end_of_PCS_T16GetInputPortC 08CE  
                                                          ??_TASK_vTask1ms 0056  
                                                ?_SGL_HeadLightPasiveState 0037  
                                                      _IOC_T16GetInputPort 097A  
                                                                 __ptext10 0126  
                                                                 __ptext11 0050  
                                                                 __ptext20 036C  
                                                                 __ptext12 09D0  
                                                                 __ptext21 03FC  
                                                                 __ptext13 048C  
                                                                 __ptext30 0AEE  
                                                                 __ptext22 0514  
                                                                 __ptext14 0718  
                                                                 __ptext31 061C  
                                                                 __ptext23 0C84  
                                                                 __ptext15 0A24  
                                                                 __ptext40 0CF4  
                                                                 __ptext32 069A  
                                                                 __ptext24 01F6  
                                                                 __ptext16 0B62  
                                                                 __ptext41 080A  
                                                                 __ptext33 0D5C  
                                                                 __ptext25 059C  
                                                                 __ptext17 0BFE  
                                                                 __ptext42 0000  
                                                                 __ptext34 0CDE  
                                                                 __ptext26 0C5A  
                                                                 __ptext18 0D4C  
                                                                 __ptext35 0B98  
                                                                 __ptext27 097A  
                                                                 __ptext19 0924  
                                                                 __ptext36 0CAC  
                                                                 __ptext28 0870  
                                                                 __ptext37 0D0A  
                                                                 __ptext29 0AB0  
                                                                 __ptext38 0A6C  
                                                _SGL_toggleAllHazardLights 0718  
                                         SGL_toggleSideHazardLights@toggle 0053  
                                         __end_of_SGL_HeadLightActiveState 03FC  
                                                      _PCS_vSetOutputPortD 069A  
                                                      _PCS_vSetOutputPortE 061C  
                                                      __end_of_SGL_isNight 059C  
                                                          _SGL_BlinkersRun 08CE  
                                               ??_ADC_vConversionCompleted 0037  
                                                     ?_IOC_T16GetInputPort 0048  
                                                                 isa$xinst 000000  
                                                     ?_PCS_vSetOutputPortD 003E  
                                                     ?_PCS_vSetOutputPortE 003E  
                                                                 int$flags 0058  
                                                  ??_SCHED_vStartScheduler 0056  
                                            SGL_BlinkSwitchOnState@counter 0026  
                                              __end_of_ADC_u16ReadAdcValue 0AEE  
                                                               _INTCONbits 000FF2  
                                                                 intlevel2 0D64  
                                          __end_of_SGL_setSideHazardLights 0A24  
                                                IOC_vSetOutputPort@u8Value 0050  
                                                    ??_IOC_T16GetInputPort 004A  
                                                 __end_of_SGL_BlinkersInit 0B62  
                                                   ??_SGL_BlinkPasiveState 0055  
                                                    ??_PCS_vSetOutputPortD 003F  
                                                    ??_PCS_vSetOutputPortE 003F  
                                                         _au16AdcReadValue 001E  
                                              SGL_setAllHazardLights@value 0053  
                                                 ?_SCHED_vTickFunctionCall 0037  
                                                              _SGL_isNight 0514  
                                                  __end_of_SGL_BlinkersRun 0924  
                                                 _PCS_T16GetInputPortC$716 0044  
                                                      _LIGHTS_HeadLampInit 0C30  
                                                 _SGL_HeadLightActiveState 036C  
                                                     _PCS_T16GetInputPortC 0870  
                                                     _LIGHTS_DemoEventPoll 000000  
