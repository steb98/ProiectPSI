

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Nov 20 15:17:00 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F6585
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    57                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    58   000000                     
    59                           ; Version 2.40
    60                           ; Generated 04/07/2022 GMT
    61                           ; 
    62                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F6585 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94   000000                     
    95 ;; Function _LIGHTS_DemoState1 is unused but had its address taken
    96   000000                     
    97 ;; Function _LIGHTS_DemoState2 is unused but had its address taken
    98   000000                     
    99 ;; Function _LIGHTS_DemoEventPoll is unused but had its address taken
   100   000000                     
   101                           	psect	idataCOMRAM
   102   000D74                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for SGL_BlinkSwitchOnState@firstEntry
   106   000D74  01                 	db	1
   107                           
   108                           ;initializer for SGL_BlinkPasiveState@firstEntry
   109   000D75  01                 	db	1
   110   000000                     _PR2	set	4043
   111   000000                     _TMR2	set	4044
   112   000000                     _T2CON	set	4042
   113   000000                     _PORTC	set	3970
   114   000000                     _PORTD	set	3971
   115   000000                     _TRISAbits	set	3986
   116   000000                     _PIE1bits	set	3997
   117   000000                     _PIR1bits	set	3998
   118   000000                     _ADCON2bits	set	4032
   119   000000                     _ADCON1bits	set	4033
   120   000000                     _ADCON0bits	set	4034
   121   000000                     _ADRESL	set	4035
   122   000000                     _ADRESH	set	4036
   123   000000                     _T2CONbits	set	4042
   124   000000                     _INTCONbits	set	4082
   125   000000                     _IPR1bits	set	3999
   126   000000                     _TRISCbits	set	3988
   127   000000                     _TRISEbits	set	3990
   128   000000                     _TRISD	set	3989
   129   000000                     _PORTE	set	3972
   130                           
   131                           ; #config settings
   132                           
   133                           	psect	cinit
   134   000BDE                     __pcinit:
   135                           	callstack 0
   136   000BDE                     start_initialization:
   137                           	callstack 0
   138   000BDE                     __initialization:
   139                           	callstack 0
   140                           
   141                           ; Initialize objects allocated to COMRAM (2 bytes)
   142                           ; load TBLPTR registers with __pidataCOMRAM
   143   000BDE  0E74               	movlw	low __pidataCOMRAM
   144   000BE0  6EF6               	movwf	tblptrl,c
   145   000BE2  0E0D               	movlw	high __pidataCOMRAM
   146   000BE4  6EF7               	movwf	tblptrh,c
   147   000BE6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   148   000BE8  6EF8               	movwf	tblptru,c
   149   000BEA  0009               	tblrd		*+	;fetch initializer
   150   000BEC  CFF5 F052          	movff	tablat,__pdataCOMRAM
   151   000BF0  0009               	tblrd		*+	;fetch initializer
   152   000BF2  CFF5 F053          	movff	tablat,__pdataCOMRAM+1
   153                           
   154                           ; Clear objects allocated to COMRAM (45 bytes)
   155   000BF6  EE00  F001         	lfsr	0,__pbssCOMRAM
   156   000BFA  0E2D               	movlw	45
   157   000BFC                     clear_0:
   158   000BFC  6AEE               	clrf	postinc0,c
   159   000BFE  06E8               	decf	wreg,f,c
   160   000C00  E1FD               	bnz	clear_0
   161   000C02                     end_of_initialization:
   162                           	callstack 0
   163   000C02                     __end_of__initialization:
   164                           	callstack 0
   165   000C02  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   166   000C04  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   167   000C06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   168   000C08  6EF8               	movwf	tblptru,c
   169   000C0A  0100               	movlb	0
   170   000C0C  EFA1  F006         	goto	_main	;jump to C main() function
   171                           
   172                           	psect	bssCOMRAM
   173   000001                     __pbssCOMRAM:
   174                           	callstack 0
   175   000001                     _headLightSM:
   176                           	callstack 0
   177   000001                     	ds	9
   178   00000A                     _demoSM:
   179                           	callstack 0
   180   00000A                     	ds	8
   181   000012                     _au16AdcReadValue:
   182                           	callstack 0
   183   000012                     	ds	4
   184   000016                     _sched_bTicked:
   185                           	callstack 0
   186   000016                     	ds	2
   187   000018                     _sched_gTick1s:
   188                           	callstack 0
   189   000018                     	ds	2
   190   00001A                     SGL_isNight@prevState:
   191                           	callstack 0
   192   00001A                     	ds	1
   193   00001B                     LIGHTS_BrakeRun@counter:
   194                           	callstack 0
   195   00001B                     	ds	1
   196   00001C                     SGL_BlinkSwitchOffState@extraToggle:
   197                           	callstack 0
   198   00001C                     	ds	1
   199   00001D                     SGL_BlinkSwitchOffState@counterRuns:
   200                           	callstack 0
   201   00001D                     	ds	1
   202   00001E                     SGL_BlinkSwitchOnState@side:
   203                           	callstack 0
   204   00001E                     	ds	1
   205   00001F                     _sched_gTick100ms:
   206                           	callstack 0
   207   00001F                     	ds	1
   208   000020                     _sched_gTick10ms:
   209                           	callstack 0
   210   000020                     	ds	1
   211   000021                     _blinkerSM:
   212                           	callstack 0
   213   000021                     	ds	13
   214                           
   215                           	psect	dataCOMRAM
   216   000052                     __pdataCOMRAM:
   217                           	callstack 0
   218   000052                     SGL_BlinkSwitchOnState@firstEntry:
   219                           	callstack 0
   220   000052                     	ds	1
   221   000053                     SGL_BlinkPasiveState@firstEntry:
   222                           	callstack 0
   223   000053                     	ds	1
   224                           
   225                           	psect	cstackCOMRAM
   226   00002E                     __pcstackCOMRAM:
   227                           	callstack 0
   228   00002E                     ??_ADC_vConversionCompleted:
   229   00002E                     
   230                           ; 1 bytes @ 0x0
   231   00002E                     	ds	3
   232   000031                     ??_INT_vInterruptHandler:
   233                           
   234                           ; 1 bytes @ 0x3
   235   000031                     	ds	4
   236   000035                     ?_ADC_u16ReadAdcValue:
   237                           	callstack 0
   238   000035                     ?_PCS_T16GetInputPortC:
   239                           	callstack 0
   240   000035                     ?___ftpack:
   241                           	callstack 0
   242   000035                     PCS_vSetOutputPortD@u8Value:
   243                           	callstack 0
   244   000035                     PCS_vSetOutputPortE@u8Value:
   245                           	callstack 0
   246   000035                     ___ftpack@arg:
   247                           	callstack 0
   248                           
   249                           ; 3 bytes @ 0x7
   250   000035                     	ds	1
   251   000036                     ??_PCS_vSetOutputPortD:
   252   000036                     ??_PCS_vSetOutputPortE:
   253                           
   254                           ; 1 bytes @ 0x8
   255   000036                     	ds	1
   256   000037                     ??_PCS_T16GetInputPortC:
   257   000037                     _ADC_u16ReadAdcValue$374:
   258                           	callstack 0
   259                           
   260                           ; 2 bytes @ 0x9
   261   000037                     	ds	1
   262   000038                     ___ftpack@exp:
   263                           	callstack 0
   264   000038                     _PCS_vSetOutputPortD$706:
   265                           	callstack 0
   266   000038                     _PCS_vSetOutputPortE$712:
   267                           	callstack 0
   268                           
   269                           ; 2 bytes @ 0xA
   270   000038                     	ds	1
   271   000039                     ADC_u16ReadAdcValue@U8ChannelValue:
   272                           	callstack 0
   273   000039                     ___ftpack@sign:
   274                           	callstack 0
   275                           
   276                           ; 1 bytes @ 0xB
   277   000039                     	ds	1
   278   00003A                     ??___ftpack:
   279   00003A                     ADC_u16ReadAdcValue@U8Channel:
   280                           	callstack 0
   281   00003A                     PCS_vSetOutputPortD@u8BitValue:
   282                           	callstack 0
   283   00003A                     PCS_vSetOutputPortE@u8BitValue:
   284                           	callstack 0
   285                           
   286                           ; 1 bytes @ 0xC
   287   00003A                     	ds	1
   288   00003B                     PCS_vSetOutputPortD@u8BitNumber:
   289                           	callstack 0
   290   00003B                     PCS_vSetOutputPortE@u8BitNumber:
   291                           	callstack 0
   292   00003B                     _PCS_T16GetInputPortC$716:
   293                           	callstack 0
   294                           
   295                           ; 2 bytes @ 0xD
   296   00003B                     	ds	1
   297   00003C                     PCS_vSetOutputPortD@u8BitNumberValue:
   298                           	callstack 0
   299   00003C                     PCS_vSetOutputPortE@u8BitNumberValue:
   300                           	callstack 0
   301                           
   302                           ; 1 bytes @ 0xE
   303   00003C                     	ds	1
   304   00003D                     ?___lwtoft:
   305                           	callstack 0
   306   00003D                     PCS_T16GetInputPortC@u8BitNumber:
   307                           	callstack 0
   308   00003D                     ___lwtoft@c:
   309                           	callstack 0
   310                           
   311                           ; 2 bytes @ 0xF
   312   00003D                     	ds	1
   313   00003E                     PCS_T16GetInputPortC@u8BitNumberValue:
   314                           	callstack 0
   315                           
   316                           ; 1 bytes @ 0x10
   317   00003E                     	ds	1
   318   00003F                     ?_IOC_T16GetInputPort:
   319                           	callstack 0
   320   00003F                     IOC_T16GetInputPort@u16ChannelSelect:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0x11
   324   00003F                     	ds	1
   325   000040                     ___ftge@ff1:
   326                           	callstack 0
   327                           
   328                           ; 3 bytes @ 0x12
   329   000040                     	ds	1
   330   000041                     IOC_T16GetInputPort@pinValue:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x13
   334   000041                     	ds	2
   335   000043                     IOC_T16GetInputPort@u16ChannelMask:
   336                           	callstack 0
   337   000043                     ___ftge@ff2:
   338                           	callstack 0
   339                           
   340                           ; 3 bytes @ 0x15
   341   000043                     	ds	2
   342   000045                     IOC_vSetOutputPort@u16ChannelSelect:
   343                           	callstack 0
   344                           
   345                           ; 2 bytes @ 0x17
   346   000045                     	ds	1
   347   000046                     ??___ftge:
   348                           
   349                           ; 1 bytes @ 0x18
   350   000046                     	ds	1
   351   000047                     IOC_vSetOutputPort@u8Value:
   352                           	callstack 0
   353                           
   354                           ; 1 bytes @ 0x19
   355   000047                     	ds	1
   356   000048                     IOC_vSetOutputPort@u16ChannelMask:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0x1A
   360   000048                     	ds	1
   361   000049                     SGL_isNight@currentLightLevel:
   362                           	callstack 0
   363                           
   364                           ; 2 bytes @ 0x1B
   365   000049                     	ds	1
   366   00004A                     SGL_setSideHazardLights@side:
   367                           	callstack 0
   368   00004A                     SGL_toggleAllHazardLights@toggle:
   369                           	callstack 0
   370   00004A                     SGL_toggleSideHazardLights@toggle:
   371                           	callstack 0
   372   00004A                     SGL_setAllHazardLights@toggle:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0x1C
   376   00004A                     	ds	1
   377   00004B                     SGL_setSideHazardLights@value:
   378                           	callstack 0
   379                           
   380                           ; 1 bytes @ 0x1D
   381   00004B                     	ds	1
   382   00004C                     ??_SGL_BlinkPasiveState:
   383   00004C                     SGL_toggleSideHazardLights@side:
   384                           	callstack 0
   385                           
   386                           ; 1 bytes @ 0x1E
   387   00004C                     	ds	1
   388   00004D                     ??_SGL_BlinkSwitchOffState:
   389   00004D                     
   390                           ; 1 bytes @ 0x1F
   391   00004D                     	ds	5
   392   000052                     
   393                           ; 1 bytes @ 0x24
   394 ;;
   395 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   396 ;;
   397 ;; *************** function _main *****************
   398 ;; Defined at:
   399 ;;		line 11 in file "main.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;		None
   402 ;; Auto vars:     Size  Location     Type
   403 ;;		None
   404 ;; Return value:  Size  Location     Type
   405 ;;                  1    wreg      void 
   406 ;; Registers used:
   407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   417 ;;Total ram usage:        0 bytes
   418 ;; Hardware stack levels required when called: 9
   419 ;; This function calls:
   420 ;;		_SCHED_vInitSystem
   421 ;;		_SCHED_vStartScheduler
   422 ;; This function is called by:
   423 ;;		Startup code after reset
   424 ;; This function uses a non-reentrant model
   425 ;;
   426                           
   427                           	psect	text0
   428   000D42                     __ptext0:
   429                           	callstack 0
   430   000D42                     _main:
   431                           	callstack 0
   432   000D42  FFFF               	dw	65535	; assembler added errata NOP
   433                           
   434                           ;main.c: 13: SCHED_vInitSystem();
   435                           
   436                           ;incstack = 0
   437   000D44  EC78  F006         	call	_SCHED_vInitSystem	;wreg free
   438                           
   439                           ;main.c: 14: SCHED_vStartScheduler();
   440   000D48  ECF5  F003         	call	_SCHED_vStartScheduler	;wreg free
   441   000D4C  EF26  F000         	goto	start
   442   000D50                     __end_of_main:
   443                           	callstack 0
   444                           
   445 ;; *************** function _SCHED_vStartScheduler *****************
   446 ;; Defined at:
   447 ;;		line 29 in file "sched.c"
   448 ;; Parameters:    Size  Location     Type
   449 ;;		None
   450 ;; Auto vars:     Size  Location     Type
   451 ;;		None
   452 ;; Return value:  Size  Location     Type
   453 ;;                  1    wreg      void 
   454 ;; Registers used:
   455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   456 ;; Tracked objects:
   457 ;;		On entry : 0/0
   458 ;;		On exit  : 0/0
   459 ;;		Unchanged: 0/0
   460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   465 ;;Total ram usage:        0 bytes
   466 ;; Hardware stack levels used: 1
   467 ;; Hardware stack levels required when called: 8
   468 ;; This function calls:
   469 ;;		_TASK_vTask100ms
   470 ;;		_TASK_vTask10ms
   471 ;;		_TASK_vTask1ms
   472 ;;		_TASK_vTask1s
   473 ;;		_TASK_vTaskAppInit
   474 ;; This function is called by:
   475 ;;		_main
   476 ;; This function uses a non-reentrant model
   477 ;;
   478                           
   479                           	psect	text1
   480   0007EA                     __ptext1:
   481                           	callstack 0
   482   0007EA                     _SCHED_vStartScheduler:
   483                           	callstack 0
   484   0007EA  FFFF               	dw	65535	; assembler added errata NOP
   485                           
   486                           ;sched.c: 31: sched_gTick10ms = 0;
   487                           
   488                           ;incstack = 0
   489   0007EC  0E00               	movlw	0
   490   0007EE  6E20               	movwf	_sched_gTick10ms^0,c
   491                           
   492                           ;sched.c: 32: sched_gTick100ms = 0;
   493   0007F0  0E00               	movlw	0
   494   0007F2  6E1F               	movwf	_sched_gTick100ms^0,c
   495                           
   496                           ;sched.c: 33: sched_gTick1s = 0;
   497   0007F4  0E00               	movlw	0
   498   0007F6  6E19               	movwf	(_sched_gTick1s+1)^0,c
   499   0007F8  0E00               	movlw	0
   500   0007FA  6E18               	movwf	_sched_gTick1s^0,c
   501                           
   502                           ;sched.c: 34: sched_bTicked = 0;;
   503   0007FC  0E00               	movlw	0
   504   0007FE  6E17               	movwf	(_sched_bTicked+1)^0,c
   505   000800  0E00               	movlw	0
   506   000802  6E16               	movwf	_sched_bTicked^0,c
   507                           
   508                           ;sched.c: 36: TASK_vTaskAppInit();
   509   000804  EC98  F006         	call	_TASK_vTaskAppInit	;wreg free
   510   000808                     l2096:
   511   000808  FFFF               	dw	65535	; assembler added errata NOP
   512                           
   513                           ;sched.c: 39: {;sched.c: 40: if(sched_bTicked)
   514   00080A  5016               	movf	_sched_bTicked^0,w,c
   515   00080C  1017               	iorwf	(_sched_bTicked+1)^0,w,c
   516   00080E  B4D8               	btfsc	status,2,c
   517   000810  D7FB               	goto	l2096
   518                           
   519                           ;sched.c: 41: {;sched.c: 42: sched_bTicked = 0;;
   520   000812  0E00               	movlw	0
   521   000814  6E17               	movwf	(_sched_bTicked+1)^0,c
   522   000816  0E00               	movlw	0
   523   000818  6E16               	movwf	_sched_bTicked^0,c
   524                           
   525                           ;sched.c: 43: TASK_vTask1ms();
   526   00081A  ECA8  F006         	call	_TASK_vTask1ms	;wreg free
   527                           
   528                           ;sched.c: 45: if(sched_gTick10ms == 10)
   529   00081E  0E0A               	movlw	10
   530   000820  1820               	xorwf	_sched_gTick10ms^0,w,c
   531   000822  A4D8               	btfss	status,2,c
   532   000824  D004               	goto	l2108
   533                           
   534                           ;sched.c: 46: {;sched.c: 47: sched_gTick10ms = 0;
   535   000826  0E00               	movlw	0
   536   000828  6E20               	movwf	_sched_gTick10ms^0,c
   537                           
   538                           ;sched.c: 48: TASK_vTask10ms();
   539   00082A  ECAF  F006         	call	_TASK_vTask10ms	;wreg free
   540   00082E                     l2108:
   541   00082E  FFFF               	dw	65535	; assembler added errata NOP
   542                           
   543                           ;sched.c: 49: };sched.c: 50: if(sched_gTick100ms == 100)
   544   000830  0E64               	movlw	100
   545   000832  181F               	xorwf	_sched_gTick100ms^0,w,c
   546   000834  A4D8               	btfss	status,2,c
   547   000836  D004               	goto	l2114
   548                           
   549                           ;sched.c: 51: {;sched.c: 52: sched_gTick100ms = 0;
   550   000838  0E00               	movlw	0
   551   00083A  6E1F               	movwf	_sched_gTick100ms^0,c
   552                           
   553                           ;sched.c: 53: TASK_vTask100ms();
   554   00083C  ECB7  F006         	call	_TASK_vTask100ms	;wreg free
   555   000840                     l2114:
   556   000840  FFFF               	dw	65535	; assembler added errata NOP
   557                           
   558                           ;sched.c: 54: };sched.c: 55: if(sched_gTick1s == 1000)
   559   000842  0EE8               	movlw	232
   560   000844  1818               	xorwf	_sched_gTick1s^0,w,c
   561   000846  E1E0               	bnz	l2096
   562   000848  0E03               	movlw	3
   563   00084A  1819               	xorwf	(_sched_gTick1s+1)^0,w,c
   564   00084C  A4D8               	btfss	status,2,c
   565   00084E  D7DC               	goto	l2096
   566                           
   567                           ;sched.c: 56: {;sched.c: 57: sched_gTick1s = 0;
   568   000850  0E00               	movlw	0
   569   000852  6E19               	movwf	(_sched_gTick1s+1)^0,c
   570   000854  0E00               	movlw	0
   571   000856  6E18               	movwf	_sched_gTick1s^0,c
   572                           
   573                           ;sched.c: 58: TASK_vTask1s();
   574   000858  ECB4  F006         	call	_TASK_vTask1s	;wreg free
   575   00085C  D7D5               	goto	l2096
   576   00085E  FFFF               	dw	65535	; errata NOP
   577   000860                     __end_of_SCHED_vStartScheduler:
   578                           	callstack 0
   579                           
   580 ;; *************** function _TASK_vTaskAppInit *****************
   581 ;; Defined at:
   582 ;;		line 6 in file "tasks.c"
   583 ;; Parameters:    Size  Location     Type
   584 ;;		None
   585 ;; Auto vars:     Size  Location     Type
   586 ;;		None
   587 ;; Return value:  Size  Location     Type
   588 ;;                  1    wreg      void 
   589 ;; Registers used:
   590 ;;		wreg, status,2, status,0, cstack
   591 ;; Tracked objects:
   592 ;;		On entry : 0/0
   593 ;;		On exit  : 0/0
   594 ;;		Unchanged: 0/0
   595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   600 ;;Total ram usage:        0 bytes
   601 ;; Hardware stack levels used: 1
   602 ;; Hardware stack levels required when called: 5
   603 ;; This function calls:
   604 ;;		_LIGHTS_BrakeInit
   605 ;;		_LIGHTS_HeadLampInit
   606 ;;		_SGL_BlinkersInit
   607 ;; This function is called by:
   608 ;;		_SCHED_vStartScheduler
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           	psect	text2
   613   000D30                     __ptext2:
   614                           	callstack 0
   615   000D30                     _TASK_vTaskAppInit:
   616                           	callstack 0
   617   000D30  FFFF               	dw	65535	; assembler added errata NOP
   618                           
   619                           ;tasks.c: 8: SGL_BlinkersInit();
   620                           
   621                           ;incstack = 0
   622   000D32  EC9D  F005         	call	_SGL_BlinkersInit	;wreg free
   623                           
   624                           ;tasks.c: 9: LIGHTS_BrakeInit();
   625   000D36  EC6D  F006         	call	_LIGHTS_BrakeInit	;wreg free
   626                           
   627                           ;tasks.c: 10: LIGHTS_HeadLampInit();
   628   000D3A  EC21  F006         	call	_LIGHTS_HeadLampInit	;wreg free
   629   000D3E  0012               	return		;funcret
   630   000D40  FFFF               	dw	65535	; errata NOP
   631   000D42                     __end_of_TASK_vTaskAppInit:
   632                           	callstack 0
   633                           
   634 ;; *************** function _SGL_BlinkersInit *****************
   635 ;; Defined at:
   636 ;;		line 217 in file "sgl.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;		None
   639 ;; Auto vars:     Size  Location     Type
   640 ;;		None
   641 ;; Return value:  Size  Location     Type
   642 ;;                  1    wreg      void 
   643 ;; Registers used:
   644 ;;		wreg, status,2, status,0
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   654 ;;Total ram usage:        0 bytes
   655 ;; Hardware stack levels used: 1
   656 ;; Hardware stack levels required when called: 2
   657 ;; This function calls:
   658 ;;		Nothing
   659 ;; This function is called by:
   660 ;;		_TASK_vTaskAppInit
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           	psect	text3
   665   000B3A                     __ptext3:
   666                           	callstack 0
   667   000B3A                     _SGL_BlinkersInit:
   668                           	callstack 0
   669   000B3A  FFFF               	dw	65535	; assembler added errata NOP
   670                           
   671                           ;sgl.c: 219: blinkerSM._currentState = SGL_BlinkPasiveState;
   672                           
   673                           ;incstack = 0
   674   000B3C  0ED6               	movlw	low _SGL_BlinkPasiveState
   675   000B3E  6E21               	movwf	_blinkerSM^0,c
   676   000B40  0E01               	movlw	high _SGL_BlinkPasiveState
   677   000B42  6E22               	movwf	(_blinkerSM+1)^0,c
   678                           
   679                           ;sgl.c: 220: blinkerSM._pollEvents = SGL_BlinkEventPoll;
   680   000B44  0E74               	movlw	low _SGL_BlinkEventPoll
   681   000B46  6E23               	movwf	(_blinkerSM+2)^0,c
   682   000B48  0E0B               	movlw	high _SGL_BlinkEventPoll
   683   000B4A  6E24               	movwf	(_blinkerSM+3)^0,c
   684                           
   685                           ;sgl.c: 221: blinkerSM.pollAvarie = 0;
   686   000B4C  0E00               	movlw	0
   687   000B4E  6E27               	movwf	(_blinkerSM+6)^0,c
   688                           
   689                           ;sgl.c: 222: blinkerSM.firstEntry = 1;
   690   000B50  0E00               	movlw	0
   691   000B52  6E26               	movwf	(_blinkerSM+5)^0,c
   692   000B54  0E01               	movlw	1
   693   000B56  6E25               	movwf	(_blinkerSM+4)^0,c
   694                           
   695                           ;sgl.c: 223: blinkerSM.pollLeftSwitch = 0;
   696   000B58  0E00               	movlw	0
   697   000B5A  6E28               	movwf	(_blinkerSM+7)^0,c
   698                           
   699                           ;sgl.c: 224: blinkerSM.pollRightSwitch = 0;
   700   000B5C  0E00               	movlw	0
   701   000B5E  6E29               	movwf	(_blinkerSM+8)^0,c
   702                           
   703                           ;sgl.c: 225: blinkerSM.holdSwitch = 0;
   704   000B60  0E00               	movlw	0
   705   000B62  6E2A               	movwf	(_blinkerSM+9)^0,c
   706                           
   707                           ;sgl.c: 226: blinkerSM.globalToggle = 1;
   708   000B64  0E01               	movlw	1
   709   000B66  6E2B               	movwf	(_blinkerSM+10)^0,c
   710                           
   711                           ;sgl.c: 227: blinkerSM.globalCounter = 0;
   712   000B68  0E00               	movlw	0
   713   000B6A  6E2D               	movwf	(_blinkerSM+12)^0,c
   714   000B6C  0E00               	movlw	0
   715   000B6E  6E2C               	movwf	(_blinkerSM+11)^0,c
   716   000B70  0012               	return		;funcret
   717   000B72  FFFF               	dw	65535	; errata NOP
   718   000B74                     __end_of_SGL_BlinkersInit:
   719                           	callstack 0
   720                           
   721 ;; *************** function _LIGHTS_HeadLampInit *****************
   722 ;; Defined at:
   723 ;;		line 110 in file "lights.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;		None
   728 ;; Return value:  Size  Location     Type
   729 ;;                  1    wreg      void 
   730 ;; Registers used:
   731 ;;		wreg, status,2, status,0
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   741 ;;Total ram usage:        0 bytes
   742 ;; Hardware stack levels used: 1
   743 ;; Hardware stack levels required when called: 2
   744 ;; This function calls:
   745 ;;		Nothing
   746 ;; This function is called by:
   747 ;;		_TASK_vTaskAppInit
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           	psect	text4
   752   000C42                     __ptext4:
   753                           	callstack 0
   754   000C42                     _LIGHTS_HeadLampInit:
   755                           	callstack 0
   756   000C42  FFFF               	dw	65535	; assembler added errata NOP
   757                           
   758                           ;lights.c: 112: headLightSM._currentState = SGL_HeadLightPasiveState;
   759                           
   760                           ;incstack = 0
   761   000C44  0ED6               	movlw	low _SGL_HeadLightPasiveState
   762   000C46  6E01               	movwf	_headLightSM^0,c
   763   000C48  0E03               	movlw	high _SGL_HeadLightPasiveState
   764   000C4A  6E02               	movwf	(_headLightSM+1)^0,c
   765                           
   766                           ;lights.c: 113: headLightSM._pollEvents = SGL_HeadLightEventPoll;
   767   000C4C  0E6C               	movlw	low _SGL_HeadLightEventPoll
   768   000C4E  6E03               	movwf	(_headLightSM+2)^0,c
   769   000C50  0E0C               	movlw	high _SGL_HeadLightEventPoll
   770   000C52  6E04               	movwf	(_headLightSM+3)^0,c
   771                           
   772                           ;lights.c: 114: headLightSM.firstEntry = 1;
   773   000C54  0E00               	movlw	0
   774   000C56  6E06               	movwf	(_headLightSM+5)^0,c
   775   000C58  0E01               	movlw	1
   776   000C5A  6E05               	movwf	(_headLightSM+4)^0,c
   777                           
   778                           ;lights.c: 115: headLightSM.faruri = 0;
   779   000C5C  0E00               	movlw	0
   780   000C5E  6E07               	movwf	(_headLightSM+6)^0,c
   781                           
   782                           ;lights.c: 116: headLightSM.lightLevel = 0;
   783   000C60  0E00               	movlw	0
   784   000C62  6E09               	movwf	(_headLightSM+8)^0,c
   785   000C64  0E00               	movlw	0
   786   000C66  6E08               	movwf	(_headLightSM+7)^0,c
   787   000C68  0012               	return		;funcret
   788   000C6A  FFFF               	dw	65535	; errata NOP
   789   000C6C                     __end_of_LIGHTS_HeadLampInit:
   790                           	callstack 0
   791                           
   792 ;; *************** function _LIGHTS_BrakeInit *****************
   793 ;; Defined at:
   794 ;;		line 5 in file "lights.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;		None
   797 ;; Auto vars:     Size  Location     Type
   798 ;;		None
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, status,2, status,0, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   812 ;;Total ram usage:        0 bytes
   813 ;; Hardware stack levels used: 1
   814 ;; Hardware stack levels required when called: 4
   815 ;; This function calls:
   816 ;;		_IOC_vSetOutputPort
   817 ;; This function is called by:
   818 ;;		_TASK_vTaskAppInit
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text5
   823   000CDA                     __ptext5:
   824                           	callstack 0
   825   000CDA                     _LIGHTS_BrakeInit:
   826                           	callstack 0
   827   000CDA  FFFF               	dw	65535	; assembler added errata NOP
   828                           
   829                           ;lights.c: 7: IOC_vSetOutputPort(IOC_LSF, 0);
   830                           
   831                           ;incstack = 0
   832   000CDC  0E01               	movlw	1
   833   000CDE  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
   834   000CE0  0E05               	movlw	5
   835   000CE2  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
   836   000CE4  0E00               	movlw	0
   837   000CE6  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
   838   000CE8  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
   839   000CEC  0012               	return		;funcret
   840   000CEE  FFFF               	dw	65535	; errata NOP
   841   000CF0                     __end_of_LIGHTS_BrakeInit:
   842                           	callstack 0
   843                           
   844 ;; *************** function _TASK_vTask1s *****************
   845 ;; Defined at:
   846 ;;		line 31 in file "tasks.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;		None
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      void 
   853 ;; Registers used:
   854 ;;		None
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   864 ;;Total ram usage:        0 bytes
   865 ;; Hardware stack levels used: 1
   866 ;; Hardware stack levels required when called: 2
   867 ;; This function calls:
   868 ;;		Nothing
   869 ;; This function is called by:
   870 ;;		_SCHED_vStartScheduler
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text6
   875   000D68                     __ptext6:
   876                           	callstack 0
   877   000D68                     _TASK_vTask1s:
   878                           	callstack 0
   879   000D68  FFFF               	dw	65535	; assembler added errata NOP
   880                           
   881                           ;incstack = 0
   882   000D6A  0012               	return		;funcret
   883   000D6C  FFFF               	dw	65535	; errata NOP
   884   000D6E                     __end_of_TASK_vTask1s:
   885                           	callstack 0
   886                           
   887 ;; *************** function _TASK_vTask1ms *****************
   888 ;; Defined at:
   889 ;;		line 15 in file "tasks.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;		None
   892 ;; Auto vars:     Size  Location     Type
   893 ;;		None
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   907 ;;Total ram usage:        0 bytes
   908 ;; Hardware stack levels used: 1
   909 ;; Hardware stack levels required when called: 7
   910 ;; This function calls:
   911 ;;		_LIGHTS_BrakeRun
   912 ;;		_SGL_BlinkersRun
   913 ;; This function is called by:
   914 ;;		_SCHED_vStartScheduler
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text7
   919   000D50                     __ptext7:
   920                           	callstack 0
   921   000D50                     _TASK_vTask1ms:
   922                           	callstack 0
   923   000D50  FFFF               	dw	65535	; assembler added errata NOP
   924                           
   925                           ;tasks.c: 17: SGL_BlinkersRun();
   926                           
   927                           ;incstack = 0
   928   000D52  EC92  F004         	call	_SGL_BlinkersRun	;wreg free
   929                           
   930                           ;tasks.c: 18: LIGHTS_BrakeRun();
   931   000D56  EC08  F006         	call	_LIGHTS_BrakeRun	;wreg free
   932   000D5A  0012               	return		;funcret
   933   000D5C  FFFF               	dw	65535	; errata NOP
   934   000D5E                     __end_of_TASK_vTask1ms:
   935                           	callstack 0
   936                           
   937 ;; *************** function _SGL_BlinkersRun *****************
   938 ;; Defined at:
   939 ;;		line 230 in file "sgl.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;		None
   942 ;; Auto vars:     Size  Location     Type
   943 ;;		None
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      void 
   946 ;; Registers used:
   947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   957 ;;Total ram usage:        0 bytes
   958 ;; Hardware stack levels used: 1
   959 ;; Hardware stack levels required when called: 6
   960 ;; This function calls:
   961 ;;		_SGL_BlinkEventPoll
   962 ;;		_SGL_BlinkPasiveState
   963 ;;		_SGL_BlinkSwitchOffState
   964 ;;		_SGL_BlinkSwitchOnState
   965 ;; This function is called by:
   966 ;;		_TASK_vTask1ms
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text8
   971   000924                     __ptext8:
   972                           	callstack 0
   973   000924                     _SGL_BlinkersRun:
   974                           	callstack 0
   975   000924  FFFF               	dw	65535	; assembler added errata NOP
   976                           
   977                           ;sgl.c: 232: if(0 != blinkerSM._currentState)
   978                           
   979                           ;incstack = 0
   980   000926  5021               	movf	_blinkerSM^0,w,c
   981   000928  1022               	iorwf	(_blinkerSM+1)^0,w,c
   982   00092A  B4D8               	btfsc	status,2,c
   983   00092C  D00E               	goto	u1609
   984                           
   985                           ;sgl.c: 233: {;sgl.c: 234: (*blinkerSM._currentState)();
   986   00092E  D801               	call	u1608
   987   000930  D00C               	goto	u1609
   988   000932                     u1608:
   989   000932  FFFF               	dw	65535	; assembler added errata NOP
   990   000934  0005               	push	
   991   000936  6EFA               	movwf	pclath,c
   992   000938  5021               	movf	_blinkerSM^0,w,c
   993   00093A  6EFD               	movwf	tosl,c
   994   00093C  5022               	movf	(_blinkerSM+1)^0,w,c
   995   00093E  6EFE               	movwf	tosh,c
   996   000940  50F8               	movf	tblptru,w,c
   997   000942  6EFF               	movwf	tosu,c
   998   000944  50FA               	movf	pclath,w,c
   999   000946  0012               	return		;indir
  1000   000948  FFFF               	dw	65535	; errata NOP
  1001   00094A                     u1609:
  1002   00094A  FFFF               	dw	65535	; assembler added errata NOP
  1003                           
  1004                           ;sgl.c: 235: };sgl.c: 236: if(0 != blinkerSM._pollEvents)
  1005   00094C  5023               	movf	(_blinkerSM+2)^0,w,c
  1006   00094E  1024               	iorwf	(_blinkerSM+3)^0,w,c
  1007   000950  B4D8               	btfsc	status,2,c
  1008   000952  D010               	goto	u1629
  1009                           
  1010                           ;sgl.c: 237: {;sgl.c: 238: (*blinkerSM._pollEvents)();
  1011   000954  EE20  F023         	lfsr	2,_blinkerSM+2
  1012   000958  D801               	call	u1628
  1013   00095A  D00C               	goto	u1629
  1014   00095C                     u1628:
  1015   00095C  FFFF               	dw	65535	; assembler added errata NOP
  1016   00095E  0005               	push	
  1017   000960  6EFA               	movwf	pclath,c
  1018   000962  50DE               	movf	postinc2,w,c
  1019   000964  6EFD               	movwf	tosl,c
  1020   000966  50DE               	movf	postinc2,w,c
  1021   000968  6EFE               	movwf	tosh,c
  1022   00096A  50F8               	movf	tblptru,w,c
  1023   00096C  6EFF               	movwf	tosu,c
  1024   00096E  50FA               	movf	pclath,w,c
  1025   000970  0012               	return		;indir
  1026   000972  FFFF               	dw	65535	; errata NOP
  1027   000974                     u1629:
  1028   000974  FFFF               	dw	65535	; assembler added errata NOP
  1029   000976  0012               	return		;funcret
  1030   000978  FFFF               	dw	65535	; errata NOP
  1031   00097A                     __end_of_SGL_BlinkersRun:
  1032                           	callstack 0
  1033                           
  1034 ;; *************** function _SGL_BlinkPasiveState *****************
  1035 ;; Defined at:
  1036 ;;		line 65 in file "sgl.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1052 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1053 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1054 ;;Total ram usage:        2 bytes
  1055 ;; Hardware stack levels used: 1
  1056 ;; Hardware stack levels required when called: 5
  1057 ;; This function calls:
  1058 ;;		_SGL_setAllHazardLights
  1059 ;;		_SGL_toggleAllHazardLights
  1060 ;; This function is called by:
  1061 ;;		_SGL_BlinkSwitchOnState
  1062 ;;		_SGL_BlinkSwitchOffState
  1063 ;;		_SGL_BlinkersInit
  1064 ;;		_SGL_BlinkersRun
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text9
  1069   0001D6                     __ptext9:
  1070                           	callstack 0
  1071   0001D6                     _SGL_BlinkPasiveState:
  1072                           	callstack 0
  1073   0001D6  FFFF               	dw	65535	; assembler added errata NOP
  1074                           
  1075                           ;sgl.c: 67: static T_U8 firstEntry = 1;;sgl.c: 70: if(blinkerSM.firstEntry == 1)
  1076                           
  1077                           ;incstack = 0
  1078   0001D8  0425               	decf	(_blinkerSM+4)^0,w,c
  1079   0001DA  1026               	iorwf	(_blinkerSM+5)^0,w,c
  1080   0001DC  A4D8               	btfss	status,2,c
  1081   0001DE  D004               	goto	l1872
  1082                           
  1083                           ;sgl.c: 71: {;sgl.c: 72: blinkerSM.firstEntry = 0;
  1084   0001E0  0E00               	movlw	0
  1085   0001E2  6E26               	movwf	(_blinkerSM+5)^0,c
  1086   0001E4  0E00               	movlw	0
  1087   0001E6  6E25               	movwf	(_blinkerSM+4)^0,c
  1088   0001E8                     l1872:
  1089   0001E8  FFFF               	dw	65535	; assembler added errata NOP
  1090                           
  1091                           ;sgl.c: 73: };sgl.c: 76: if(1 == blinkerSM.pollAvarie)
  1092   0001EA  0427               	decf	(_blinkerSM+6)^0,w,c
  1093   0001EC  A4D8               	btfss	status,2,c
  1094   0001EE  D024               	goto	l1888
  1095                           
  1096                           ;sgl.c: 77: {;sgl.c: 78: if(1 == firstEntry)
  1097   0001F0  0453               	decf	SGL_BlinkPasiveState@firstEntry^0,w,c
  1098   0001F2  A4D8               	btfss	status,2,c
  1099   0001F4  D00B               	goto	l1880
  1100                           
  1101                           ;sgl.c: 79: {;sgl.c: 80: SGL_setAllHazardLights(blinkerSM.globalToggle);
  1102   0001F6  502B               	movf	(_blinkerSM+10)^0,w,c
  1103   0001F8  6E4C               	movwf	??_SGL_BlinkPasiveState^0,c
  1104   0001FA  6A4D               	clrf	(??_SGL_BlinkPasiveState+1)^0,c
  1105   0001FC  C04C  F04A         	movff	??_SGL_BlinkPasiveState,SGL_setAllHazardLights@toggle
  1106   000200  C04D  F04B         	movff	??_SGL_BlinkPasiveState+1,SGL_setAllHazardLights@toggle+1
  1107   000204  ECB7  F003         	call	_SGL_setAllHazardLights	;wreg free
  1108                           
  1109                           ;sgl.c: 81: firstEntry = 0;
  1110   000208  0E00               	movlw	0
  1111   00020A  6E53               	movwf	SGL_BlinkPasiveState@firstEntry^0,c
  1112   00020C                     l1880:
  1113   00020C  FFFF               	dw	65535	; assembler added errata NOP
  1114                           
  1115                           ;sgl.c: 82: };sgl.c: 83: if(500 == blinkerSM.globalCounter)
  1116   00020E  0EF4               	movlw	244
  1117   000210  182C               	xorwf	(_blinkerSM+11)^0,w,c
  1118   000212  E10E               	bnz	l1886
  1119   000214  042D               	decf	(_blinkerSM+12)^0,w,c
  1120   000216  A4D8               	btfss	status,2,c
  1121   000218  D00B               	goto	l1886
  1122                           
  1123                           ;sgl.c: 84: {;sgl.c: 85: SGL_toggleAllHazardLights(&blinkerSM.globalToggle);
  1124   00021A  0E2B               	movlw	low (_blinkerSM+10)
  1125   00021C  6E4A               	movwf	SGL_toggleAllHazardLights@toggle^0,c
  1126   00021E  0E00               	movlw	high (_blinkerSM+10)
  1127   000220  6E4B               	movwf	(SGL_toggleAllHazardLights@toggle+1)^0,c
  1128   000222  EC79  F003         	call	_SGL_toggleAllHazardLights	;wreg free
  1129                           
  1130                           ;sgl.c: 86: blinkerSM.globalCounter = 0;
  1131   000226  0E00               	movlw	0
  1132   000228  6E2D               	movwf	(_blinkerSM+12)^0,c
  1133   00022A  0E00               	movlw	0
  1134   00022C  6E2C               	movwf	(_blinkerSM+11)^0,c
  1135                           
  1136                           ;sgl.c: 87: }
  1137   00022E  D014               	goto	l1896
  1138   000230                     l1886:
  1139   000230  FFFF               	dw	65535	; assembler added errata NOP
  1140                           
  1141                           ;sgl.c: 88: else;sgl.c: 89: {;sgl.c: 90: blinkerSM.globalCounter++;
  1142   000232  4A2C               	infsnz	(_blinkerSM+11)^0,f,c
  1143   000234  2A2D               	incf	(_blinkerSM+12)^0,f,c
  1144   000236  D010               	goto	l1896
  1145   000238                     l1888:
  1146   000238  FFFF               	dw	65535	; assembler added errata NOP
  1147                           
  1148                           ;sgl.c: 93: else;sgl.c: 94: {;sgl.c: 95: if((firstEntry == 0) && blinkerSM.globalToggle 
      +                          == 0)
  1149   00023A  5053               	movf	SGL_BlinkPasiveState@firstEntry^0,w,c
  1150   00023C  A4D8               	btfss	status,2,c
  1151   00023E  D009               	goto	l1894
  1152   000240  502B               	movf	(_blinkerSM+10)^0,w,c
  1153   000242  A4D8               	btfss	status,2,c
  1154   000244  D006               	goto	l1894
  1155                           
  1156                           ;sgl.c: 96: {;sgl.c: 97: SGL_setAllHazardLights(&blinkerSM.globalToggle);
  1157   000246  0E2B               	movlw	low (_blinkerSM+10)
  1158   000248  6E4A               	movwf	SGL_setAllHazardLights@toggle^0,c
  1159   00024A  0E00               	movlw	high (_blinkerSM+10)
  1160   00024C  6E4B               	movwf	(SGL_setAllHazardLights@toggle+1)^0,c
  1161   00024E  ECB7  F003         	call	_SGL_setAllHazardLights	;wreg free
  1162   000252                     l1894:
  1163   000252  FFFF               	dw	65535	; assembler added errata NOP
  1164                           
  1165                           ;sgl.c: 98: };sgl.c: 99: firstEntry = 1;
  1166   000254  0E01               	movlw	1
  1167   000256  6E53               	movwf	SGL_BlinkPasiveState@firstEntry^0,c
  1168   000258                     l1896:
  1169   000258  FFFF               	dw	65535	; assembler added errata NOP
  1170                           
  1171                           ;sgl.c: 100: };sgl.c: 103: if( ((1 == blinkerSM.pollLeftSwitch) || (1 == blinkerSM.pollR
      +                          ightSwitch)) && 0 == blinkerSM.pollAvarie )
  1172   00025A  0428               	decf	(_blinkerSM+7)^0,w,c
  1173   00025C  B4D8               	btfsc	status,2,c
  1174   00025E  D003               	goto	u1380
  1175   000260  0429               	decf	(_blinkerSM+8)^0,w,c
  1176   000262  A4D8               	btfss	status,2,c
  1177   000264  D012               	goto	l288
  1178   000266                     u1380:
  1179   000266  FFFF               	dw	65535	; assembler added errata NOP
  1180   000268  5027               	movf	(_blinkerSM+6)^0,w,c
  1181   00026A  A4D8               	btfss	status,2,c
  1182   00026C  D00E               	goto	l288
  1183                           
  1184                           ;sgl.c: 104: {;sgl.c: 105: blinkerSM._currentState = SGL_BlinkSwitchOnState;
  1185   00026E  0E90               	movlw	low _SGL_BlinkSwitchOnState
  1186   000270  6E21               	movwf	_blinkerSM^0,c
  1187   000272  0E02               	movlw	high _SGL_BlinkSwitchOnState
  1188   000274  6E22               	movwf	(_blinkerSM+1)^0,c
  1189                           
  1190                           ;sgl.c: 106: blinkerSM.firstEntry = 1;
  1191   000276  0E00               	movlw	0
  1192   000278  6E26               	movwf	(_blinkerSM+5)^0,c
  1193   00027A  0E01               	movlw	1
  1194   00027C  6E25               	movwf	(_blinkerSM+4)^0,c
  1195                           
  1196                           ;sgl.c: 107: SGL_setAllHazardLights(0);
  1197   00027E  0E00               	movlw	0
  1198   000280  6E4A               	movwf	SGL_setAllHazardLights@toggle^0,c
  1199   000282  0E00               	movlw	0
  1200   000284  6E4B               	movwf	(SGL_setAllHazardLights@toggle+1)^0,c
  1201   000286  ECB7  F003         	call	_SGL_setAllHazardLights	;wreg free
  1202   00028A                     l288:
  1203   00028A  FFFF               	dw	65535	; assembler added errata NOP
  1204   00028C  0012               	return		;funcret
  1205   00028E  FFFF               	dw	65535	; errata NOP
  1206   000290                     __end_of_SGL_BlinkPasiveState:
  1207                           	callstack 0
  1208                           
  1209 ;; *************** function _SGL_BlinkSwitchOffState *****************
  1210 ;; Defined at:
  1211 ;;		line 159 in file "sgl.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1227 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1228 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1229 ;;Total ram usage:        5 bytes
  1230 ;; Hardware stack levels used: 1
  1231 ;; Hardware stack levels required when called: 5
  1232 ;; This function calls:
  1233 ;;		_SGL_toggleSideHazardLights
  1234 ;; This function is called by:
  1235 ;;		_SGL_BlinkSwitchOnState
  1236 ;;		_SGL_BlinkersRun
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text10
  1241   000114                     __ptext10:
  1242                           	callstack 0
  1243   000114                     _SGL_BlinkSwitchOffState:
  1244                           	callstack 0
  1245   000114  FFFF               	dw	65535	; assembler added errata NOP
  1246                           
  1247                           ;sgl.c: 161: static T_U8 counterRuns = 0;;sgl.c: 162: static T_U8 extraToggle = 0;;sgl.c
      +                          : 165: if(blinkerSM.firstEntry == 1)
  1248                           
  1249                           ;incstack = 0
  1250   000116  0425               	decf	(_blinkerSM+4)^0,w,c
  1251   000118  1026               	iorwf	(_blinkerSM+5)^0,w,c
  1252   00011A  A4D8               	btfss	status,2,c
  1253   00011C  D009               	goto	l1956
  1254                           
  1255                           ;sgl.c: 166: {;sgl.c: 167: blinkerSM.firstEntry = 0;
  1256   00011E  0E00               	movlw	0
  1257   000120  6E26               	movwf	(_blinkerSM+5)^0,c
  1258   000122  0E00               	movlw	0
  1259   000124  6E25               	movwf	(_blinkerSM+4)^0,c
  1260                           
  1261                           ;sgl.c: 168: if(blinkerSM.globalToggle == 0)
  1262   000126  502B               	movf	(_blinkerSM+10)^0,w,c
  1263   000128  A4D8               	btfss	status,2,c
  1264   00012A  D002               	goto	l1956
  1265                           
  1266                           ;sgl.c: 169: {;sgl.c: 170: extraToggle = 1;
  1267   00012C  0E01               	movlw	1
  1268   00012E  6E1C               	movwf	SGL_BlinkSwitchOffState@extraToggle^0,c
  1269   000130                     l1956:
  1270   000130  FFFF               	dw	65535	; assembler added errata NOP
  1271                           
  1272                           ;sgl.c: 171: };sgl.c: 172: };sgl.c: 176: if(counterRuns <= (9+extraToggle))
  1273   000132  501D               	movf	SGL_BlinkSwitchOffState@counterRuns^0,w,c
  1274   000134  6E4D               	movwf	??_SGL_BlinkSwitchOffState^0,c
  1275   000136  6A4E               	clrf	(??_SGL_BlinkSwitchOffState+1)^0,c
  1276   000138  501C               	movf	SGL_BlinkSwitchOffState@extraToggle^0,w,c
  1277   00013A  6E4F               	movwf	(??_SGL_BlinkSwitchOffState+2)^0,c
  1278   00013C  6A50               	clrf	(??_SGL_BlinkSwitchOffState+3)^0,c
  1279   00013E  0E09               	movlw	9
  1280   000140  264F               	addwf	(??_SGL_BlinkSwitchOffState+2)^0,f,c
  1281   000142  0E00               	movlw	0
  1282   000144  2250               	addwfc	(??_SGL_BlinkSwitchOffState+3)^0,f,c
  1283   000146  504D               	movf	??_SGL_BlinkSwitchOffState^0,w,c
  1284   000148  5C4F               	subwf	(??_SGL_BlinkSwitchOffState+2)^0,w,c
  1285   00014A  5050               	movf	(??_SGL_BlinkSwitchOffState+3)^0,w,c
  1286   00014C  0A80               	xorlw	128
  1287   00014E  6E51               	movwf	(??_SGL_BlinkSwitchOffState+4)^0,c
  1288   000150  504E               	movf	(??_SGL_BlinkSwitchOffState+1)^0,w,c
  1289   000152  0A80               	xorlw	128
  1290   000154  5851               	subwfb	(??_SGL_BlinkSwitchOffState+4)^0,w,c
  1291   000156  A0D8               	btfss	status,0,c
  1292   000158  D018               	goto	l1968
  1293                           
  1294                           ;sgl.c: 177: {;sgl.c: 178: if(blinkerSM.globalCounter == 500)
  1295   00015A  0EF4               	movlw	244
  1296   00015C  182C               	xorwf	(_blinkerSM+11)^0,w,c
  1297   00015E  E111               	bnz	l1966
  1298   000160  042D               	decf	(_blinkerSM+12)^0,w,c
  1299   000162  A4D8               	btfss	status,2,c
  1300   000164  D00E               	goto	l1966
  1301                           
  1302                           ;sgl.c: 179: {;sgl.c: 180: SGL_toggleSideHazardLights(&blinkerSM.globalToggle, blinkerSM
      +                          .holdSwitch);
  1303   000166  0E2B               	movlw	low (_blinkerSM+10)
  1304   000168  6E4A               	movwf	SGL_toggleSideHazardLights@toggle^0,c
  1305   00016A  0E00               	movlw	high (_blinkerSM+10)
  1306   00016C  6E4B               	movwf	(SGL_toggleSideHazardLights@toggle+1)^0,c
  1307   00016E  C02A  F04C         	movff	_blinkerSM+9,SGL_toggleSideHazardLights@side
  1308   000172  EC33  F002         	call	_SGL_toggleSideHazardLights	;wreg free
  1309                           
  1310                           ;sgl.c: 181: blinkerSM.globalCounter = 0;
  1311   000176  0E00               	movlw	0
  1312   000178  6E2D               	movwf	(_blinkerSM+12)^0,c
  1313   00017A  0E00               	movlw	0
  1314   00017C  6E2C               	movwf	(_blinkerSM+11)^0,c
  1315                           
  1316                           ;sgl.c: 182: counterRuns++;
  1317   00017E  2A1D               	incf	SGL_BlinkSwitchOffState@counterRuns^0,f,c
  1318                           
  1319                           ;sgl.c: 183: }
  1320   000180  D009               	goto	l1970
  1321   000182                     l1966:
  1322   000182  FFFF               	dw	65535	; assembler added errata NOP
  1323                           
  1324                           ;sgl.c: 184: else;sgl.c: 185: {;sgl.c: 186: blinkerSM.globalCounter++;
  1325   000184  4A2C               	infsnz	(_blinkerSM+11)^0,f,c
  1326   000186  2A2D               	incf	(_blinkerSM+12)^0,f,c
  1327   000188  D005               	goto	l1970
  1328   00018A                     l1968:
  1329   00018A  FFFF               	dw	65535	; assembler added errata NOP
  1330                           
  1331                           ;sgl.c: 189: else;sgl.c: 190: {;sgl.c: 191: blinkerSM.globalCounter = 0;
  1332   00018C  0E00               	movlw	0
  1333   00018E  6E2D               	movwf	(_blinkerSM+12)^0,c
  1334   000190  0E00               	movlw	0
  1335   000192  6E2C               	movwf	(_blinkerSM+11)^0,c
  1336   000194                     l1970:
  1337   000194  FFFF               	dw	65535	; assembler added errata NOP
  1338                           
  1339                           ;sgl.c: 192: };sgl.c: 195: if( 1 == blinkerSM.pollAvarie )
  1340   000196  0427               	decf	(_blinkerSM+6)^0,w,c
  1341   000198  A4D8               	btfss	status,2,c
  1342   00019A  D00E               	goto	l1980
  1343                           
  1344                           ;sgl.c: 196: {;sgl.c: 197: blinkerSM._currentState = SGL_BlinkPasiveState;
  1345   00019C  0ED6               	movlw	low _SGL_BlinkPasiveState
  1346   00019E  6E21               	movwf	_blinkerSM^0,c
  1347   0001A0  0E01               	movlw	high _SGL_BlinkPasiveState
  1348   0001A2  FFFF               	dw	65535	; assembler added errata NOP
  1349   0001A4  6E22               	movwf	(_blinkerSM+1)^0,c
  1350                           
  1351                           ;sgl.c: 198: blinkerSM.firstEntry = 1;
  1352   0001A6  0E00               	movlw	0
  1353   0001A8  6E26               	movwf	(_blinkerSM+5)^0,c
  1354   0001AA  0E01               	movlw	1
  1355   0001AC  6E25               	movwf	(_blinkerSM+4)^0,c
  1356                           
  1357                           ;sgl.c: 199: counterRuns = 0;
  1358   0001AE  0E00               	movlw	0
  1359   0001B0  6E1D               	movwf	SGL_BlinkSwitchOffState@counterRuns^0,c
  1360                           
  1361                           ;sgl.c: 200: extraToggle = 0;
  1362   0001B2  0E00               	movlw	0
  1363   0001B4  6E1C               	movwf	SGL_BlinkSwitchOffState@extraToggle^0,c
  1364                           
  1365                           ;sgl.c: 201: } else if( (1 == blinkerSM.pollLeftSwitch) || (1 == blinkerSM.pollRightSwit
      +                          ch) )
  1366   0001B6  D00C               	goto	l320
  1367   0001B8                     l1980:
  1368   0001B8  FFFF               	dw	65535	; assembler added errata NOP
  1369   0001BA  0428               	decf	(_blinkerSM+7)^0,w,c
  1370   0001BC  B4D8               	btfsc	status,2,c
  1371   0001BE  D003               	goto	u1530
  1372   0001C0  0429               	decf	(_blinkerSM+8)^0,w,c
  1373   0001C2  A4D8               	btfss	status,2,c
  1374   0001C4  D005               	goto	l320
  1375   0001C6                     u1530:
  1376   0001C6  FFFF               	dw	65535	; assembler added errata NOP
  1377                           
  1378                           ;sgl.c: 202: {;sgl.c: 203: blinkerSM._currentState = SGL_BlinkSwitchOnState;
  1379   0001C8  0E90               	movlw	low _SGL_BlinkSwitchOnState
  1380   0001CA  6E21               	movwf	_blinkerSM^0,c
  1381   0001CC  0E02               	movlw	high _SGL_BlinkSwitchOnState
  1382   0001CE  D7E9               	goto	L1
  1383   0001D0                     l320:
  1384   0001D0  FFFF               	dw	65535	; assembler added errata NOP
  1385   0001D2  0012               	return		;funcret
  1386   0001D4  FFFF               	dw	65535	; errata NOP
  1387   0001D6                     __end_of_SGL_BlinkSwitchOffState:
  1388                           	callstack 0
  1389                           
  1390 ;; *************** function _SGL_BlinkSwitchOnState *****************
  1391 ;; Defined at:
  1392 ;;		line 112 in file "sgl.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;		None
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;		None
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  1    wreg      void 
  1399 ;; Registers used:
  1400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1410 ;;Total ram usage:        0 bytes
  1411 ;; Hardware stack levels used: 1
  1412 ;; Hardware stack levels required when called: 5
  1413 ;; This function calls:
  1414 ;;		_SGL_setAllHazardLights
  1415 ;;		_SGL_setSideHazardLights
  1416 ;;		_SGL_toggleSideHazardLights
  1417 ;; This function is called by:
  1418 ;;		_SGL_BlinkPasiveState
  1419 ;;		_SGL_BlinkSwitchOffState
  1420 ;;		_SGL_BlinkersRun
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text11
  1425   000290                     __ptext11:
  1426                           	callstack 0
  1427   000290                     _SGL_BlinkSwitchOnState:
  1428                           	callstack 0
  1429   000290  FFFF               	dw	65535	; assembler added errata NOP
  1430                           
  1431                           ;sgl.c: 114: static T_U8 side = 0;;sgl.c: 115: static T_U8 firstEntry = 1;;sgl.c: 118: i
      +                          f(blinkerSM.firstEntry == 1)
  1432                           
  1433                           ;incstack = 0
  1434   000292  0425               	decf	(_blinkerSM+4)^0,w,c
  1435   000294  1026               	iorwf	(_blinkerSM+5)^0,w,c
  1436   000296  A4D8               	btfss	status,2,c
  1437   000298  D008               	goto	l1914
  1438                           
  1439                           ;sgl.c: 119: {;sgl.c: 121: side = blinkerSM.pollRightSwitch;
  1440   00029A  C029  F01E         	movff	_blinkerSM+8,SGL_BlinkSwitchOnState@side
  1441                           
  1442                           ;sgl.c: 122: blinkerSM.holdSwitch = side;
  1443   00029E  C01E  F02A         	movff	SGL_BlinkSwitchOnState@side,_blinkerSM+9
  1444                           
  1445                           ;sgl.c: 123: blinkerSM.firstEntry = 0;
  1446   0002A2  0E00               	movlw	0
  1447   0002A4  6E26               	movwf	(_blinkerSM+5)^0,c
  1448   0002A6  0E00               	movlw	0
  1449   0002A8  6E25               	movwf	(_blinkerSM+4)^0,c
  1450   0002AA                     l1914:
  1451   0002AA  FFFF               	dw	65535	; assembler added errata NOP
  1452                           
  1453                           ;sgl.c: 124: };sgl.c: 127: if(1 == firstEntry)
  1454   0002AC  0452               	decf	SGL_BlinkSwitchOnState@firstEntry^0,w,c
  1455   0002AE  A4D8               	btfss	status,2,c
  1456   0002B0  D007               	goto	l1920
  1457                           
  1458                           ;sgl.c: 128: {;sgl.c: 129: SGL_setSideHazardLights(blinkerSM.globalToggle, side);
  1459   0002B2  C01E  F04A         	movff	SGL_BlinkSwitchOnState@side,SGL_setSideHazardLights@side
  1460   0002B6  502B               	movf	(_blinkerSM+10)^0,w,c
  1461   0002B8  EC13  F005         	call	_SGL_setSideHazardLights
  1462                           
  1463                           ;sgl.c: 130: firstEntry = 0;
  1464   0002BC  0E00               	movlw	0
  1465   0002BE  6E52               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1466   0002C0                     l1920:
  1467   0002C0  FFFF               	dw	65535	; assembler added errata NOP
  1468                           
  1469                           ;sgl.c: 131: };sgl.c: 132: if(500 == blinkerSM.globalCounter)
  1470   0002C2  0EF4               	movlw	244
  1471   0002C4  182C               	xorwf	(_blinkerSM+11)^0,w,c
  1472   0002C6  E110               	bnz	l1926
  1473   0002C8  042D               	decf	(_blinkerSM+12)^0,w,c
  1474   0002CA  A4D8               	btfss	status,2,c
  1475   0002CC  D00D               	goto	l1926
  1476                           
  1477                           ;sgl.c: 133: {;sgl.c: 134: SGL_toggleSideHazardLights(&blinkerSM.globalToggle, side);
  1478   0002CE  0E2B               	movlw	low (_blinkerSM+10)
  1479   0002D0  6E4A               	movwf	SGL_toggleSideHazardLights@toggle^0,c
  1480   0002D2  0E00               	movlw	high (_blinkerSM+10)
  1481   0002D4  6E4B               	movwf	(SGL_toggleSideHazardLights@toggle+1)^0,c
  1482   0002D6  C01E  F04C         	movff	SGL_BlinkSwitchOnState@side,SGL_toggleSideHazardLights@side
  1483   0002DA  EC33  F002         	call	_SGL_toggleSideHazardLights	;wreg free
  1484                           
  1485                           ;sgl.c: 135: blinkerSM.globalCounter = 0;
  1486   0002DE  0E00               	movlw	0
  1487   0002E0  6E2D               	movwf	(_blinkerSM+12)^0,c
  1488   0002E2  0E00               	movlw	0
  1489   0002E4  6E2C               	movwf	(_blinkerSM+11)^0,c
  1490                           
  1491                           ;sgl.c: 136: }
  1492   0002E6  D003               	goto	l1928
  1493   0002E8                     l1926:
  1494   0002E8  FFFF               	dw	65535	; assembler added errata NOP
  1495                           
  1496                           ;sgl.c: 137: else;sgl.c: 138: {;sgl.c: 139: blinkerSM.globalCounter++;
  1497   0002EA  4A2C               	infsnz	(_blinkerSM+11)^0,f,c
  1498   0002EC  2A2D               	incf	(_blinkerSM+12)^0,f,c
  1499   0002EE                     l1928:
  1500   0002EE  FFFF               	dw	65535	; assembler added errata NOP
  1501                           
  1502                           ;sgl.c: 140: };sgl.c: 143: if( 1 == blinkerSM.pollAvarie )
  1503   0002F0  0427               	decf	(_blinkerSM+6)^0,w,c
  1504   0002F2  A4D8               	btfss	status,2,c
  1505   0002F4  D011               	goto	l1938
  1506                           
  1507                           ;sgl.c: 144: {;sgl.c: 145: blinkerSM._currentState = SGL_BlinkPasiveState;
  1508   0002F6  0ED6               	movlw	low _SGL_BlinkPasiveState
  1509   0002F8  6E21               	movwf	_blinkerSM^0,c
  1510   0002FA  0E01               	movlw	high _SGL_BlinkPasiveState
  1511   0002FC  6E22               	movwf	(_blinkerSM+1)^0,c
  1512                           
  1513                           ;sgl.c: 146: blinkerSM.firstEntry = 1;
  1514   0002FE  0E00               	movlw	0
  1515   000300  6E26               	movwf	(_blinkerSM+5)^0,c
  1516   000302  0E01               	movlw	1
  1517   000304  6E25               	movwf	(_blinkerSM+4)^0,c
  1518                           
  1519                           ;sgl.c: 147: firstEntry = 1;
  1520   000306  0E01               	movlw	1
  1521   000308  6E52               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1522                           
  1523                           ;sgl.c: 148: SGL_setAllHazardLights(0);
  1524   00030A  0E00               	movlw	0
  1525   00030C  6E4A               	movwf	SGL_setAllHazardLights@toggle^0,c
  1526   00030E  0E00               	movlw	0
  1527   000310  6E4B               	movwf	(SGL_setAllHazardLights@toggle+1)^0,c
  1528   000312  ECB7  F003         	call	_SGL_setAllHazardLights	;wreg free
  1529                           
  1530                           ;sgl.c: 149: }else if( (0 == blinkerSM.pollAvarie) && (0 == blinkerSM.pollLeftSwitch) &&
      +                           (0 == blinkerSM.pollRightSwitch) )
  1531   000316  D014               	goto	l302
  1532   000318                     l1938:
  1533   000318  FFFF               	dw	65535	; assembler added errata NOP
  1534   00031A  5027               	movf	(_blinkerSM+6)^0,w,c
  1535   00031C  A4D8               	btfss	status,2,c
  1536   00031E  D010               	goto	l302
  1537   000320  5028               	movf	(_blinkerSM+7)^0,w,c
  1538   000322  A4D8               	btfss	status,2,c
  1539   000324  D00D               	goto	l302
  1540   000326  5029               	movf	(_blinkerSM+8)^0,w,c
  1541   000328  A4D8               	btfss	status,2,c
  1542   00032A  D00A               	goto	l302
  1543                           
  1544                           ;sgl.c: 150: {;sgl.c: 151: blinkerSM._currentState = SGL_BlinkSwitchOffState;
  1545   00032C  0E14               	movlw	low _SGL_BlinkSwitchOffState
  1546   00032E  6E21               	movwf	_blinkerSM^0,c
  1547   000330  0E01               	movlw	high _SGL_BlinkSwitchOffState
  1548   000332  6E22               	movwf	(_blinkerSM+1)^0,c
  1549                           
  1550                           ;sgl.c: 152: blinkerSM.firstEntry = 1;
  1551   000334  0E00               	movlw	0
  1552   000336  6E26               	movwf	(_blinkerSM+5)^0,c
  1553   000338  0E01               	movlw	1
  1554   00033A  6E25               	movwf	(_blinkerSM+4)^0,c
  1555                           
  1556                           ;sgl.c: 153: firstEntry = 1;
  1557   00033C  0E01               	movlw	1
  1558   00033E  6E52               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1559   000340                     l302:
  1560   000340  FFFF               	dw	65535	; assembler added errata NOP
  1561   000342  0012               	return		;funcret
  1562   000344  FFFF               	dw	65535	; errata NOP
  1563   000346                     __end_of_SGL_BlinkSwitchOnState:
  1564                           	callstack 0
  1565                           
  1566 ;; *************** function _SGL_setSideHazardLights *****************
  1567 ;; Defined at:
  1568 ;;		line 49 in file "sgl.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;  value           1    wreg     unsigned char 
  1571 ;;  side            1   28[COMRAM] unsigned char 
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;  value           1   29[COMRAM] unsigned char 
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, status,2, status,0, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1583 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1586 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1587 ;;Total ram usage:        2 bytes
  1588 ;; Hardware stack levels used: 1
  1589 ;; Hardware stack levels required when called: 4
  1590 ;; This function calls:
  1591 ;;		_IOC_vSetOutputPort
  1592 ;; This function is called by:
  1593 ;;		_SGL_BlinkSwitchOnState
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           	psect	text12
  1598   000A26                     __ptext12:
  1599                           	callstack 0
  1600   000A26                     _SGL_setSideHazardLights:
  1601                           	callstack 0
  1602   000A26  FFFF               	dw	65535	; assembler added errata NOP
  1603                           
  1604                           ;incstack = 0
  1605                           ;SGL_setSideHazardLights@value stored from wreg
  1606   000A28  6E4B               	movwf	SGL_setSideHazardLights@value^0,c
  1607                           
  1608                           ;sgl.c: 51: if(0 == side)
  1609   000A2A  504A               	movf	SGL_setSideHazardLights@side^0,w,c
  1610   000A2C  A4D8               	btfss	status,2,c
  1611   000A2E  D011               	goto	l1840
  1612                           
  1613                           ;sgl.c: 52: {;sgl.c: 53: IOC_vSetOutputPort(IOC_SFS, value);
  1614   000A30  0E01               	movlw	1
  1615   000A32  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1616   000A34  0E03               	movlw	3
  1617   000A36  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1618   000A38  C04B  F047         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1619   000A3C  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1620                           
  1621                           ;sgl.c: 54: IOC_vSetOutputPort(IOC_SSS, value);
  1622   000A40  0E01               	movlw	1
  1623   000A42  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1624   000A44  0E07               	movlw	7
  1625   000A46  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1626   000A48  C04B  F047         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1627   000A4C  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1628                           
  1629                           ;sgl.c: 55: }
  1630   000A50  D011               	goto	l273
  1631   000A52                     l1840:
  1632   000A52  FFFF               	dw	65535	; assembler added errata NOP
  1633                           
  1634                           ;sgl.c: 56: else;sgl.c: 57: {;sgl.c: 58: IOC_vSetOutputPort(IOC_SFD, value);
  1635   000A54  0E01               	movlw	1
  1636   000A56  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1637   000A58  0E00               	movlw	0
  1638   000A5A  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1639   000A5C  C04B  F047         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1640   000A60  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1641                           
  1642                           ;sgl.c: 59: IOC_vSetOutputPort(IOC_SSD, value);
  1643   000A64  0E01               	movlw	1
  1644   000A66  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1645   000A68  0E04               	movlw	4
  1646   000A6A  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1647   000A6C  C04B  F047         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1648   000A70  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1649   000A74                     l273:
  1650   000A74  FFFF               	dw	65535	; assembler added errata NOP
  1651   000A76  0012               	return		;funcret
  1652   000A78  FFFF               	dw	65535	; errata NOP
  1653   000A7A                     __end_of_SGL_setSideHazardLights:
  1654                           	callstack 0
  1655                           
  1656 ;; *************** function _SGL_toggleSideHazardLights *****************
  1657 ;; Defined at:
  1658 ;;		line 25 in file "sgl.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  toggle          2   28[COMRAM] PTR unsigned char 
  1661 ;;		 -> blinkerSM(13), 
  1662 ;;  side            1   30[COMRAM] unsigned char 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;		None
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  1    wreg      void 
  1667 ;; Registers used:
  1668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1674 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1677 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1678 ;;Total ram usage:        3 bytes
  1679 ;; Hardware stack levels used: 1
  1680 ;; Hardware stack levels required when called: 4
  1681 ;; This function calls:
  1682 ;;		_IOC_vSetOutputPort
  1683 ;; This function is called by:
  1684 ;;		_SGL_BlinkSwitchOnState
  1685 ;;		_SGL_BlinkSwitchOffState
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text13
  1690   000466                     __ptext13:
  1691                           	callstack 0
  1692   000466                     _SGL_toggleSideHazardLights:
  1693                           	callstack 0
  1694   000466  FFFF               	dw	65535	; assembler added errata NOP
  1695                           
  1696                           ;sgl.c: 27: if(0 == side)
  1697                           
  1698                           ;incstack = 0
  1699   000468  504C               	movf	SGL_toggleSideHazardLights@side^0,w,c
  1700   00046A  A4D8               	btfss	status,2,c
  1701   00046C  D019               	goto	l1828
  1702                           
  1703                           ;sgl.c: 28: {;sgl.c: 29: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1704   00046E  0E01               	movlw	1
  1705   000470  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1706   000472  0E03               	movlw	3
  1707   000474  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1708   000476  C04A  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1709   00047A  C04B  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1710   00047E  50DF               	movf	indf2,w,c
  1711   000480  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1712   000482  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1713                           
  1714                           ;sgl.c: 30: IOC_vSetOutputPort(IOC_SSS, *toggle);
  1715   000486  0E01               	movlw	1
  1716   000488  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1717   00048A  0E07               	movlw	7
  1718   00048C  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1719   00048E  C04A  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1720   000492  C04B  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1721   000496  50DF               	movf	indf2,w,c
  1722   000498  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1723   00049A  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1724                           
  1725                           ;sgl.c: 31: }
  1726   00049E  D019               	goto	l1830
  1727   0004A0                     l1828:
  1728   0004A0  FFFF               	dw	65535	; assembler added errata NOP
  1729                           
  1730                           ;sgl.c: 32: else;sgl.c: 33: {;sgl.c: 34: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1731   0004A2  0E01               	movlw	1
  1732   0004A4  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1733   0004A6  0E00               	movlw	0
  1734   0004A8  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1735   0004AA  C04A  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1736   0004AE  C04B  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1737   0004B2  50DF               	movf	indf2,w,c
  1738   0004B4  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1739   0004B6  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1740                           
  1741                           ;sgl.c: 35: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1742   0004BA  0E01               	movlw	1
  1743   0004BC  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1744   0004BE  0E04               	movlw	4
  1745   0004C0  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1746   0004C2  C04A  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1747   0004C6  C04B  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1748   0004CA  50DF               	movf	indf2,w,c
  1749   0004CC  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1750   0004CE  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1751   0004D2                     l1830:
  1752   0004D2  FFFF               	dw	65535	; assembler added errata NOP
  1753                           
  1754                           ;sgl.c: 36: };sgl.c: 37: *toggle = *toggle ^ 1;
  1755   0004D4  C04A  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1756   0004D8  C04B  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1757   0004DC  50DF               	movf	indf2,w,c
  1758   0004DE  0A01               	xorlw	1
  1759   0004E0  C04A  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1760   0004E4  C04B  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1761   0004E8  6EDF               	movwf	indf2,c
  1762   0004EA  0012               	return		;funcret
  1763   0004EC  FFFF               	dw	65535	; errata NOP
  1764   0004EE                     __end_of_SGL_toggleSideHazardLights:
  1765                           	callstack 0
  1766                           
  1767 ;; *************** function _SGL_toggleAllHazardLights *****************
  1768 ;; Defined at:
  1769 ;;		line 16 in file "sgl.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  toggle          2   28[COMRAM] PTR unsigned char 
  1772 ;;		 -> blinkerSM(13), 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;		None
  1775 ;; Return value:  Size  Location     Type
  1776 ;;                  1    wreg      void 
  1777 ;; Registers used:
  1778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1784 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1787 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1788 ;;Total ram usage:        2 bytes
  1789 ;; Hardware stack levels used: 1
  1790 ;; Hardware stack levels required when called: 4
  1791 ;; This function calls:
  1792 ;;		_IOC_vSetOutputPort
  1793 ;; This function is called by:
  1794 ;;		_SGL_BlinkPasiveState
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text14
  1799   0006F2                     __ptext14:
  1800                           	callstack 0
  1801   0006F2                     _SGL_toggleAllHazardLights:
  1802                           	callstack 0
  1803   0006F2  FFFF               	dw	65535	; assembler added errata NOP
  1804                           
  1805                           ;sgl.c: 18: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1806                           
  1807                           ;incstack = 0
  1808   0006F4  0E01               	movlw	1
  1809   0006F6  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1810   0006F8  0E00               	movlw	0
  1811   0006FA  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1812   0006FC  C04A  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1813   000700  C04B  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1814   000704  50DF               	movf	indf2,w,c
  1815   000706  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1816   000708  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1817                           
  1818                           ;sgl.c: 19: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1819   00070C  0E01               	movlw	1
  1820   00070E  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1821   000710  0E03               	movlw	3
  1822   000712  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1823   000714  C04A  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1824   000718  C04B  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1825   00071C  50DF               	movf	indf2,w,c
  1826   00071E  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1827   000720  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1828                           
  1829                           ;sgl.c: 20: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1830   000724  0E01               	movlw	1
  1831   000726  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1832   000728  0E04               	movlw	4
  1833   00072A  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1834   00072C  C04A  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1835   000730  C04B  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1836   000734  50DF               	movf	indf2,w,c
  1837   000736  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1838   000738  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1839                           
  1840                           ;sgl.c: 21: IOC_vSetOutputPort(IOC_SSS, *toggle);
  1841   00073C  0E01               	movlw	1
  1842   00073E  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1843   000740  0E07               	movlw	7
  1844   000742  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1845   000744  C04A  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1846   000748  C04B  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1847   00074C  50DF               	movf	indf2,w,c
  1848   00074E  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1849   000750  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1850                           
  1851                           ;sgl.c: 22: *toggle = *toggle ^ 1;
  1852   000754  C04A  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1853   000758  C04B  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1854   00075C  50DF               	movf	indf2,w,c
  1855   00075E  0A01               	xorlw	1
  1856   000760  C04A  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1857   000764  C04B  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1858   000768  6EDF               	movwf	indf2,c
  1859   00076A  0012               	return		;funcret
  1860   00076C  FFFF               	dw	65535	; errata NOP
  1861   00076E                     __end_of_SGL_toggleAllHazardLights:
  1862                           	callstack 0
  1863                           
  1864 ;; *************** function _SGL_setAllHazardLights *****************
  1865 ;; Defined at:
  1866 ;;		line 40 in file "sgl.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  toggle          2   28[COMRAM] PTR unsigned char 
  1869 ;;		 -> NULL(0), RAM(3327), blinkerSM(13), 
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1881 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1884 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1885 ;;Total ram usage:        2 bytes
  1886 ;; Hardware stack levels used: 1
  1887 ;; Hardware stack levels required when called: 4
  1888 ;; This function calls:
  1889 ;;		_IOC_vSetOutputPort
  1890 ;; This function is called by:
  1891 ;;		_SGL_BlinkPasiveState
  1892 ;;		_SGL_BlinkSwitchOnState
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text15
  1897   00076E                     __ptext15:
  1898                           	callstack 0
  1899   00076E                     _SGL_setAllHazardLights:
  1900                           	callstack 0
  1901   00076E  FFFF               	dw	65535	; assembler added errata NOP
  1902                           
  1903                           ;sgl.c: 42: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1904                           
  1905                           ;incstack = 0
  1906   000770  0E01               	movlw	1
  1907   000772  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1908   000774  0E00               	movlw	0
  1909   000776  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1910   000778  C04A  FFD9         	movff	SGL_setAllHazardLights@toggle,fsr2l
  1911   00077C  C04B  FFDA         	movff	SGL_setAllHazardLights@toggle+1,fsr2h
  1912   000780  50DF               	movf	indf2,w,c
  1913   000782  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1914   000784  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1915                           
  1916                           ;sgl.c: 43: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1917   000788  0E01               	movlw	1
  1918   00078A  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1919   00078C  0E03               	movlw	3
  1920   00078E  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1921   000790  C04A  FFD9         	movff	SGL_setAllHazardLights@toggle,fsr2l
  1922   000794  C04B  FFDA         	movff	SGL_setAllHazardLights@toggle+1,fsr2h
  1923   000798  50DF               	movf	indf2,w,c
  1924   00079A  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1925   00079C  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1926                           
  1927                           ;sgl.c: 44: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1928   0007A0  0E01               	movlw	1
  1929   0007A2  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1930   0007A4  0E04               	movlw	4
  1931   0007A6  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1932   0007A8  C04A  FFD9         	movff	SGL_setAllHazardLights@toggle,fsr2l
  1933   0007AC  C04B  FFDA         	movff	SGL_setAllHazardLights@toggle+1,fsr2h
  1934   0007B0  50DF               	movf	indf2,w,c
  1935   0007B2  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1936   0007B4  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1937                           
  1938                           ;sgl.c: 45: IOC_vSetOutputPort(IOC_SSS, *toggle);
  1939   0007B8  0E01               	movlw	1
  1940   0007BA  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1941   0007BC  0E07               	movlw	7
  1942   0007BE  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1943   0007C0  C04A  FFD9         	movff	SGL_setAllHazardLights@toggle,fsr2l
  1944   0007C4  C04B  FFDA         	movff	SGL_setAllHazardLights@toggle+1,fsr2h
  1945   0007C8  50DF               	movf	indf2,w,c
  1946   0007CA  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1947   0007CC  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  1948                           
  1949                           ;sgl.c: 46: *toggle = *toggle ^ 1;
  1950   0007D0  C04A  FFD9         	movff	SGL_setAllHazardLights@toggle,fsr2l
  1951   0007D4  C04B  FFDA         	movff	SGL_setAllHazardLights@toggle+1,fsr2h
  1952   0007D8  50DF               	movf	indf2,w,c
  1953   0007DA  0A01               	xorlw	1
  1954   0007DC  C04A  FFD9         	movff	SGL_setAllHazardLights@toggle,fsr2l
  1955   0007E0  C04B  FFDA         	movff	SGL_setAllHazardLights@toggle+1,fsr2h
  1956   0007E4  6EDF               	movwf	indf2,c
  1957   0007E6  0012               	return		;funcret
  1958   0007E8  FFFF               	dw	65535	; errata NOP
  1959   0007EA                     __end_of_SGL_setAllHazardLights:
  1960                           	callstack 0
  1961                           
  1962 ;; *************** function _SGL_BlinkEventPoll *****************
  1963 ;; Defined at:
  1964 ;;		line 210 in file "sgl.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;		None
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;		None
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1982 ;;Total ram usage:        0 bytes
  1983 ;; Hardware stack levels used: 1
  1984 ;; Hardware stack levels required when called: 4
  1985 ;; This function calls:
  1986 ;;		_IOC_T16GetInputPort
  1987 ;; This function is called by:
  1988 ;;		_SGL_BlinkersInit
  1989 ;;		_SGL_BlinkersRun
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           	psect	text16
  1994   000B74                     __ptext16:
  1995                           	callstack 0
  1996   000B74                     _SGL_BlinkEventPoll:
  1997                           	callstack 0
  1998   000B74  FFFF               	dw	65535	; assembler added errata NOP
  1999                           
  2000                           ;sgl.c: 212: blinkerSM.pollAvarie = IOC_T16GetInputPort(IOC_AVARII);
  2001                           
  2002                           ;incstack = 0
  2003   000B76  0E00               	movlw	0
  2004   000B78  6E40               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2005   000B7A  0E02               	movlw	2
  2006   000B7C  6E3F               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2007   000B7E  ECE8  F004         	call	_IOC_T16GetInputPort	;wreg free
  2008   000B82  503F               	movf	?_IOC_T16GetInputPort^0,w,c
  2009   000B84  6E27               	movwf	(_blinkerSM+6)^0,c
  2010                           
  2011                           ;sgl.c: 213: blinkerSM.pollLeftSwitch = IOC_T16GetInputPort(IOC_SEM_S);
  2012   000B86  0E00               	movlw	0
  2013   000B88  6E40               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2014   000B8A  0E04               	movlw	4
  2015   000B8C  6E3F               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2016   000B8E  ECE8  F004         	call	_IOC_T16GetInputPort	;wreg free
  2017   000B92  503F               	movf	?_IOC_T16GetInputPort^0,w,c
  2018   000B94  6E28               	movwf	(_blinkerSM+7)^0,c
  2019                           
  2020                           ;sgl.c: 214: blinkerSM.pollRightSwitch = IOC_T16GetInputPort(IOC_SEM_D);
  2021   000B96  0E00               	movlw	0
  2022   000B98  6E40               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2023   000B9A  0E03               	movlw	3
  2024   000B9C  6E3F               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2025   000B9E  ECE8  F004         	call	_IOC_T16GetInputPort	;wreg free
  2026   000BA2  503F               	movf	?_IOC_T16GetInputPort^0,w,c
  2027   000BA4  6E29               	movwf	(_blinkerSM+8)^0,c
  2028   000BA6  0012               	return		;funcret
  2029   000BA8  FFFF               	dw	65535	; errata NOP
  2030   000BAA                     __end_of_SGL_BlinkEventPoll:
  2031                           	callstack 0
  2032                           
  2033 ;; *************** function _LIGHTS_BrakeRun *****************
  2034 ;; Defined at:
  2035 ;;		line 10 in file "lights.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;		None
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;		None
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  1    wreg      void 
  2042 ;; Registers used:
  2043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2044 ;; Tracked objects:
  2045 ;;		On entry : 0/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2053 ;;Total ram usage:        0 bytes
  2054 ;; Hardware stack levels used: 1
  2055 ;; Hardware stack levels required when called: 4
  2056 ;; This function calls:
  2057 ;;		_IOC_T16GetInputPort
  2058 ;;		_IOC_vSetOutputPort
  2059 ;; This function is called by:
  2060 ;;		_TASK_vTask1ms
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063                           
  2064                           	psect	text17
  2065   000C10                     __ptext17:
  2066                           	callstack 0
  2067   000C10                     _LIGHTS_BrakeRun:
  2068                           	callstack 0
  2069   000C10  FFFF               	dw	65535	; assembler added errata NOP
  2070                           
  2071                           ;lights.c: 12: static T_U8 counter = 0;;lights.c: 14: if(4 == counter)
  2072                           
  2073                           ;incstack = 0
  2074   000C12  0E04               	movlw	4
  2075   000C14  181B               	xorwf	LIGHTS_BrakeRun@counter^0,w,c
  2076   000C16  A4D8               	btfss	status,2,c
  2077   000C18  D010               	goto	l2074
  2078                           
  2079                           ;lights.c: 15: {;lights.c: 16: IOC_vSetOutputPort(IOC_LSF, IOC_T16GetInputPort(IOC_FRANA
      +                          ));
  2080   000C1A  0E01               	movlw	1
  2081   000C1C  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2082   000C1E  0E05               	movlw	5
  2083   000C20  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2084   000C22  0E00               	movlw	0
  2085   000C24  6E40               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2086   000C26  0E00               	movlw	0
  2087   000C28  6E3F               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2088   000C2A  ECE8  F004         	call	_IOC_T16GetInputPort	;wreg free
  2089   000C2E  503F               	movf	?_IOC_T16GetInputPort^0,w,c
  2090   000C30  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2091   000C32  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2092                           
  2093                           ;lights.c: 17: counter = 0;
  2094   000C36  0E00               	movlw	0
  2095   000C38  6E1B               	movwf	LIGHTS_BrakeRun@counter^0,c
  2096   000C3A                     l2074:
  2097   000C3A  FFFF               	dw	65535	; assembler added errata NOP
  2098                           
  2099                           ;lights.c: 18: };lights.c: 19: ++counter;
  2100   000C3C  2A1B               	incf	LIGHTS_BrakeRun@counter^0,f,c
  2101   000C3E  0012               	return		;funcret
  2102   000C40  FFFF               	dw	65535	; errata NOP
  2103   000C42                     __end_of_LIGHTS_BrakeRun:
  2104                           	callstack 0
  2105                           
  2106 ;; *************** function _TASK_vTask10ms *****************
  2107 ;; Defined at:
  2108 ;;		line 22 in file "tasks.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2126 ;;Total ram usage:        0 bytes
  2127 ;; Hardware stack levels used: 1
  2128 ;; Hardware stack levels required when called: 7
  2129 ;; This function calls:
  2130 ;;		_LIGHTS_HeadLampRun
  2131 ;; This function is called by:
  2132 ;;		_SCHED_vStartScheduler
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text18
  2137   000D5E                     __ptext18:
  2138                           	callstack 0
  2139   000D5E                     _TASK_vTask10ms:
  2140                           	callstack 0
  2141   000D5E  FFFF               	dw	65535	; assembler added errata NOP
  2142                           
  2143                           ;tasks.c: 24: LIGHTS_HeadLampRun();
  2144                           
  2145                           ;incstack = 0
  2146   000D60  ECBD  F004         	call	_LIGHTS_HeadLampRun	;wreg free
  2147   000D64  0012               	return		;funcret
  2148   000D66  FFFF               	dw	65535	; errata NOP
  2149   000D68                     __end_of_TASK_vTask10ms:
  2150                           	callstack 0
  2151                           
  2152 ;; *************** function _LIGHTS_HeadLampRun *****************
  2153 ;; Defined at:
  2154 ;;		line 119 in file "lights.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2172 ;;Total ram usage:        0 bytes
  2173 ;; Hardware stack levels used: 1
  2174 ;; Hardware stack levels required when called: 6
  2175 ;; This function calls:
  2176 ;;		_SGL_HeadLightActiveState
  2177 ;;		_SGL_HeadLightEventPoll
  2178 ;;		_SGL_HeadLightPasiveState
  2179 ;; This function is called by:
  2180 ;;		_TASK_vTask10ms
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text19
  2185   00097A                     __ptext19:
  2186                           	callstack 0
  2187   00097A                     _LIGHTS_HeadLampRun:
  2188                           	callstack 0
  2189   00097A  FFFF               	dw	65535	; assembler added errata NOP
  2190                           
  2191                           ;lights.c: 121: if(0 != headLightSM._currentState)
  2192                           
  2193                           ;incstack = 0
  2194   00097C  5001               	movf	_headLightSM^0,w,c
  2195   00097E  1002               	iorwf	(_headLightSM+1)^0,w,c
  2196   000980  B4D8               	btfsc	status,2,c
  2197   000982  D00E               	goto	u1659
  2198                           
  2199                           ;lights.c: 122: {;lights.c: 123: (*headLightSM._currentState)();
  2200   000984  D801               	call	u1658
  2201   000986  D00C               	goto	u1659
  2202   000988                     u1658:
  2203   000988  FFFF               	dw	65535	; assembler added errata NOP
  2204   00098A  0005               	push	
  2205   00098C  6EFA               	movwf	pclath,c
  2206   00098E  5001               	movf	_headLightSM^0,w,c
  2207   000990  6EFD               	movwf	tosl,c
  2208   000992  5002               	movf	(_headLightSM+1)^0,w,c
  2209   000994  6EFE               	movwf	tosh,c
  2210   000996  50F8               	movf	tblptru,w,c
  2211   000998  6EFF               	movwf	tosu,c
  2212   00099A  50FA               	movf	pclath,w,c
  2213   00099C  0012               	return		;indir
  2214   00099E  FFFF               	dw	65535	; errata NOP
  2215   0009A0                     u1659:
  2216   0009A0  FFFF               	dw	65535	; assembler added errata NOP
  2217                           
  2218                           ;lights.c: 124: };lights.c: 125: if(0 != headLightSM._pollEvents)
  2219   0009A2  5003               	movf	(_headLightSM+2)^0,w,c
  2220   0009A4  1004               	iorwf	(_headLightSM+3)^0,w,c
  2221   0009A6  B4D8               	btfsc	status,2,c
  2222   0009A8  D010               	goto	u1679
  2223                           
  2224                           ;lights.c: 126: {;lights.c: 127: (*headLightSM._pollEvents)();
  2225   0009AA  EE20  F003         	lfsr	2,_headLightSM+2
  2226   0009AE  D801               	call	u1678
  2227   0009B0  D00C               	goto	u1679
  2228   0009B2                     u1678:
  2229   0009B2  FFFF               	dw	65535	; assembler added errata NOP
  2230   0009B4  0005               	push	
  2231   0009B6  6EFA               	movwf	pclath,c
  2232   0009B8  50DE               	movf	postinc2,w,c
  2233   0009BA  6EFD               	movwf	tosl,c
  2234   0009BC  50DE               	movf	postinc2,w,c
  2235   0009BE  6EFE               	movwf	tosh,c
  2236   0009C0  50F8               	movf	tblptru,w,c
  2237   0009C2  6EFF               	movwf	tosu,c
  2238   0009C4  50FA               	movf	pclath,w,c
  2239   0009C6  0012               	return		;indir
  2240   0009C8  FFFF               	dw	65535	; errata NOP
  2241   0009CA                     u1679:
  2242   0009CA  FFFF               	dw	65535	; assembler added errata NOP
  2243   0009CC  0012               	return		;funcret
  2244   0009CE  FFFF               	dw	65535	; errata NOP
  2245   0009D0                     __end_of_LIGHTS_HeadLampRun:
  2246                           	callstack 0
  2247                           
  2248 ;; *************** function _SGL_HeadLightActiveState *****************
  2249 ;; Defined at:
  2250 ;;		line 79 in file "lights.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;		None
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;		None
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  1    wreg      void 
  2257 ;; Registers used:
  2258 ;;		wreg, status,2, status,0, cstack
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2268 ;;Total ram usage:        0 bytes
  2269 ;; Hardware stack levels used: 1
  2270 ;; Hardware stack levels required when called: 4
  2271 ;; This function calls:
  2272 ;;		_IOC_vSetOutputPort
  2273 ;; This function is called by:
  2274 ;;		_SGL_HeadLightPasiveState
  2275 ;;		_LIGHTS_HeadLampRun
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           	psect	text20
  2280   000346                     __ptext20:
  2281                           	callstack 0
  2282   000346                     _SGL_HeadLightActiveState:
  2283                           	callstack 0
  2284   000346  FFFF               	dw	65535	; assembler added errata NOP
  2285                           
  2286                           ;lights.c: 82: if(headLightSM.firstEntry == 1)
  2287                           
  2288                           ;incstack = 0
  2289   000348  0405               	decf	(_headLightSM+4)^0,w,c
  2290   00034A  1006               	iorwf	(_headLightSM+5)^0,w,c
  2291   00034C  A4D8               	btfss	status,2,c
  2292   00034E  D01C               	goto	l2020
  2293                           
  2294                           ;lights.c: 83: {;lights.c: 84: IOC_vSetOutputPort(IOC_LS, 1);
  2295   000350  0E01               	movlw	1
  2296   000352  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2297   000354  0E06               	movlw	6
  2298   000356  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2299   000358  0E01               	movlw	1
  2300   00035A  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2301   00035C  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2302                           
  2303                           ;lights.c: 85: IOC_vSetOutputPort(IOC_FS, 1);
  2304   000360  0E01               	movlw	1
  2305   000362  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2306   000364  0E02               	movlw	2
  2307   000366  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2308   000368  0E01               	movlw	1
  2309   00036A  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2310   00036C  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2311                           
  2312                           ;lights.c: 86: IOC_vSetOutputPort(IOC_FD, 1);
  2313   000370  0E01               	movlw	1
  2314   000372  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2315   000374  0E01               	movlw	1
  2316   000376  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2317   000378  0E01               	movlw	1
  2318   00037A  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2319   00037C  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2320                           
  2321                           ;lights.c: 87: headLightSM.firstEntry = 0;
  2322   000380  0E00               	movlw	0
  2323   000382  6E06               	movwf	(_headLightSM+5)^0,c
  2324   000384  0E00               	movlw	0
  2325   000386  6E05               	movwf	(_headLightSM+4)^0,c
  2326   000388                     l2020:
  2327   000388  FFFF               	dw	65535	; assembler added errata NOP
  2328                           
  2329                           ;lights.c: 88: };lights.c: 93: if(0 == headLightSM.faruri)
  2330   00038A  5007               	movf	(_headLightSM+6)^0,w,c
  2331   00038C  A4D8               	btfss	status,2,c
  2332   00038E  D020               	goto	l367
  2333                           
  2334                           ;lights.c: 94: {;lights.c: 95: headLightSM._currentState = SGL_HeadLightPasiveState;
  2335   000390  0ED6               	movlw	low _SGL_HeadLightPasiveState
  2336   000392  6E01               	movwf	_headLightSM^0,c
  2337   000394  0E03               	movlw	high _SGL_HeadLightPasiveState
  2338   000396  6E02               	movwf	(_headLightSM+1)^0,c
  2339                           
  2340                           ;lights.c: 96: headLightSM.firstEntry = 1;
  2341   000398  0E00               	movlw	0
  2342   00039A  6E06               	movwf	(_headLightSM+5)^0,c
  2343   00039C  0E01               	movlw	1
  2344   00039E  6E05               	movwf	(_headLightSM+4)^0,c
  2345                           
  2346                           ;lights.c: 97: IOC_vSetOutputPort(IOC_LS, 0);
  2347   0003A0  0E01               	movlw	1
  2348   0003A2  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2349   0003A4  0E06               	movlw	6
  2350   0003A6  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2351   0003A8  0E00               	movlw	0
  2352   0003AA  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2353   0003AC  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2354                           
  2355                           ;lights.c: 98: IOC_vSetOutputPort(IOC_FS, 0);
  2356   0003B0  0E01               	movlw	1
  2357   0003B2  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2358   0003B4  0E02               	movlw	2
  2359   0003B6  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2360   0003B8  0E00               	movlw	0
  2361   0003BA  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2362   0003BC  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2363                           
  2364                           ;lights.c: 99: IOC_vSetOutputPort(IOC_FD, 0);
  2365   0003C0  0E01               	movlw	1
  2366   0003C2  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2367   0003C4  0E01               	movlw	1
  2368   0003C6  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2369   0003C8  0E00               	movlw	0
  2370   0003CA  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2371   0003CC  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2372   0003D0                     l367:
  2373   0003D0  FFFF               	dw	65535	; assembler added errata NOP
  2374   0003D2  0012               	return		;funcret
  2375   0003D4  FFFF               	dw	65535	; errata NOP
  2376   0003D6                     __end_of_SGL_HeadLightActiveState:
  2377                           	callstack 0
  2378                           
  2379 ;; *************** function _SGL_HeadLightPasiveState *****************
  2380 ;; Defined at:
  2381 ;;		line 50 in file "lights.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;		None
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;		None
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  1    wreg      void 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, status,0, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2399 ;;Total ram usage:        0 bytes
  2400 ;; Hardware stack levels used: 1
  2401 ;; Hardware stack levels required when called: 5
  2402 ;; This function calls:
  2403 ;;		_IOC_vSetOutputPort
  2404 ;;		_SGL_isNight
  2405 ;; This function is called by:
  2406 ;;		_SGL_HeadLightActiveState
  2407 ;;		_LIGHTS_HeadLampInit
  2408 ;;		_LIGHTS_HeadLampRun
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           	psect	text21
  2413   0003D6                     __ptext21:
  2414                           	callstack 0
  2415   0003D6                     _SGL_HeadLightPasiveState:
  2416                           	callstack 0
  2417   0003D6  FFFF               	dw	65535	; assembler added errata NOP
  2418                           
  2419                           ;lights.c: 53: if(headLightSM.firstEntry == 1)
  2420                           
  2421                           ;incstack = 0
  2422   0003D8  0405               	decf	(_headLightSM+4)^0,w,c
  2423   0003DA  1006               	iorwf	(_headLightSM+5)^0,w,c
  2424   0003DC  A4D8               	btfss	status,2,c
  2425   0003DE  D014               	goto	l2000
  2426                           
  2427                           ;lights.c: 54: {;lights.c: 55: IOC_vSetOutputPort(IOC_IFS, 0);
  2428   0003E0  0E02               	movlw	2
  2429   0003E2  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2430   0003E4  0E01               	movlw	1
  2431   0003E6  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2432   0003E8  0E00               	movlw	0
  2433   0003EA  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2434   0003EC  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2435                           
  2436                           ;lights.c: 56: IOC_vSetOutputPort(IOC_LS, 0);
  2437   0003F0  0E01               	movlw	1
  2438   0003F2  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2439   0003F4  0E06               	movlw	6
  2440   0003F6  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2441   0003F8  0E00               	movlw	0
  2442   0003FA  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2443   0003FC  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2444                           
  2445                           ;lights.c: 57: headLightSM.firstEntry = 0;
  2446   000400  0E00               	movlw	0
  2447   000402  6E06               	movwf	(_headLightSM+5)^0,c
  2448   000404  0E00               	movlw	0
  2449   000406  6E05               	movwf	(_headLightSM+4)^0,c
  2450   000408                     l2000:
  2451   000408  FFFF               	dw	65535	; assembler added errata NOP
  2452                           
  2453                           ;lights.c: 58: };lights.c: 61: if(SGL_isNight())
  2454   00040A  EC77  F002         	call	_SGL_isNight	;wreg free
  2455   00040E  0900               	iorlw	0
  2456   000410  B4D8               	btfsc	status,2,c
  2457   000412  D009               	goto	l2004
  2458                           
  2459                           ;lights.c: 62: {;lights.c: 63: IOC_vSetOutputPort(IOC_IFS, 1);
  2460   000414  0E02               	movlw	2
  2461   000416  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2462   000418  0E01               	movlw	1
  2463   00041A  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2464   00041C  0E01               	movlw	1
  2465   00041E  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2466   000420  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2467                           
  2468                           ;lights.c: 64: }
  2469   000424  D009               	goto	l2006
  2470   000426                     l2004:
  2471   000426  FFFF               	dw	65535	; assembler added errata NOP
  2472                           
  2473                           ;lights.c: 65: else;lights.c: 66: {;lights.c: 67: IOC_vSetOutputPort(IOC_IFS, 0);
  2474   000428  0E02               	movlw	2
  2475   00042A  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2476   00042C  0E01               	movlw	1
  2477   00042E  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2478   000430  0E00               	movlw	0
  2479   000432  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2480   000434  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2481   000438                     l2006:
  2482   000438  FFFF               	dw	65535	; assembler added errata NOP
  2483                           
  2484                           ;lights.c: 68: };lights.c: 71: if(1 == headLightSM.faruri)
  2485   00043A  0407               	decf	(_headLightSM+6)^0,w,c
  2486   00043C  A4D8               	btfss	status,2,c
  2487   00043E  D010               	goto	l362
  2488                           
  2489                           ;lights.c: 72: {;lights.c: 73: headLightSM.firstEntry = 1;
  2490   000440  0E00               	movlw	0
  2491   000442  6E06               	movwf	(_headLightSM+5)^0,c
  2492   000444  0E01               	movlw	1
  2493   000446  6E05               	movwf	(_headLightSM+4)^0,c
  2494                           
  2495                           ;lights.c: 74: headLightSM._currentState = SGL_HeadLightActiveState;
  2496   000448  0E46               	movlw	low _SGL_HeadLightActiveState
  2497   00044A  6E01               	movwf	_headLightSM^0,c
  2498   00044C  0E03               	movlw	high _SGL_HeadLightActiveState
  2499   00044E  6E02               	movwf	(_headLightSM+1)^0,c
  2500                           
  2501                           ;lights.c: 75: IOC_vSetOutputPort(IOC_IFS, 0);
  2502   000450  0E02               	movlw	2
  2503   000452  6E46               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2504   000454  0E01               	movlw	1
  2505   000456  6E45               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2506   000458  0E00               	movlw	0
  2507   00045A  6E47               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2508   00045C  EC7E  F005         	call	_IOC_vSetOutputPort	;wreg free
  2509   000460                     l362:
  2510   000460  FFFF               	dw	65535	; assembler added errata NOP
  2511   000462  0012               	return		;funcret
  2512   000464  FFFF               	dw	65535	; errata NOP
  2513   000466                     __end_of_SGL_HeadLightPasiveState:
  2514                           	callstack 0
  2515                           
  2516 ;; *************** function _SGL_isNight *****************
  2517 ;; Defined at:
  2518 ;;		line 30 in file "lights.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  currentLight    2   27[COMRAM] unsigned int 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      unsigned char 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0, cstack
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2533 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2535 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2536 ;;Total ram usage:        2 bytes
  2537 ;; Hardware stack levels used: 1
  2538 ;; Hardware stack levels required when called: 4
  2539 ;; This function calls:
  2540 ;;		___ftge
  2541 ;;		___lwtoft
  2542 ;; This function is called by:
  2543 ;;		_SGL_HeadLightPasiveState
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text22
  2548   0004EE                     __ptext22:
  2549                           	callstack 0
  2550   0004EE                     _SGL_isNight:
  2551                           	callstack 0
  2552   0004EE  FFFF               	dw	65535	; assembler added errata NOP
  2553                           
  2554                           ;lights.c: 32: static T_U8 prevState = 0;;lights.c: 33: T_U16 currentLightLevel = headLi
      +                          ghtSM.lightLevel;
  2555                           
  2556                           ;incstack = 0
  2557   0004F0  C008  F049         	movff	_headLightSM+7,SGL_isNight@currentLightLevel
  2558   0004F4  C009  F04A         	movff	_headLightSM+8,SGL_isNight@currentLightLevel+1
  2559                           
  2560                           ;lights.c: 35: if(prevState == 0 && currentLightLevel < (2.2*204))
  2561   0004F8  501A               	movf	SGL_isNight@prevState^0,w,c
  2562   0004FA  A4D8               	btfss	status,2,c
  2563   0004FC  D01B               	goto	l1854
  2564   0004FE  C049  F03D         	movff	SGL_isNight@currentLightLevel,___lwtoft@c
  2565   000502  C04A  F03E         	movff	SGL_isNight@currentLightLevel+1,___lwtoft@c+1
  2566   000506  EC4B  F006         	call	___lwtoft	;wreg free
  2567   00050A  C03D  F040         	movff	?___lwtoft,___ftge@ff1
  2568   00050E  C03E  F041         	movff	?___lwtoft+1,___ftge@ff1+1
  2569   000512  C03F  F042         	movff	?___lwtoft+2,___ftge@ff1+2
  2570   000516  0E66               	movlw	102
  2571   000518  6E43               	movwf	___ftge@ff2^0,c
  2572   00051A  0EE0               	movlw	224
  2573   00051C  6E44               	movwf	(___ftge@ff2+1)^0,c
  2574   00051E  0E43               	movlw	67
  2575   000520  6E45               	movwf	(___ftge@ff2+2)^0,c
  2576   000522  ECBB  F002         	call	___ftge	;wreg free
  2577   000526  B0D8               	btfsc	status,0,c
  2578   000528  D005               	goto	l1854
  2579                           
  2580                           ;lights.c: 36: {;lights.c: 37: prevState = 1;
  2581   00052A  0E01               	movlw	1
  2582   00052C  FFFF               	dw	65535	; assembler added errata NOP
  2583   00052E  6E1A               	movwf	SGL_isNight@prevState^0,c
  2584                           
  2585                           ;lights.c: 38: return 1;
  2586   000530  0E01               	movlw	1
  2587   000532  D01E               	goto	l354
  2588   000534                     l1854:
  2589   000534  FFFF               	dw	65535	; assembler added errata NOP
  2590                           
  2591                           ;lights.c: 39: };lights.c: 41: if(prevState == 1 && currentLightLevel > (2.4*204))
  2592   000536  041A               	decf	SGL_isNight@prevState^0,w,c
  2593   000538  A4D8               	btfss	status,2,c
  2594   00053A  D018               	goto	l1864
  2595   00053C  0ECD               	movlw	205
  2596   00053E  6E40               	movwf	___ftge@ff1^0,c
  2597   000540  0EF4               	movlw	244
  2598   000542  6E41               	movwf	(___ftge@ff1+1)^0,c
  2599   000544  0E43               	movlw	67
  2600   000546  6E42               	movwf	(___ftge@ff1+2)^0,c
  2601   000548  C049  F03D         	movff	SGL_isNight@currentLightLevel,___lwtoft@c
  2602   00054C  C04A  F03E         	movff	SGL_isNight@currentLightLevel+1,___lwtoft@c+1
  2603   000550  EC4B  F006         	call	___lwtoft	;wreg free
  2604   000554  C03D  F043         	movff	?___lwtoft,___ftge@ff2
  2605   000558  C03E  F044         	movff	?___lwtoft+1,___ftge@ff2+1
  2606   00055C  C03F  F045         	movff	?___lwtoft+2,___ftge@ff2+2
  2607   000560  ECBB  F002         	call	___ftge	;wreg free
  2608   000564  B0D8               	btfsc	status,0,c
  2609   000566  D002               	goto	l1864
  2610                           
  2611                           ;lights.c: 42: {;lights.c: 43: prevState = 0;
  2612   000568  0E00               	movlw	0
  2613   00056A  D7E0               	goto	L2
  2614   00056C                     l1864:
  2615   00056C  FFFF               	dw	65535	; assembler added errata NOP
  2616                           
  2617                           ;lights.c: 45: };lights.c: 47: return prevState;
  2618   00056E  501A               	movf	SGL_isNight@prevState^0,w,c
  2619   000570                     l354:
  2620   000570  FFFF               	dw	65535	; assembler added errata NOP
  2621   000572  0012               	return		;funcret
  2622   000574  FFFF               	dw	65535	; errata NOP
  2623   000576                     __end_of_SGL_isNight:
  2624                           	callstack 0
  2625                           
  2626 ;; *************** function ___lwtoft *****************
  2627 ;; Defined at:
  2628 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwtoft.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  c               2   15[COMRAM] unsigned int 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;		None
  2633 ;; Return value:  Size  Location     Type
  2634 ;;                  3   15[COMRAM] float 
  2635 ;; Registers used:
  2636 ;;		wreg, status,2, status,0, cstack
  2637 ;; Tracked objects:
  2638 ;;		On entry : 0/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2642 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2645 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2646 ;;Total ram usage:        3 bytes
  2647 ;; Hardware stack levels used: 1
  2648 ;; Hardware stack levels required when called: 3
  2649 ;; This function calls:
  2650 ;;		___ftpack
  2651 ;; This function is called by:
  2652 ;;		_SGL_isNight
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text23
  2657   000C96                     __ptext23:
  2658                           	callstack 0
  2659   000C96                     ___lwtoft:
  2660                           	callstack 0
  2661   000C96  FFFF               	dw	65535	; assembler added errata NOP
  2662                           
  2663                           ;incstack = 0
  2664   000C98  C03D  F035         	movff	___lwtoft@c,___ftpack@arg
  2665   000C9C  C03E  F036         	movff	___lwtoft@c+1,___ftpack@arg+1
  2666   000CA0  6A37               	clrf	(___ftpack@arg+2)^0,c
  2667   000CA2  0E8E               	movlw	142
  2668   000CA4  6E38               	movwf	___ftpack@exp^0,c
  2669   000CA6  0E00               	movlw	0
  2670   000CA8  6E39               	movwf	___ftpack@sign^0,c
  2671   000CAA  EC28  F000         	call	___ftpack	;wreg free
  2672   000CAE  C035  F03D         	movff	?___ftpack,?___lwtoft
  2673   000CB2  C036  F03E         	movff	?___ftpack+1,?___lwtoft+1
  2674   000CB6  C037  F03F         	movff	?___ftpack+2,?___lwtoft+2
  2675   000CBA  0012               	return		;funcret
  2676   000CBC  FFFF               	dw	65535	; errata NOP
  2677   000CBE                     __end_of___lwtoft:
  2678                           	callstack 0
  2679                           
  2680 ;; *************** function ___ftpack *****************
  2681 ;; Defined at:
  2682 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\float.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;  arg             3    7[COMRAM] unsigned um
  2685 ;;  exp             1   10[COMRAM] unsigned char 
  2686 ;;  sign            1   11[COMRAM] unsigned char 
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;		None
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  3    7[COMRAM] float 
  2691 ;; Registers used:
  2692 ;;		wreg, status,2, status,0
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2698 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2700 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2701 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2702 ;;Total ram usage:        8 bytes
  2703 ;; Hardware stack levels used: 1
  2704 ;; Hardware stack levels required when called: 2
  2705 ;; This function calls:
  2706 ;;		Nothing
  2707 ;; This function is called by:
  2708 ;;		___lwtoft
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text24
  2713   000050                     __ptext24:
  2714                           	callstack 0
  2715   000050                     ___ftpack:
  2716                           	callstack 0
  2717   000050  FFFF               	dw	65535	; assembler added errata NOP
  2718                           
  2719                           ;incstack = 0
  2720   000052  5038               	movf	___ftpack@exp^0,w,c
  2721   000054  B4D8               	btfsc	status,2,c
  2722   000056  D005               	goto	u1070
  2723   000058  5035               	movf	___ftpack@arg^0,w,c
  2724   00005A  1036               	iorwf	(___ftpack@arg+1)^0,w,c
  2725   00005C  1037               	iorwf	(___ftpack@arg+2)^0,w,c
  2726   00005E  A4D8               	btfss	status,2,c
  2727   000060  D00E               	goto	l1732
  2728   000062                     u1070:
  2729   000062  FFFF               	dw	65535	; assembler added errata NOP
  2730   000064  0E00               	movlw	0
  2731   000066  6E35               	movwf	?___ftpack^0,c
  2732   000068  0E00               	movlw	0
  2733   00006A  6E36               	movwf	(?___ftpack+1)^0,c
  2734   00006C  0E00               	movlw	0
  2735   00006E  6E37               	movwf	(?___ftpack+2)^0,c
  2736   000070  D04E               	goto	l653
  2737   000072                     l1730:
  2738   000072  FFFF               	dw	65535	; assembler added errata NOP
  2739   000074  2A38               	incf	___ftpack@exp^0,f,c
  2740   000076  90D8               	bcf	status,0,c
  2741   000078  3237               	rrcf	(___ftpack@arg+2)^0,f,c
  2742   00007A  3236               	rrcf	(___ftpack@arg+1)^0,f,c
  2743   00007C  3235               	rrcf	___ftpack@arg^0,f,c
  2744   00007E                     l1732:
  2745   00007E  FFFF               	dw	65535	; assembler added errata NOP
  2746   000080  0E00               	movlw	0
  2747   000082  1435               	andwf	___ftpack@arg^0,w,c
  2748   000084  6E3A               	movwf	??___ftpack^0,c
  2749   000086  0E00               	movlw	0
  2750   000088  1436               	andwf	(___ftpack@arg+1)^0,w,c
  2751   00008A  6E3B               	movwf	(??___ftpack+1)^0,c
  2752   00008C  0EFE               	movlw	254
  2753   00008E  1437               	andwf	(___ftpack@arg+2)^0,w,c
  2754   000090  6E3C               	movwf	(??___ftpack+2)^0,c
  2755   000092  503A               	movf	??___ftpack^0,w,c
  2756   000094  103B               	iorwf	(??___ftpack+1)^0,w,c
  2757   000096  103C               	iorwf	(??___ftpack+2)^0,w,c
  2758   000098  B4D8               	btfsc	status,2,c
  2759   00009A  D00D               	goto	l1738
  2760   00009C  D7EA               	goto	l1730
  2761   00009E                     l1734:
  2762   00009E  FFFF               	dw	65535	; assembler added errata NOP
  2763   0000A0  2A38               	incf	___ftpack@exp^0,f,c
  2764   0000A2  0E01               	movlw	1
  2765   0000A4  2635               	addwf	___ftpack@arg^0,f,c
  2766   0000A6  0E00               	movlw	0
  2767   0000A8  2236               	addwfc	(___ftpack@arg+1)^0,f,c
  2768   0000AA  0E00               	movlw	0
  2769   0000AC  2237               	addwfc	(___ftpack@arg+2)^0,f,c
  2770   0000AE  90D8               	bcf	status,0,c
  2771   0000B0  3237               	rrcf	(___ftpack@arg+2)^0,f,c
  2772   0000B2  3236               	rrcf	(___ftpack@arg+1)^0,f,c
  2773   0000B4  3235               	rrcf	___ftpack@arg^0,f,c
  2774   0000B6                     l1738:
  2775   0000B6  FFFF               	dw	65535	; assembler added errata NOP
  2776   0000B8  0E00               	movlw	0
  2777   0000BA  1435               	andwf	___ftpack@arg^0,w,c
  2778   0000BC  6E3A               	movwf	??___ftpack^0,c
  2779   0000BE  0E00               	movlw	0
  2780   0000C0  1436               	andwf	(___ftpack@arg+1)^0,w,c
  2781   0000C2  6E3B               	movwf	(??___ftpack+1)^0,c
  2782   0000C4  0EFF               	movlw	255
  2783   0000C6  1437               	andwf	(___ftpack@arg+2)^0,w,c
  2784   0000C8  6E3C               	movwf	(??___ftpack+2)^0,c
  2785   0000CA  503A               	movf	??___ftpack^0,w,c
  2786   0000CC  103B               	iorwf	(??___ftpack+1)^0,w,c
  2787   0000CE  103C               	iorwf	(??___ftpack+2)^0,w,c
  2788   0000D0  B4D8               	btfsc	status,2,c
  2789   0000D2  D007               	goto	l1742
  2790   0000D4  D7E4               	goto	l1734
  2791   0000D6                     l1740:
  2792   0000D6  FFFF               	dw	65535	; assembler added errata NOP
  2793   0000D8  0638               	decf	___ftpack@exp^0,f,c
  2794   0000DA  90D8               	bcf	status,0,c
  2795   0000DC  3635               	rlcf	___ftpack@arg^0,f,c
  2796   0000DE  3636               	rlcf	(___ftpack@arg+1)^0,f,c
  2797   0000E0  3637               	rlcf	(___ftpack@arg+2)^0,f,c
  2798   0000E2                     l1742:
  2799   0000E2  FFFF               	dw	65535	; assembler added errata NOP
  2800   0000E4  BE36               	btfsc	(___ftpack@arg+1)^0,7,c
  2801   0000E6  D003               	goto	u1110
  2802   0000E8  0E02               	movlw	2
  2803   0000EA  6038               	cpfslt	___ftpack@exp^0,c
  2804   0000EC  D7F4               	goto	l1740
  2805   0000EE                     u1110:
  2806   0000EE  FFFF               	dw	65535	; assembler added errata NOP
  2807   0000F0  A038               	btfss	___ftpack@exp^0,0,c
  2808   0000F2  9E36               	bcf	(___ftpack@arg+1)^0,7,c
  2809   0000F4  90D8               	bcf	status,0,c
  2810   0000F6  3238               	rrcf	___ftpack@exp^0,f,c
  2811   0000F8  5038               	movf	___ftpack@exp^0,w,c
  2812   0000FA  1237               	iorwf	(___ftpack@arg+2)^0,f,c
  2813   0000FC  5039               	movf	___ftpack@sign^0,w,c
  2814   0000FE  A4D8               	btfss	status,2,c
  2815   000100  8E37               	bsf	(___ftpack@arg+2)^0,7,c
  2816   000102  C035  F035         	movff	___ftpack@arg,?___ftpack
  2817   000106  C036  F036         	movff	___ftpack@arg+1,?___ftpack+1
  2818   00010A  C037  F037         	movff	___ftpack@arg+2,?___ftpack+2
  2819   00010E                     l653:
  2820   00010E  FFFF               	dw	65535	; assembler added errata NOP
  2821   000110  0012               	return		;funcret
  2822   000112  FFFF               	dw	65535	; errata NOP
  2823   000114                     __end_of___ftpack:
  2824                           	callstack 0
  2825                           
  2826 ;; *************** function ___ftge *****************
  2827 ;; Defined at:
  2828 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftge.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  ff1             3   18[COMRAM] float 
  2831 ;;  ff2             3   21[COMRAM] float 
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;		None
  2834 ;; Return value:  Size  Location     Type
  2835 ;;		None               void
  2836 ;; Registers used:
  2837 ;;		wreg, status,2, status,0
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2843 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2845 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2846 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2847 ;;Total ram usage:        9 bytes
  2848 ;; Hardware stack levels used: 1
  2849 ;; Hardware stack levels required when called: 2
  2850 ;; This function calls:
  2851 ;;		Nothing
  2852 ;; This function is called by:
  2853 ;;		_SGL_isNight
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text25
  2858   000576                     __ptext25:
  2859                           	callstack 0
  2860   000576                     ___ftge:
  2861                           	callstack 0
  2862   000576  FFFF               	dw	65535	; assembler added errata NOP
  2863                           
  2864                           ;incstack = 0
  2865   000578  AE42               	btfss	(___ftge@ff1+2)^0,7,c
  2866   00057A  D00F               	goto	l1786
  2867   00057C  0E00               	movlw	0
  2868   00057E  6E46               	movwf	??___ftge^0,c
  2869   000580  0E00               	movlw	0
  2870   000582  6E47               	movwf	(??___ftge+1)^0,c
  2871   000584  0E80               	movlw	128
  2872   000586  6E48               	movwf	(??___ftge+2)^0,c
  2873   000588  5040               	movf	___ftge@ff1^0,w,c
  2874   00058A  5C46               	subwf	??___ftge^0,w,c
  2875   00058C  6E40               	movwf	___ftge@ff1^0,c
  2876   00058E  5041               	movf	(___ftge@ff1+1)^0,w,c
  2877   000590  5847               	subwfb	(??___ftge+1)^0,w,c
  2878   000592  6E41               	movwf	(___ftge@ff1+1)^0,c
  2879   000594  5042               	movf	(___ftge@ff1+2)^0,w,c
  2880   000596  5848               	subwfb	(??___ftge+2)^0,w,c
  2881   000598  6E42               	movwf	(___ftge@ff1+2)^0,c
  2882   00059A                     l1786:
  2883   00059A  FFFF               	dw	65535	; assembler added errata NOP
  2884   00059C  AE45               	btfss	(___ftge@ff2+2)^0,7,c
  2885   00059E  D00F               	goto	l1790
  2886   0005A0  0E00               	movlw	0
  2887   0005A2  6E46               	movwf	??___ftge^0,c
  2888   0005A4  0E00               	movlw	0
  2889   0005A6  6E47               	movwf	(??___ftge+1)^0,c
  2890   0005A8  0E80               	movlw	128
  2891   0005AA  6E48               	movwf	(??___ftge+2)^0,c
  2892   0005AC  5043               	movf	___ftge@ff2^0,w,c
  2893   0005AE  5C46               	subwf	??___ftge^0,w,c
  2894   0005B0  6E43               	movwf	___ftge@ff2^0,c
  2895   0005B2  5044               	movf	(___ftge@ff2+1)^0,w,c
  2896   0005B4  5847               	subwfb	(??___ftge+1)^0,w,c
  2897   0005B6  6E44               	movwf	(___ftge@ff2+1)^0,c
  2898   0005B8  5045               	movf	(___ftge@ff2+2)^0,w,c
  2899   0005BA  5848               	subwfb	(??___ftge+2)^0,w,c
  2900   0005BC  6E45               	movwf	(___ftge@ff2+2)^0,c
  2901   0005BE                     l1790:
  2902   0005BE  FFFF               	dw	65535	; assembler added errata NOP
  2903   0005C0  0E00               	movlw	0
  2904   0005C2  1A40               	xorwf	___ftge@ff1^0,f,c
  2905   0005C4  0E00               	movlw	0
  2906   0005C6  1A41               	xorwf	(___ftge@ff1+1)^0,f,c
  2907   0005C8  0E80               	movlw	128
  2908   0005CA  1A42               	xorwf	(___ftge@ff1+2)^0,f,c
  2909   0005CC  0E00               	movlw	0
  2910   0005CE  1A43               	xorwf	___ftge@ff2^0,f,c
  2911   0005D0  0E00               	movlw	0
  2912   0005D2  1A44               	xorwf	(___ftge@ff2+1)^0,f,c
  2913   0005D4  0E80               	movlw	128
  2914   0005D6  1A45               	xorwf	(___ftge@ff2+2)^0,f,c
  2915   0005D8  5043               	movf	___ftge@ff2^0,w,c
  2916   0005DA  5C40               	subwf	___ftge@ff1^0,w,c
  2917   0005DC  5044               	movf	(___ftge@ff2+1)^0,w,c
  2918   0005DE  5841               	subwfb	(___ftge@ff1+1)^0,w,c
  2919   0005E0  5045               	movf	(___ftge@ff2+2)^0,w,c
  2920   0005E2  5842               	subwfb	(___ftge@ff1+2)^0,w,c
  2921   0005E4  B0D8               	btfsc	status,0,c
  2922   0005E6  D002               	goto	l1796
  2923   0005E8  90D8               	bcf	status,0,c
  2924   0005EA  D002               	goto	l728
  2925   0005EC                     l1796:
  2926   0005EC  FFFF               	dw	65535	; assembler added errata NOP
  2927   0005EE  80D8               	bsf	status,0,c
  2928   0005F0                     l728:
  2929   0005F0  FFFF               	dw	65535	; assembler added errata NOP
  2930   0005F2  0012               	return		;funcret
  2931   0005F4  FFFF               	dw	65535	; errata NOP
  2932   0005F6                     __end_of___ftge:
  2933                           	callstack 0
  2934                           
  2935 ;; *************** function _SGL_HeadLightEventPoll *****************
  2936 ;; Defined at:
  2937 ;;		line 104 in file "lights.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2955 ;;Total ram usage:        0 bytes
  2956 ;; Hardware stack levels used: 1
  2957 ;; Hardware stack levels required when called: 4
  2958 ;; This function calls:
  2959 ;;		_IOC_T16GetInputPort
  2960 ;; This function is called by:
  2961 ;;		_LIGHTS_HeadLampInit
  2962 ;;		_LIGHTS_HeadLampRun
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text26
  2967   000C6C                     __ptext26:
  2968                           	callstack 0
  2969   000C6C                     _SGL_HeadLightEventPoll:
  2970                           	callstack 0
  2971   000C6C  FFFF               	dw	65535	; assembler added errata NOP
  2972                           
  2973                           ;lights.c: 106: headLightSM.faruri = IOC_T16GetInputPort(IOC_FARURI);
  2974                           
  2975                           ;incstack = 0
  2976   000C6E  0E00               	movlw	0
  2977   000C70  6E40               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2978   000C72  0E01               	movlw	1
  2979   000C74  6E3F               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2980   000C76  ECE8  F004         	call	_IOC_T16GetInputPort	;wreg free
  2981   000C7A  503F               	movf	?_IOC_T16GetInputPort^0,w,c
  2982   000C7C  6E07               	movwf	(_headLightSM+6)^0,c
  2983                           
  2984                           ;lights.c: 107: headLightSM.lightLevel = IOC_T16GetInputPort(IOC_ADC0);
  2985   000C7E  0E03               	movlw	3
  2986   000C80  6E40               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2987   000C82  0E00               	movlw	0
  2988   000C84  6E3F               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2989   000C86  ECE8  F004         	call	_IOC_T16GetInputPort	;wreg free
  2990   000C8A  C03F  F008         	movff	?_IOC_T16GetInputPort,_headLightSM+7
  2991   000C8E  C040  F009         	movff	?_IOC_T16GetInputPort+1,_headLightSM+8
  2992   000C92  0012               	return		;funcret
  2993   000C94  FFFF               	dw	65535	; errata NOP
  2994   000C96                     __end_of_SGL_HeadLightEventPoll:
  2995                           	callstack 0
  2996                           
  2997 ;; *************** function _IOC_T16GetInputPort *****************
  2998 ;; Defined at:
  2999 ;;		line 19 in file "ioc.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  u16ChannelSe    2   17[COMRAM] const enum E10339
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  u16ChannelMa    2   21[COMRAM] unsigned int 
  3004 ;;  pinValue        2   19[COMRAM] unsigned int 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  2   17[COMRAM] unsigned int 
  3007 ;; Registers used:
  3008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3014 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3015 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3017 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3018 ;;Total ram usage:        6 bytes
  3019 ;; Hardware stack levels used: 1
  3020 ;; Hardware stack levels required when called: 3
  3021 ;; This function calls:
  3022 ;;		_ADC_u16ReadAdcValue
  3023 ;;		_PCS_T16GetInputPortC
  3024 ;; This function is called by:
  3025 ;;		_SGL_BlinkEventPoll
  3026 ;;		_LIGHTS_BrakeRun
  3027 ;;		_SGL_HeadLightEventPoll
  3028 ;;		_LIGHTS_DemoEventPoll
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           	psect	text27
  3033   0009D0                     __ptext27:
  3034                           	callstack 0
  3035   0009D0                     _IOC_T16GetInputPort:
  3036                           	callstack 0
  3037   0009D0  FFFF               	dw	65535	; assembler added errata NOP
  3038                           
  3039                           ;ioc.c: 21: T_U16 pinValue = 0;
  3040                           
  3041                           ;incstack = 0
  3042   0009D2  0E00               	movlw	0
  3043   0009D4  6E42               	movwf	(IOC_T16GetInputPort@pinValue+1)^0,c
  3044   0009D6  0E00               	movlw	0
  3045   0009D8  6E41               	movwf	IOC_T16GetInputPort@pinValue^0,c
  3046                           
  3047                           ;ioc.c: 22: T_U16 u16ChannelMask = (u16ChannelSelect&0xFF00);
  3048   0009DA  0E00               	movlw	0
  3049   0009DC  143F               	andwf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3050   0009DE  6E43               	movwf	IOC_T16GetInputPort@u16ChannelMask^0,c
  3051   0009E0  0EFF               	movlw	255
  3052   0009E2  1440               	andwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,w,c
  3053   0009E4  6E44               	movwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,c
  3054                           
  3055                           ;ioc.c: 24: if(u16ChannelMask == IOC_PORTC)
  3056   0009E6  5043               	movf	IOC_T16GetInputPort@u16ChannelMask^0,w,c
  3057   0009E8  1044               	iorwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,w,c
  3058   0009EA  A4D8               	btfss	status,2,c
  3059   0009EC  D008               	goto	l1812
  3060                           
  3061                           ;ioc.c: 25: {;ioc.c: 26: pinValue = PCS_T16GetInputPortC(u16ChannelSelect);
  3062   0009EE  503F               	movf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3063   0009F0  EC63  F004         	call	_PCS_T16GetInputPortC
  3064   0009F4  C035  F041         	movff	?_PCS_T16GetInputPortC,IOC_T16GetInputPort@pinValue
  3065   0009F8  C036  F042         	movff	?_PCS_T16GetInputPortC+1,IOC_T16GetInputPort@pinValue+1
  3066                           
  3067                           ;ioc.c: 27: }
  3068   0009FC  D00D               	goto	l1816
  3069   0009FE                     l1812:
  3070   0009FE  FFFF               	dw	65535	; assembler added errata NOP
  3071                           
  3072                           ;ioc.c: 28: else if(u16ChannelMask == IOC_PORTA)
  3073   000A00  0E03               	movlw	3
  3074   000A02  1844               	xorwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,w,c
  3075   000A04  1043               	iorwf	IOC_T16GetInputPort@u16ChannelMask^0,w,c
  3076   000A06  A4D8               	btfss	status,2,c
  3077   000A08  D007               	goto	l1816
  3078                           
  3079                           ;ioc.c: 29: {;ioc.c: 30: pinValue = ADC_u16ReadAdcValue(u16ChannelSelect);
  3080   000A0A  503F               	movf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3081   000A0C  EC5F  F005         	call	_ADC_u16ReadAdcValue
  3082   000A10  C035  F041         	movff	?_ADC_u16ReadAdcValue,IOC_T16GetInputPort@pinValue
  3083   000A14  C036  F042         	movff	?_ADC_u16ReadAdcValue+1,IOC_T16GetInputPort@pinValue+1
  3084   000A18                     l1816:
  3085   000A18  FFFF               	dw	65535	; assembler added errata NOP
  3086                           
  3087                           ;ioc.c: 31: };ioc.c: 33: return pinValue;
  3088   000A1A  C041  F03F         	movff	IOC_T16GetInputPort@pinValue,?_IOC_T16GetInputPort
  3089   000A1E  C042  F040         	movff	IOC_T16GetInputPort@pinValue+1,?_IOC_T16GetInputPort+1
  3090   000A22  0012               	return		;funcret
  3091   000A24  FFFF               	dw	65535	; errata NOP
  3092   000A26                     __end_of_IOC_T16GetInputPort:
  3093                           	callstack 0
  3094                           
  3095 ;; *************** function _PCS_T16GetInputPortC *****************
  3096 ;; Defined at:
  3097 ;;		line 50 in file "pcs.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;  u8BitNumber     1    wreg     const unsigned char 
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  u8BitNumber     1   15[COMRAM] const unsigned char 
  3102 ;;  u8BitNumberV    1   16[COMRAM] unsigned char 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  2    7[COMRAM] unsigned int 
  3105 ;; Registers used:
  3106 ;;		wreg, status,2, status,0
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3112 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3113 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3114 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3115 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3116 ;;Total ram usage:       10 bytes
  3117 ;; Hardware stack levels used: 1
  3118 ;; Hardware stack levels required when called: 2
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_IOC_T16GetInputPort
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text28
  3127   0008C6                     __ptext28:
  3128                           	callstack 0
  3129   0008C6                     _PCS_T16GetInputPortC:
  3130                           	callstack 0
  3131   0008C6  FFFF               	dw	65535	; assembler added errata NOP
  3132                           
  3133                           ;incstack = 0
  3134                           ;PCS_T16GetInputPortC@u8BitNumber stored from wreg
  3135   0008C8  6E3D               	movwf	PCS_T16GetInputPortC@u8BitNumber^0,c
  3136                           
  3137                           ;pcs.c: 52: T_U8 u8BitNumberValue = u8BitNumber<=4 ? u8BitNumber : 4;
  3138   0008CA  0E04               	movlw	4
  3139   0008CC  643D               	cpfsgt	PCS_T16GetInputPortC@u8BitNumber^0,c
  3140   0008CE  D005               	goto	l127
  3141   0008D0  0E00               	movlw	0
  3142   0008D2  6E3C               	movwf	(_PCS_T16GetInputPortC$716+1)^0,c
  3143   0008D4  0E04               	movlw	4
  3144   0008D6  6E3B               	movwf	_PCS_T16GetInputPortC$716^0,c
  3145   0008D8  D004               	goto	l129
  3146   0008DA                     l127:
  3147   0008DA  FFFF               	dw	65535	; assembler added errata NOP
  3148   0008DC  C03D  F03B         	movff	PCS_T16GetInputPortC@u8BitNumber,_PCS_T16GetInputPortC$716
  3149   0008E0  6A3C               	clrf	(_PCS_T16GetInputPortC$716+1)^0,c
  3150   0008E2                     l129:
  3151   0008E2  FFFF               	dw	65535	; assembler added errata NOP
  3152   0008E4  C03B  F03E         	movff	_PCS_T16GetInputPortC$716,PCS_T16GetInputPortC@u8BitNumberValue
  3153                           
  3154                           ;pcs.c: 53: return (PORTC & 0x01<<u8BitNumberValue)>>u8BitNumberValue;
  3155   0008E8  C03E  F037         	movff	PCS_T16GetInputPortC@u8BitNumberValue,??_PCS_T16GetInputPortC
  3156   0008EC  C03E  F038         	movff	PCS_T16GetInputPortC@u8BitNumberValue,??_PCS_T16GetInputPortC+1
  3157   0008F0  0E01               	movlw	1
  3158   0008F2  6E39               	movwf	(??_PCS_T16GetInputPortC+2)^0,c
  3159   0008F4  2A38               	incf	(??_PCS_T16GetInputPortC+1)^0,f,c
  3160   0008F6  D003               	goto	u1184
  3161   0008F8                     u1185:
  3162   0008F8  FFFF               	dw	65535	; assembler added errata NOP
  3163   0008FA  90D8               	bcf	status,0,c
  3164   0008FC  3639               	rlcf	(??_PCS_T16GetInputPortC+2)^0,f,c
  3165   0008FE                     u1184:
  3166   0008FE  FFFF               	dw	65535	; assembler added errata NOP
  3167   000900  2E38               	decfsz	(??_PCS_T16GetInputPortC+1)^0,f,c
  3168   000902  D7FA               	goto	u1185
  3169   000904  5039               	movf	(??_PCS_T16GetInputPortC+2)^0,w,c
  3170   000906  1482               	andwf	130,w,c	;volatile
  3171   000908  6E3A               	movwf	(??_PCS_T16GetInputPortC+3)^0,c
  3172   00090A  2A37               	incf	??_PCS_T16GetInputPortC^0,f,c
  3173   00090C  D003               	goto	u1194
  3174   00090E                     u1195:
  3175   00090E  FFFF               	dw	65535	; assembler added errata NOP
  3176   000910  90D8               	bcf	status,0,c
  3177   000912  323A               	rrcf	(??_PCS_T16GetInputPortC+3)^0,f,c
  3178   000914                     u1194:
  3179   000914  FFFF               	dw	65535	; assembler added errata NOP
  3180   000916  2E37               	decfsz	??_PCS_T16GetInputPortC^0,f,c
  3181   000918  D7FA               	goto	u1195
  3182   00091A  503A               	movf	(??_PCS_T16GetInputPortC+3)^0,w,c
  3183   00091C  6E35               	movwf	?_PCS_T16GetInputPortC^0,c
  3184   00091E  6A36               	clrf	(?_PCS_T16GetInputPortC+1)^0,c
  3185   000920  0012               	return		;funcret
  3186   000922  FFFF               	dw	65535	; errata NOP
  3187   000924                     __end_of_PCS_T16GetInputPortC:
  3188                           	callstack 0
  3189                           
  3190 ;; *************** function _ADC_u16ReadAdcValue *****************
  3191 ;; Defined at:
  3192 ;;		line 48 in file "adc.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  U8Channel       1    wreg     const unsigned char 
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  U8Channel       1   12[COMRAM] const unsigned char 
  3197 ;;  U8ChannelVal    1   11[COMRAM] unsigned char 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  2    7[COMRAM] unsigned int 
  3200 ;; Registers used:
  3201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3208 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3210 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3211 ;;Total ram usage:        6 bytes
  3212 ;; Hardware stack levels used: 1
  3213 ;; Hardware stack levels required when called: 2
  3214 ;; This function calls:
  3215 ;;		Nothing
  3216 ;; This function is called by:
  3217 ;;		_IOC_T16GetInputPort
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text29
  3222   000ABE                     __ptext29:
  3223                           	callstack 0
  3224   000ABE                     _ADC_u16ReadAdcValue:
  3225                           	callstack 0
  3226   000ABE  FFFF               	dw	65535	; assembler added errata NOP
  3227                           
  3228                           ;incstack = 0
  3229                           ;ADC_u16ReadAdcValue@U8Channel stored from wreg
  3230   000AC0  6E3A               	movwf	ADC_u16ReadAdcValue@U8Channel^0,c
  3231                           
  3232                           ;adc.c: 50: T_U8 U8ChannelValue = U8Channel<=1 ? U8Channel : 1;
  3233   000AC2  0E01               	movlw	1
  3234   000AC4  643A               	cpfsgt	ADC_u16ReadAdcValue@U8Channel^0,c
  3235   000AC6  D005               	goto	l59
  3236   000AC8  0E00               	movlw	0
  3237   000ACA  6E38               	movwf	(_ADC_u16ReadAdcValue$374+1)^0,c
  3238   000ACC  0E01               	movlw	1
  3239   000ACE  6E37               	movwf	_ADC_u16ReadAdcValue$374^0,c
  3240   000AD0  D004               	goto	l61
  3241   000AD2                     l59:
  3242   000AD2  FFFF               	dw	65535	; assembler added errata NOP
  3243   000AD4  C03A  F037         	movff	ADC_u16ReadAdcValue@U8Channel,_ADC_u16ReadAdcValue$374
  3244   000AD8  6A38               	clrf	(_ADC_u16ReadAdcValue$374+1)^0,c
  3245   000ADA                     l61:
  3246   000ADA  FFFF               	dw	65535	; assembler added errata NOP
  3247   000ADC  C037  F039         	movff	_ADC_u16ReadAdcValue$374,ADC_u16ReadAdcValue@U8ChannelValue
  3248                           
  3249                           ;adc.c: 51: return au16AdcReadValue[U8ChannelValue];
  3250   000AE0  5039               	movf	ADC_u16ReadAdcValue@U8ChannelValue^0,w,c
  3251   000AE2  0D02               	mullw	2
  3252   000AE4  0E12               	movlw	low _au16AdcReadValue
  3253   000AE6  24F3               	addwf	243,w,c
  3254   000AE8  6ED9               	movwf	fsr2l,c
  3255   000AEA  0E00               	movlw	high _au16AdcReadValue
  3256   000AEC  20F4               	addwfc	prodh,w,c
  3257   000AEE  6EDA               	movwf	fsr2h,c
  3258   000AF0  CFDE F035          	movff	postinc2,?_ADC_u16ReadAdcValue
  3259   000AF4  CFDD F036          	movff	postdec2,?_ADC_u16ReadAdcValue+1
  3260   000AF8  0012               	return		;funcret
  3261   000AFA  FFFF               	dw	65535	; errata NOP
  3262   000AFC                     __end_of_ADC_u16ReadAdcValue:
  3263                           	callstack 0
  3264                           
  3265 ;; *************** function _IOC_vSetOutputPort *****************
  3266 ;; Defined at:
  3267 ;;		line 5 in file "ioc.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;  u16ChannelSe    2   23[COMRAM] const enum E10327
  3270 ;;  u8Value         1   25[COMRAM] const unsigned char 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  u16ChannelMa    2   26[COMRAM] unsigned int 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3282 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3285 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3286 ;;Total ram usage:        5 bytes
  3287 ;; Hardware stack levels used: 1
  3288 ;; Hardware stack levels required when called: 3
  3289 ;; This function calls:
  3290 ;;		_PCS_vSetOutputPortD
  3291 ;;		_PCS_vSetOutputPortE
  3292 ;; This function is called by:
  3293 ;;		_SGL_toggleAllHazardLights
  3294 ;;		_SGL_toggleSideHazardLights
  3295 ;;		_SGL_setAllHazardLights
  3296 ;;		_SGL_setSideHazardLights
  3297 ;;		_LIGHTS_BrakeInit
  3298 ;;		_LIGHTS_BrakeRun
  3299 ;;		_SGL_HeadLightPasiveState
  3300 ;;		_SGL_HeadLightActiveState
  3301 ;;		_LIGHTS_DemoState1
  3302 ;;		_LIGHTS_DemoState2
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text30
  3307   000AFC                     __ptext30:
  3308                           	callstack 0
  3309   000AFC                     _IOC_vSetOutputPort:
  3310                           	callstack 0
  3311   000AFC  FFFF               	dw	65535	; assembler added errata NOP
  3312                           
  3313                           ;ioc.c: 7: T_U16 u16ChannelMask = (u16ChannelSelect&0xFF00);
  3314                           
  3315                           ;incstack = 0
  3316   000AFE  0E00               	movlw	0
  3317   000B00  1445               	andwf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3318   000B02  6E48               	movwf	IOC_vSetOutputPort@u16ChannelMask^0,c
  3319   000B04  0EFF               	movlw	255
  3320   000B06  1446               	andwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,w,c
  3321   000B08  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,c
  3322                           
  3323                           ;ioc.c: 9: if(u16ChannelMask == IOC_PORTD)
  3324   000B0A  0449               	decf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,w,c
  3325   000B0C  1048               	iorwf	IOC_vSetOutputPort@u16ChannelMask^0,w,c
  3326   000B0E  A4D8               	btfss	status,2,c
  3327   000B10  D006               	goto	l1762
  3328                           
  3329                           ;ioc.c: 10: {;ioc.c: 11: PCS_vSetOutputPortD(u16ChannelSelect, u8Value);
  3330   000B12  C047  F035         	movff	IOC_vSetOutputPort@u8Value,PCS_vSetOutputPortD@u8Value
  3331   000B16  5045               	movf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3332   000B18  EC3A  F003         	call	_PCS_vSetOutputPortD
  3333                           
  3334                           ;ioc.c: 12: }
  3335   000B1C  D00B               	goto	l214
  3336   000B1E                     l1762:
  3337   000B1E  FFFF               	dw	65535	; assembler added errata NOP
  3338                           
  3339                           ;ioc.c: 13: else if(u16ChannelMask == IOC_PORTE)
  3340   000B20  0E02               	movlw	2
  3341   000B22  1849               	xorwf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,w,c
  3342   000B24  1048               	iorwf	IOC_vSetOutputPort@u16ChannelMask^0,w,c
  3343   000B26  A4D8               	btfss	status,2,c
  3344   000B28  D005               	goto	l214
  3345                           
  3346                           ;ioc.c: 14: {;ioc.c: 15: PCS_vSetOutputPortE(u16ChannelSelect, u8Value);
  3347   000B2A  C047  F035         	movff	IOC_vSetOutputPort@u8Value,PCS_vSetOutputPortE@u8Value
  3348   000B2E  5045               	movf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3349   000B30  ECFB  F002         	call	_PCS_vSetOutputPortE
  3350   000B34                     l214:
  3351   000B34  FFFF               	dw	65535	; assembler added errata NOP
  3352   000B36  0012               	return		;funcret
  3353   000B38  FFFF               	dw	65535	; errata NOP
  3354   000B3A                     __end_of_IOC_vSetOutputPort:
  3355                           	callstack 0
  3356                           
  3357 ;; *************** function _PCS_vSetOutputPortE *****************
  3358 ;; Defined at:
  3359 ;;		line 35 in file "pcs.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  u8BitNumber     1    wreg     const unsigned char 
  3362 ;;  u8Value         1    7[COMRAM] const unsigned char 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  u8BitNumber     1   13[COMRAM] const unsigned char 
  3365 ;;  u8BitNumberV    1   14[COMRAM] unsigned char 
  3366 ;;  u8BitValue      1   12[COMRAM] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  1    wreg      void 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3376 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3377 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3378 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3379 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3380 ;;Total ram usage:        8 bytes
  3381 ;; Hardware stack levels used: 1
  3382 ;; Hardware stack levels required when called: 2
  3383 ;; This function calls:
  3384 ;;		Nothing
  3385 ;; This function is called by:
  3386 ;;		_IOC_vSetOutputPort
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text31
  3391   0005F6                     __ptext31:
  3392                           	callstack 0
  3393   0005F6                     _PCS_vSetOutputPortE:
  3394                           	callstack 0
  3395   0005F6  FFFF               	dw	65535	; assembler added errata NOP
  3396                           
  3397                           ;incstack = 0
  3398                           ;PCS_vSetOutputPortE@u8BitNumber stored from wreg
  3399   0005F8  6E3B               	movwf	PCS_vSetOutputPortE@u8BitNumber^0,c
  3400                           
  3401                           ;pcs.c: 37: T_U8 u8BitValue = u8Value>0 ? 1 : 0;
  3402   0005FA  5035               	movf	PCS_vSetOutputPortE@u8Value^0,w,c
  3403   0005FC  B4D8               	btfsc	status,2,c
  3404   0005FE  D002               	goto	u1000
  3405   000600  0E01               	movlw	1
  3406   000602  D002               	goto	u1010
  3407   000604                     u1000:
  3408   000604  FFFF               	dw	65535	; assembler added errata NOP
  3409   000606  0E00               	movlw	0
  3410   000608                     u1010:
  3411   000608  FFFF               	dw	65535	; assembler added errata NOP
  3412   00060A  6E3A               	movwf	PCS_vSetOutputPortE@u8BitValue^0,c
  3413                           
  3414                           ;pcs.c: 38: T_U8 u8BitNumberValue = u8BitNumber<=1 ? u8BitNumber : 1;
  3415   00060C  0E01               	movlw	1
  3416   00060E  643B               	cpfsgt	PCS_vSetOutputPortE@u8BitNumber^0,c
  3417   000610  D005               	goto	l118
  3418   000612  0E00               	movlw	0
  3419   000614  6E39               	movwf	(_PCS_vSetOutputPortE$712+1)^0,c
  3420   000616  0E01               	movlw	1
  3421   000618  6E38               	movwf	_PCS_vSetOutputPortE$712^0,c
  3422   00061A  D004               	goto	l120
  3423   00061C                     l118:
  3424   00061C  FFFF               	dw	65535	; assembler added errata NOP
  3425   00061E  C03B  F038         	movff	PCS_vSetOutputPortE@u8BitNumber,_PCS_vSetOutputPortE$712
  3426   000622  6A39               	clrf	(_PCS_vSetOutputPortE$712+1)^0,c
  3427   000624                     l120:
  3428   000624  FFFF               	dw	65535	; assembler added errata NOP
  3429   000626  C038  F03C         	movff	_PCS_vSetOutputPortE$712,PCS_vSetOutputPortE@u8BitNumberValue
  3430                           
  3431                           ;pcs.c: 40: if(1 == u8BitValue)
  3432   00062A  043A               	decf	PCS_vSetOutputPortE@u8BitValue^0,w,c
  3433   00062C  A4D8               	btfss	status,2,c
  3434   00062E  D00F               	goto	l1720
  3435                           
  3436                           ;pcs.c: 41: {;pcs.c: 42: PORTE |= (0x01<<u8BitNumberValue);
  3437   000630  C03C  F036         	movff	PCS_vSetOutputPortE@u8BitNumberValue,??_PCS_vSetOutputPortE
  3438   000634  0E01               	movlw	1
  3439   000636  6E37               	movwf	(??_PCS_vSetOutputPortE+1)^0,c
  3440   000638  2A36               	incf	??_PCS_vSetOutputPortE^0,f,c
  3441   00063A  D003               	goto	u1044
  3442   00063C                     u1045:
  3443   00063C  FFFF               	dw	65535	; assembler added errata NOP
  3444   00063E  90D8               	bcf	status,0,c
  3445   000640  3637               	rlcf	(??_PCS_vSetOutputPortE+1)^0,f,c
  3446   000642                     u1044:
  3447   000642  FFFF               	dw	65535	; assembler added errata NOP
  3448   000644  2E36               	decfsz	??_PCS_vSetOutputPortE^0,f,c
  3449   000646  D7FA               	goto	u1045
  3450   000648  5037               	movf	(??_PCS_vSetOutputPortE+1)^0,w,c
  3451   00064A  1284               	iorwf	132,f,c	;volatile
  3452                           
  3453                           ;pcs.c: 43: }
  3454   00064C  D010               	goto	l123
  3455   00064E                     l1720:
  3456   00064E  FFFF               	dw	65535	; assembler added errata NOP
  3457                           
  3458                           ;pcs.c: 44: else;pcs.c: 45: {;pcs.c: 46: PORTE &= ~(0x01<<u8BitNumberValue);
  3459   000650  C03C  F036         	movff	PCS_vSetOutputPortE@u8BitNumberValue,??_PCS_vSetOutputPortE
  3460   000654  0E01               	movlw	1
  3461   000656  6E37               	movwf	(??_PCS_vSetOutputPortE+1)^0,c
  3462   000658  2A36               	incf	??_PCS_vSetOutputPortE^0,f,c
  3463   00065A  D003               	goto	u1054
  3464   00065C                     u1055:
  3465   00065C  FFFF               	dw	65535	; assembler added errata NOP
  3466   00065E  90D8               	bcf	status,0,c
  3467   000660  3637               	rlcf	(??_PCS_vSetOutputPortE+1)^0,f,c
  3468   000662                     u1054:
  3469   000662  FFFF               	dw	65535	; assembler added errata NOP
  3470   000664  2E36               	decfsz	??_PCS_vSetOutputPortE^0,f,c
  3471   000666  D7FA               	goto	u1055
  3472   000668  5037               	movf	(??_PCS_vSetOutputPortE+1)^0,w,c
  3473   00066A  0AFF               	xorlw	255
  3474   00066C  1684               	andwf	132,f,c	;volatile
  3475   00066E                     l123:
  3476   00066E  FFFF               	dw	65535	; assembler added errata NOP
  3477   000670  0012               	return		;funcret
  3478   000672  FFFF               	dw	65535	; errata NOP
  3479   000674                     __end_of_PCS_vSetOutputPortE:
  3480                           	callstack 0
  3481                           
  3482 ;; *************** function _PCS_vSetOutputPortD *****************
  3483 ;; Defined at:
  3484 ;;		line 20 in file "pcs.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  u8BitNumber     1    wreg     const unsigned char 
  3487 ;;  u8Value         1    7[COMRAM] const unsigned char 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  u8BitNumber     1   13[COMRAM] const unsigned char 
  3490 ;;  u8BitNumberV    1   14[COMRAM] unsigned char 
  3491 ;;  u8BitValue      1   12[COMRAM] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      void 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3501 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3502 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3503 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3504 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3505 ;;Total ram usage:        8 bytes
  3506 ;; Hardware stack levels used: 1
  3507 ;; Hardware stack levels required when called: 2
  3508 ;; This function calls:
  3509 ;;		Nothing
  3510 ;; This function is called by:
  3511 ;;		_IOC_vSetOutputPort
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text32
  3516   000674                     __ptext32:
  3517                           	callstack 0
  3518   000674                     _PCS_vSetOutputPortD:
  3519                           	callstack 0
  3520   000674  FFFF               	dw	65535	; assembler added errata NOP
  3521                           
  3522                           ;incstack = 0
  3523                           ;PCS_vSetOutputPortD@u8BitNumber stored from wreg
  3524   000676  6E3B               	movwf	PCS_vSetOutputPortD@u8BitNumber^0,c
  3525                           
  3526                           ;pcs.c: 22: T_U8 u8BitValue = u8Value>0 ? 1 : 0;
  3527   000678  5035               	movf	PCS_vSetOutputPortD@u8Value^0,w,c
  3528   00067A  B4D8               	btfsc	status,2,c
  3529   00067C  D002               	goto	u940
  3530   00067E  0E01               	movlw	1
  3531   000680  D002               	goto	u950
  3532   000682                     u940:
  3533   000682  FFFF               	dw	65535	; assembler added errata NOP
  3534   000684  0E00               	movlw	0
  3535   000686                     u950:
  3536   000686  FFFF               	dw	65535	; assembler added errata NOP
  3537   000688  6E3A               	movwf	PCS_vSetOutputPortD@u8BitValue^0,c
  3538                           
  3539                           ;pcs.c: 23: T_U8 u8BitNumberValue = u8BitNumber<=7 ? u8BitNumber : 7;
  3540   00068A  0E07               	movlw	7
  3541   00068C  643B               	cpfsgt	PCS_vSetOutputPortD@u8BitNumber^0,c
  3542   00068E  D005               	goto	l109
  3543   000690  0E00               	movlw	0
  3544   000692  6E39               	movwf	(_PCS_vSetOutputPortD$706+1)^0,c
  3545   000694  0E07               	movlw	7
  3546   000696  6E38               	movwf	_PCS_vSetOutputPortD$706^0,c
  3547   000698  D004               	goto	l111
  3548   00069A                     l109:
  3549   00069A  FFFF               	dw	65535	; assembler added errata NOP
  3550   00069C  C03B  F038         	movff	PCS_vSetOutputPortD@u8BitNumber,_PCS_vSetOutputPortD$706
  3551   0006A0  6A39               	clrf	(_PCS_vSetOutputPortD$706+1)^0,c
  3552   0006A2                     l111:
  3553   0006A2  FFFF               	dw	65535	; assembler added errata NOP
  3554   0006A4  C038  F03C         	movff	_PCS_vSetOutputPortD$706,PCS_vSetOutputPortD@u8BitNumberValue
  3555                           
  3556                           ;pcs.c: 25: if(1 == u8BitValue)
  3557   0006A8  043A               	decf	PCS_vSetOutputPortD@u8BitValue^0,w,c
  3558   0006AA  A4D8               	btfss	status,2,c
  3559   0006AC  D00F               	goto	l1708
  3560                           
  3561                           ;pcs.c: 26: {;pcs.c: 27: PORTD |= (0x01<<u8BitNumberValue);
  3562   0006AE  C03C  F036         	movff	PCS_vSetOutputPortD@u8BitNumberValue,??_PCS_vSetOutputPortD
  3563   0006B2  0E01               	movlw	1
  3564   0006B4  6E37               	movwf	(??_PCS_vSetOutputPortD+1)^0,c
  3565   0006B6  2A36               	incf	??_PCS_vSetOutputPortD^0,f,c
  3566   0006B8  D003               	goto	u984
  3567   0006BA                     u985:
  3568   0006BA  FFFF               	dw	65535	; assembler added errata NOP
  3569   0006BC  90D8               	bcf	status,0,c
  3570   0006BE  3637               	rlcf	(??_PCS_vSetOutputPortD+1)^0,f,c
  3571   0006C0                     u984:
  3572   0006C0  FFFF               	dw	65535	; assembler added errata NOP
  3573   0006C2  2E36               	decfsz	??_PCS_vSetOutputPortD^0,f,c
  3574   0006C4  D7FA               	goto	u985
  3575   0006C6  5037               	movf	(??_PCS_vSetOutputPortD+1)^0,w,c
  3576   0006C8  1283               	iorwf	131,f,c	;volatile
  3577                           
  3578                           ;pcs.c: 28: }
  3579   0006CA  D010               	goto	l114
  3580   0006CC                     l1708:
  3581   0006CC  FFFF               	dw	65535	; assembler added errata NOP
  3582                           
  3583                           ;pcs.c: 29: else;pcs.c: 30: {;pcs.c: 31: PORTD &= ~(0x01<<u8BitNumberValue);
  3584   0006CE  C03C  F036         	movff	PCS_vSetOutputPortD@u8BitNumberValue,??_PCS_vSetOutputPortD
  3585   0006D2  0E01               	movlw	1
  3586   0006D4  6E37               	movwf	(??_PCS_vSetOutputPortD+1)^0,c
  3587   0006D6  2A36               	incf	??_PCS_vSetOutputPortD^0,f,c
  3588   0006D8  D003               	goto	u994
  3589   0006DA                     u995:
  3590   0006DA  FFFF               	dw	65535	; assembler added errata NOP
  3591   0006DC  90D8               	bcf	status,0,c
  3592   0006DE  3637               	rlcf	(??_PCS_vSetOutputPortD+1)^0,f,c
  3593   0006E0                     u994:
  3594   0006E0  FFFF               	dw	65535	; assembler added errata NOP
  3595   0006E2  2E36               	decfsz	??_PCS_vSetOutputPortD^0,f,c
  3596   0006E4  D7FA               	goto	u995
  3597   0006E6  5037               	movf	(??_PCS_vSetOutputPortD+1)^0,w,c
  3598   0006E8  0AFF               	xorlw	255
  3599   0006EA  1683               	andwf	131,f,c	;volatile
  3600   0006EC                     l114:
  3601   0006EC  FFFF               	dw	65535	; assembler added errata NOP
  3602   0006EE  0012               	return		;funcret
  3603   0006F0  FFFF               	dw	65535	; errata NOP
  3604   0006F2                     __end_of_PCS_vSetOutputPortD:
  3605                           	callstack 0
  3606                           
  3607 ;; *************** function _TASK_vTask100ms *****************
  3608 ;; Defined at:
  3609 ;;		line 27 in file "tasks.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;		None
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;		None
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		None
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3627 ;;Total ram usage:        0 bytes
  3628 ;; Hardware stack levels used: 1
  3629 ;; Hardware stack levels required when called: 2
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_SCHED_vStartScheduler
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text33
  3638   000D6E                     __ptext33:
  3639                           	callstack 0
  3640   000D6E                     _TASK_vTask100ms:
  3641                           	callstack 0
  3642   000D6E  FFFF               	dw	65535	; assembler added errata NOP
  3643                           
  3644                           ;incstack = 0
  3645   000D70  0012               	return		;funcret
  3646   000D72  FFFF               	dw	65535	; errata NOP
  3647   000D74                     __end_of_TASK_vTask100ms:
  3648                           	callstack 0
  3649                           
  3650 ;; *************** function _SCHED_vInitSystem *****************
  3651 ;; Defined at:
  3652 ;;		line 13 in file "sched.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;		None
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      void 
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3670 ;;Total ram usage:        0 bytes
  3671 ;; Hardware stack levels used: 1
  3672 ;; Hardware stack levels required when called: 3
  3673 ;; This function calls:
  3674 ;;		_ADC_vInit
  3675 ;;		_INT_vInit
  3676 ;;		_PCS_vInit
  3677 ;;		_TIM_vInit
  3678 ;; This function is called by:
  3679 ;;		_main
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text34
  3684   000CF0                     __ptext34:
  3685                           	callstack 0
  3686   000CF0                     _SCHED_vInitSystem:
  3687                           	callstack 0
  3688   000CF0  FFFF               	dw	65535	; assembler added errata NOP
  3689                           
  3690                           ;sched.c: 15: PCS_vInit();
  3691                           
  3692                           ;incstack = 0
  3693   000CF2  EC5F  F006         	call	_PCS_vInit	;wreg free
  3694                           
  3695                           ;sched.c: 16: INT_vInit();
  3696   000CF6  EC8E  F006         	call	_INT_vInit	;wreg free
  3697                           
  3698                           ;sched.c: 17: ADC_vInit();
  3699   000CFA  EC3D  F005         	call	_ADC_vInit	;wreg free
  3700                           
  3701                           ;sched.c: 18: TIM_vInit();
  3702   000CFE  ECD5  F005         	call	_TIM_vInit	;wreg free
  3703   000D02  0012               	return		;funcret
  3704   000D04  FFFF               	dw	65535	; errata NOP
  3705   000D06                     __end_of_SCHED_vInitSystem:
  3706                           	callstack 0
  3707                           
  3708 ;; *************** function _TIM_vInit *****************
  3709 ;; Defined at:
  3710 ;;		line 3 in file "tim.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;		None
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;		None
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  1    wreg      void 
  3717 ;; Registers used:
  3718 ;;		wreg, status,2
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3728 ;;Total ram usage:        0 bytes
  3729 ;; Hardware stack levels used: 1
  3730 ;; Hardware stack levels required when called: 2
  3731 ;; This function calls:
  3732 ;;		Nothing
  3733 ;; This function is called by:
  3734 ;;		_SCHED_vInitSystem
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text35
  3739   000BAA                     __ptext35:
  3740                           	callstack 0
  3741   000BAA                     _TIM_vInit:
  3742                           	callstack 0
  3743   000BAA  FFFF               	dw	65535	; assembler added errata NOP
  3744                           
  3745                           ;tim.c: 5: T2CONbits.TMR2ON = 0b0;
  3746                           
  3747                           ;incstack = 0
  3748   000BAC  94CA               	bcf	202,2,c	;volatile
  3749                           
  3750                           ;tim.c: 6: TMR2 = 0x00;
  3751   000BAE  0E00               	movlw	0
  3752   000BB0  6ECC               	movwf	204,c	;volatile
  3753                           
  3754                           ;tim.c: 7: T2CON = 0x00;
  3755   000BB2  0E00               	movlw	0
  3756   000BB4  6ECA               	movwf	202,c	;volatile
  3757                           
  3758                           ;tim.c: 8: PR2 = 0x00;
  3759   000BB6  0E00               	movlw	0
  3760   000BB8  6ECB               	movwf	203,c	;volatile
  3761                           
  3762                           ;tim.c: 10: T2CONbits.TOUTPS = 0b0100;
  3763   000BBA  50CA               	movf	202,w,c	;volatile
  3764   000BBC  0B87               	andlw	-121
  3765   000BBE  0920               	iorlw	32
  3766   000BC0  6ECA               	movwf	202,c	;volatile
  3767                           
  3768                           ;tim.c: 11: T2CONbits.T2CKPS = 0b01;
  3769   000BC2  50CA               	movf	202,w,c	;volatile
  3770   000BC4  0BFC               	andlw	-4
  3771   000BC6  0901               	iorlw	1
  3772   000BC8  6ECA               	movwf	202,c	;volatile
  3773                           
  3774                           ;tim.c: 12: PR2 = 125;
  3775   000BCA  0E7D               	movlw	125
  3776   000BCC  6ECB               	movwf	203,c	;volatile
  3777                           
  3778                           ;tim.c: 14: PIR1bits.TMR2IF = 0b0;
  3779   000BCE  929E               	bcf	158,1,c	;volatile
  3780                           
  3781                           ;tim.c: 15: IPR1bits.TMR2IP = 0b1;
  3782   000BD0  829F               	bsf	159,1,c	;volatile
  3783                           
  3784                           ;tim.c: 16: PIE1bits.TMR2IE = 0b1;
  3785   000BD2  829D               	bsf	157,1,c	;volatile
  3786                           
  3787                           ;tim.c: 17: INTCONbits.PEIE = 1;
  3788   000BD4  8CF2               	bsf	242,6,c	;volatile
  3789                           
  3790                           ;tim.c: 18: INTCONbits.GIE = 1;
  3791   000BD6  8EF2               	bsf	242,7,c	;volatile
  3792                           
  3793                           ;tim.c: 20: T2CONbits.TMR2ON = 0b1;
  3794   000BD8  84CA               	bsf	202,2,c	;volatile
  3795   000BDA  0012               	return		;funcret
  3796   000BDC  FFFF               	dw	65535	; errata NOP
  3797   000BDE                     __end_of_TIM_vInit:
  3798                           	callstack 0
  3799                           
  3800 ;; *************** function _PCS_vInit *****************
  3801 ;; Defined at:
  3802 ;;		line 3 in file "pcs.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;		None
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		wreg, status,2
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3820 ;;Total ram usage:        0 bytes
  3821 ;; Hardware stack levels used: 1
  3822 ;; Hardware stack levels required when called: 2
  3823 ;; This function calls:
  3824 ;;		Nothing
  3825 ;; This function is called by:
  3826 ;;		_SCHED_vInitSystem
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text36
  3831   000CBE                     __ptext36:
  3832                           	callstack 0
  3833   000CBE                     _PCS_vInit:
  3834                           	callstack 0
  3835   000CBE  FFFF               	dw	65535	; assembler added errata NOP
  3836                           
  3837                           ;pcs.c: 5: TRISAbits.RA0 = 1;
  3838                           
  3839                           ;incstack = 0
  3840   000CC0  8092               	bsf	146,0,c	;volatile
  3841                           
  3842                           ;pcs.c: 6: TRISAbits.RA1 = 1;
  3843   000CC2  8292               	bsf	146,1,c	;volatile
  3844                           
  3845                           ;pcs.c: 8: TRISCbits.RC0 = 1;
  3846   000CC4  8094               	bsf	148,0,c	;volatile
  3847                           
  3848                           ;pcs.c: 9: TRISCbits.RC1 = 1;
  3849   000CC6  8294               	bsf	148,1,c	;volatile
  3850                           
  3851                           ;pcs.c: 10: TRISCbits.RC2 = 1;
  3852   000CC8  8494               	bsf	148,2,c	;volatile
  3853                           
  3854                           ;pcs.c: 11: TRISCbits.RC3 = 1;
  3855   000CCA  8694               	bsf	148,3,c	;volatile
  3856                           
  3857                           ;pcs.c: 12: TRISCbits.RC4 = 1;
  3858   000CCC  8894               	bsf	148,4,c	;volatile
  3859                           
  3860                           ;pcs.c: 14: TRISD = 0x00;
  3861   000CCE  0E00               	movlw	0
  3862   000CD0  6E95               	movwf	149,c	;volatile
  3863                           
  3864                           ;pcs.c: 16: TRISEbits.RE0 = 0;
  3865   000CD2  9096               	bcf	150,0,c	;volatile
  3866                           
  3867                           ;pcs.c: 17: TRISEbits.RE1 = 0;
  3868   000CD4  9296               	bcf	150,1,c	;volatile
  3869   000CD6  0012               	return		;funcret
  3870   000CD8  FFFF               	dw	65535	; errata NOP
  3871   000CDA                     __end_of_PCS_vInit:
  3872                           	callstack 0
  3873                           
  3874 ;; *************** function _INT_vInit *****************
  3875 ;; Defined at:
  3876 ;;		line 6 in file "int.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;		None
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;		None
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      void 
  3883 ;; Registers used:
  3884 ;;		None
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3894 ;;Total ram usage:        0 bytes
  3895 ;; Hardware stack levels used: 1
  3896 ;; Hardware stack levels required when called: 2
  3897 ;; This function calls:
  3898 ;;		Nothing
  3899 ;; This function is called by:
  3900 ;;		_SCHED_vInitSystem
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text37
  3905   000D1C                     __ptext37:
  3906                           	callstack 0
  3907   000D1C                     _INT_vInit:
  3908                           	callstack 0
  3909   000D1C  FFFF               	dw	65535	; assembler added errata NOP
  3910                           
  3911                           ;int.c: 9: PIR1bits.ADIF = 0;
  3912                           
  3913                           ;incstack = 0
  3914   000D1E  9C9E               	bcf	158,6,c	;volatile
  3915                           
  3916                           ;int.c: 10: PIE1bits.ADIE = 1;
  3917   000D20  8C9D               	bsf	157,6,c	;volatile
  3918                           
  3919                           ;int.c: 13: PIR1bits.TMR2IF = 0b0;
  3920   000D22  929E               	bcf	158,1,c	;volatile
  3921                           
  3922                           ;int.c: 14: IPR1bits.TMR2IP = 0b1;
  3923   000D24  829F               	bsf	159,1,c	;volatile
  3924                           
  3925                           ;int.c: 15: PIE1bits.TMR2IE = 0b1;
  3926   000D26  829D               	bsf	157,1,c	;volatile
  3927                           
  3928                           ;int.c: 18: INTCONbits.PEIE = 1;
  3929   000D28  8CF2               	bsf	242,6,c	;volatile
  3930                           
  3931                           ;int.c: 19: INTCONbits.GIE = 1;
  3932   000D2A  8EF2               	bsf	242,7,c	;volatile
  3933   000D2C  0012               	return		;funcret
  3934   000D2E  FFFF               	dw	65535	; errata NOP
  3935   000D30                     __end_of_INT_vInit:
  3936                           	callstack 0
  3937                           
  3938 ;; *************** function _ADC_vInit *****************
  3939 ;; Defined at:
  3940 ;;		line 9 in file "adc.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, status,2
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;Total ram usage:        0 bytes
  3959 ;; Hardware stack levels used: 1
  3960 ;; Hardware stack levels required when called: 2
  3961 ;; This function calls:
  3962 ;;		Nothing
  3963 ;; This function is called by:
  3964 ;;		_SCHED_vInitSystem
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text38
  3969   000A7A                     __ptext38:
  3970                           	callstack 0
  3971   000A7A                     _ADC_vInit:
  3972                           	callstack 0
  3973   000A7A  FFFF               	dw	65535	; assembler added errata NOP
  3974                           
  3975                           ;adc.c: 11: ADRESH = 0x00;
  3976                           
  3977                           ;incstack = 0
  3978   000A7C  0E00               	movlw	0
  3979   000A7E  6EC4               	movwf	196,c	;volatile
  3980                           
  3981                           ;adc.c: 12: ADRESL = 0x00;
  3982   000A80  0E00               	movlw	0
  3983   000A82  6EC3               	movwf	195,c	;volatile
  3984                           
  3985                           ;adc.c: 14: ADCON0bits.CHS = 0b0000;
  3986   000A84  0EC3               	movlw	-61
  3987   000A86  16C2               	andwf	194,f,c	;volatile
  3988                           
  3989                           ;adc.c: 16: ADCON1bits.VCFG = 0b00;
  3990   000A88  0ECF               	movlw	-49
  3991   000A8A  16C1               	andwf	193,f,c	;volatile
  3992                           
  3993                           ;adc.c: 17: ADCON1bits.PCFG = 0b1101;
  3994   000A8C  50C1               	movf	193,w,c	;volatile
  3995   000A8E  0BF0               	andlw	-16
  3996   000A90  090D               	iorlw	13
  3997   000A92  6EC1               	movwf	193,c	;volatile
  3998                           
  3999                           ;adc.c: 19: ADCON2bits.ADFM = 1;
  4000   000A94  8EC0               	bsf	192,7,c	;volatile
  4001                           
  4002                           ;adc.c: 20: ADCON2bits.ACQT = 0b100;
  4003   000A96  50C0               	movf	192,w,c	;volatile
  4004   000A98  0BC7               	andlw	-57
  4005   000A9A  0920               	iorlw	32
  4006   000A9C  6EC0               	movwf	192,c	;volatile
  4007                           
  4008                           ;adc.c: 21: ADCON2bits.ADCS = 0b001;
  4009   000A9E  50C0               	movf	192,w,c	;volatile
  4010   000AA0  0BF8               	andlw	-8
  4011   000AA2  0901               	iorlw	1
  4012   000AA4  6EC0               	movwf	192,c	;volatile
  4013                           
  4014                           ;adc.c: 23: PIR1bits.ADIF = 0;
  4015   000AA6  9C9E               	bcf	158,6,c	;volatile
  4016                           
  4017                           ;adc.c: 24: PIE1bits.ADIE = 1;
  4018   000AA8  8C9D               	bsf	157,6,c	;volatile
  4019                           
  4020                           ;adc.c: 25: INTCONbits.PEIE = 1;
  4021   000AAA  8CF2               	bsf	242,6,c	;volatile
  4022                           
  4023                           ;adc.c: 26: INTCONbits.GIE = 1;
  4024   000AAC  8EF2               	bsf	242,7,c	;volatile
  4025                           
  4026                           ;adc.c: 28: ADCON0bits.ADON = 1;
  4027   000AAE  80C2               	bsf	194,0,c	;volatile
  4028                           
  4029                           ;adc.c: 29: _delay((unsigned long)((40)*(10000000UL/4000000.0)));
  4030   000AB0  0E19               	movlw	25
  4031   000AB2                     u1807:
  4032   000AB2  FFFF               	dw	65535	; errata NOP
  4033   000AB4  2EE8               	decfsz	wreg,f,c
  4034   000AB6  D7FD               	bra	u1807
  4035                           
  4036                           ;adc.c: 30: ADCON0bits.GO_nDONE = 1;
  4037   000AB8  82C2               	bsf	194,1,c	;volatile
  4038   000ABA  0012               	return		;funcret
  4039   000ABC  FFFF               	dw	65535	; errata NOP
  4040   000ABE                     __end_of_ADC_vInit:
  4041                           	callstack 0
  4042                           
  4043 ;; *************** function _INT_vInterruptHandler *****************
  4044 ;; Defined at:
  4045 ;;		line 22 in file "int.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;Total ram usage:        4 bytes
  4064 ;; Hardware stack levels used: 1
  4065 ;; Hardware stack levels required when called: 1
  4066 ;; This function calls:
  4067 ;;		_ADC_vConversionCompleted
  4068 ;;		_SCHED_vTickFunctionCall
  4069 ;; This function is called by:
  4070 ;;		Interrupt level 2
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           	psect	intcode
  4075   000008                     __pintcode:
  4076                           	callstack 0
  4077   000008                     _INT_vInterruptHandler:
  4078                           	callstack 0
  4079   000008  FFFF               	dw	65535	; assembler added errata NOP
  4080                           
  4081                           ;incstack = 0
  4082   00000A  8254               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4083   00000C  CFD9 F031          	movff	fsr2l,??_INT_vInterruptHandler
  4084   000010  CFDA F032          	movff	fsr2h,??_INT_vInterruptHandler+1
  4085   000014  CFF3 F033          	movff	prodl,??_INT_vInterruptHandler+2
  4086   000018  CFF4 F034          	movff	prodh,??_INT_vInterruptHandler+3
  4087                           
  4088                           ;int.c: 24: if(PIR1bits.ADIF && ADCON0bits.ADON)
  4089   00001C  BC9E               	btfsc	158,6,c	;volatile
  4090   00001E  A0C2               	btfss	194,0,c	;volatile
  4091   000020  D002               	goto	i2l1682
  4092                           
  4093                           ;int.c: 25: {;int.c: 26: ADC_vConversionCompleted();
  4094   000022  EC30  F004         	call	_ADC_vConversionCompleted	;wreg free
  4095   000026                     i2l1682:
  4096   000026  FFFF               	dw	65535	; assembler added errata NOP
  4097                           
  4098                           ;int.c: 27: };int.c: 29: if(PIR1bits.TMR2IF && T2CONbits.TMR2ON)
  4099   000028  B29E               	btfsc	158,1,c	;volatile
  4100   00002A  A4CA               	btfss	202,2,c	;volatile
  4101   00002C  D003               	goto	i2l88
  4102                           
  4103                           ;int.c: 30: {;int.c: 31: SCHED_vTickFunctionCall();
  4104   00002E  EC83  F006         	call	_SCHED_vTickFunctionCall	;wreg free
  4105                           
  4106                           ;int.c: 32: PIR1bits.TMR2IF = 0b0;
  4107   000032  929E               	bcf	158,1,c	;volatile
  4108   000034                     i2l88:
  4109   000034  FFFF               	dw	65535	; assembler added errata NOP
  4110   000036  C034  FFF4         	movff	??_INT_vInterruptHandler+3,prodh
  4111   00003A  C033  FFF3         	movff	??_INT_vInterruptHandler+2,prodl
  4112   00003E  C032  FFDA         	movff	??_INT_vInterruptHandler+1,fsr2h
  4113   000042  C031  FFD9         	movff	??_INT_vInterruptHandler,fsr2l
  4114   000046  9254               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4115   000048  0011               	retfie		f
  4116   00004A  FFFF               	dw	65535	; errata NOP
  4117   00004C                     __end_of_INT_vInterruptHandler:
  4118                           	callstack 0
  4119                           
  4120 ;; *************** function _SCHED_vTickFunctionCall *****************
  4121 ;; Defined at:
  4122 ;;		line 21 in file "sched.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;		None
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;		None
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  1    wreg      void 
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4140 ;;Total ram usage:        0 bytes
  4141 ;; Hardware stack levels used: 1
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_INT_vInterruptHandler
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text40
  4150   000D06                     __ptext40:
  4151                           	callstack 0
  4152   000D06                     _SCHED_vTickFunctionCall:
  4153                           	callstack 0
  4154   000D06  FFFF               	dw	65535	; assembler added errata NOP
  4155                           
  4156                           ;sched.c: 23: ++sched_gTick10ms;
  4157                           
  4158                           ;incstack = 0
  4159   000D08  2A20               	incf	_sched_gTick10ms^0,f,c
  4160                           
  4161                           ;sched.c: 24: ++sched_gTick100ms;
  4162   000D0A  2A1F               	incf	_sched_gTick100ms^0,f,c
  4163                           
  4164                           ;sched.c: 25: ++sched_gTick1s;
  4165   000D0C  4A18               	infsnz	_sched_gTick1s^0,f,c
  4166   000D0E  2A19               	incf	(_sched_gTick1s+1)^0,f,c
  4167                           
  4168                           ;sched.c: 26: sched_bTicked = 1;;
  4169   000D10  0E00               	movlw	0
  4170   000D12  6E17               	movwf	(_sched_bTicked+1)^0,c
  4171   000D14  0E01               	movlw	1
  4172   000D16  6E16               	movwf	_sched_bTicked^0,c
  4173   000D18  0012               	return		;funcret
  4174   000D1A  FFFF               	dw	65535	; errata NOP
  4175   000D1C                     __end_of_SCHED_vTickFunctionCall:
  4176                           	callstack 0
  4177                           
  4178 ;; *************** function _ADC_vConversionCompleted *****************
  4179 ;; Defined at:
  4180 ;;		line 40 in file "adc.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;		None
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;		None
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  1    wreg      void 
  4187 ;; Registers used:
  4188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4196 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4197 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4198 ;;Total ram usage:        3 bytes
  4199 ;; Hardware stack levels used: 1
  4200 ;; This function calls:
  4201 ;;		Nothing
  4202 ;; This function is called by:
  4203 ;;		_INT_vInterruptHandler
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           	psect	text41
  4208   000860                     __ptext41:
  4209                           	callstack 0
  4210   000860                     _ADC_vConversionCompleted:
  4211                           	callstack 0
  4212   000860  FFFF               	dw	65535	; assembler added errata NOP
  4213                           
  4214                           ;adc.c: 42: au16AdcReadValue[ADCON0bits.CHS0] = (ADRESH << 8) | ADRESL;
  4215                           
  4216                           ;incstack = 0
  4217   000862  50C3               	movf	195,w,c	;volatile
  4218   000864  CFC4 F02E          	movff	4036,??_ADC_vConversionCompleted	;volatile
  4219   000868  6A2F               	clrf	(??_ADC_vConversionCompleted+1)^0,c
  4220   00086A  C02E  F02F         	movff	??_ADC_vConversionCompleted,??_ADC_vConversionCompleted+1
  4221   00086E  6A2E               	clrf	??_ADC_vConversionCompleted^0,c
  4222   000870  122E               	iorwf	??_ADC_vConversionCompleted^0,f,c
  4223   000872  0E00               	movlw	0
  4224   000874  122F               	iorwf	(??_ADC_vConversionCompleted+1)^0,f,c
  4225   000876  A4C2               	btfss	194,2,c	;volatile
  4226   000878  D003               	goto	i2u75_40
  4227   00087A  6A30               	clrf	(??_ADC_vConversionCompleted+2)^0,c
  4228   00087C  2A30               	incf	(??_ADC_vConversionCompleted+2)^0,f,c
  4229   00087E  D002               	goto	i2u75_48
  4230   000880                     i2u75_40:
  4231   000880  FFFF               	dw	65535	; assembler added errata NOP
  4232   000882  6A30               	clrf	(??_ADC_vConversionCompleted+2)^0,c
  4233   000884                     i2u75_48:
  4234   000884  FFFF               	dw	65535	; assembler added errata NOP
  4235   000886  5030               	movf	(??_ADC_vConversionCompleted+2)^0,w,c
  4236   000888  0D02               	mullw	2
  4237   00088A  0E12               	movlw	low _au16AdcReadValue
  4238   00088C  24F3               	addwf	243,w,c
  4239   00088E  6ED9               	movwf	fsr2l,c
  4240   000890  0E00               	movlw	high _au16AdcReadValue
  4241   000892  20F4               	addwfc	prodh,w,c
  4242   000894  6EDA               	movwf	fsr2h,c
  4243   000896  C02E  FFDE         	movff	??_ADC_vConversionCompleted,postinc2
  4244   00089A  C02F  FFDD         	movff	??_ADC_vConversionCompleted+1,postdec2
  4245                           
  4246                           ;adc.c: 43: ADCON0bits.CHS0 = !ADCON0bits.CHS0;
  4247   00089E  B4C2               	btfsc	194,2,c	;volatile
  4248   0008A0  D003               	goto	i2u76_40
  4249   0008A2  6A2E               	clrf	??_ADC_vConversionCompleted^0,c
  4250   0008A4  2A2E               	incf	??_ADC_vConversionCompleted^0,f,c
  4251   0008A6  D002               	goto	i2u77_48
  4252   0008A8                     i2u76_40:
  4253   0008A8  FFFF               	dw	65535	; assembler added errata NOP
  4254   0008AA  6A2E               	clrf	??_ADC_vConversionCompleted^0,c
  4255   0008AC                     i2u77_48:
  4256   0008AC  FFFF               	dw	65535	; assembler added errata NOP
  4257   0008AE  462E               	rlncf	??_ADC_vConversionCompleted^0,f,c
  4258   0008B0  462E               	rlncf	??_ADC_vConversionCompleted^0,f,c
  4259   0008B2  50C2               	movf	194,w,c	;volatile
  4260   0008B4  182E               	xorwf	??_ADC_vConversionCompleted^0,w,c
  4261   0008B6  0BFB               	andlw	-5
  4262   0008B8  182E               	xorwf	??_ADC_vConversionCompleted^0,w,c
  4263   0008BA  6EC2               	movwf	194,c	;volatile
  4264                           
  4265                           ;adc.c: 44: PIR1bits.ADIF = 0;
  4266   0008BC  9C9E               	bcf	158,6,c	;volatile
  4267                           
  4268                           ;adc.c: 45: ADCON0bits.GO_nDONE = 1;
  4269   0008BE  82C2               	bsf	194,1,c	;volatile
  4270   0008C0  0012               	return		;funcret
  4271   0008C2  FFFF               	dw	65535	; errata NOP
  4272   0008C4                     __end_of_ADC_vConversionCompleted:
  4273                           	callstack 0
  4274   0008C4  FFFF               	dw	65535	; assembler added errata NOP
  4275                           
  4276                           	psect	text42
  4277   000000                     __ptext42:
  4278                           	callstack 0
  4279                           
  4280                           	psect	rparam
  4281   000000                     
  4282                           	psect	temp
  4283   000054                     btemp:
  4284                           	callstack 0
  4285   000054                     	ds	1
  4286   000000                     int$flags	set	btemp
  4287   000000                     wtemp8	set	btemp+1
  4288   000000                     ttemp5	set	btemp+1
  4289   000000                     ttemp6	set	btemp+4
  4290   000000                     ttemp7	set	btemp+8
  4291                           
  4292                           	psect	idloc
  4293                           
  4294                           ;Config register IDLOC0 @ 0x200000
  4295                           ;	unspecified, using default values
  4296   200000                     	org	2097152
  4297   200000  FF                 	db	255
  4298                           
  4299                           ;Config register IDLOC1 @ 0x200001
  4300                           ;	unspecified, using default values
  4301   200001                     	org	2097153
  4302   200001  FF                 	db	255
  4303                           
  4304                           ;Config register IDLOC2 @ 0x200002
  4305                           ;	unspecified, using default values
  4306   200002                     	org	2097154
  4307   200002  FF                 	db	255
  4308                           
  4309                           ;Config register IDLOC3 @ 0x200003
  4310                           ;	unspecified, using default values
  4311   200003                     	org	2097155
  4312   200003  FF                 	db	255
  4313                           
  4314                           ;Config register IDLOC4 @ 0x200004
  4315                           ;	unspecified, using default values
  4316   200004                     	org	2097156
  4317   200004  FF                 	db	255
  4318                           
  4319                           ;Config register IDLOC5 @ 0x200005
  4320                           ;	unspecified, using default values
  4321   200005                     	org	2097157
  4322   200005  FF                 	db	255
  4323                           
  4324                           ;Config register IDLOC6 @ 0x200006
  4325                           ;	unspecified, using default values
  4326   200006                     	org	2097158
  4327   200006  FF                 	db	255
  4328                           
  4329                           ;Config register IDLOC7 @ 0x200007
  4330                           ;	unspecified, using default values
  4331   200007                     	org	2097159
  4332   200007  FF                 	db	255
  4333                           
  4334                           	psect	config
  4335                           
  4336                           ; Padding undefined space
  4337   300000                     	org	3145728
  4338   300000  FF                 	db	255
  4339                           
  4340                           ;Config register CONFIG1H @ 0x300001
  4341                           ;	unspecified, using default values
  4342                           ;	Oscillator
  4343                           ;	OSC = 0xF, unprogrammed default
  4344                           ;	Osc. Switch Enable
  4345                           ;	OSCS = 0x1, unprogrammed default
  4346   300001                     	org	3145729
  4347   300001  2F                 	db	47
  4348                           
  4349                           ;Config register CONFIG2L @ 0x300002
  4350                           ;	unspecified, using default values
  4351                           ;	Power Up Timer
  4352                           ;	PWRT = 0x1, unprogrammed default
  4353                           ;	Brown Out Detect
  4354                           ;	BOR = 0x1, unprogrammed default
  4355                           ;	Brown Out Voltage
  4356                           ;	BORV = 0x3, unprogrammed default
  4357   300002                     	org	3145730
  4358   300002  0F                 	db	15
  4359                           
  4360                           ;Config register CONFIG2H @ 0x300003
  4361                           ;	unspecified, using default values
  4362                           ;	Watchdog Timer
  4363                           ;	WDT = 0x1, unprogrammed default
  4364                           ;	Watchdog Postscaler
  4365                           ;	WDTPS = 0xF, unprogrammed default
  4366   300003                     	org	3145731
  4367   300003  1F                 	db	31
  4368                           
  4369                           ;Config register CONFIG3L @ 0x300004
  4370                           ;	unspecified, using default values
  4371   300004                     	org	3145732
  4372   300004  83                 	db	131
  4373                           
  4374                           ;Config register CONFIG3H @ 0x300005
  4375                           ;	unspecified, using default values
  4376                           ;	CCP2 Mux
  4377                           ;	CCP2MX = 0x1, unprogrammed default
  4378                           ;	MCLR enable
  4379                           ;	MCLRE = 0x1, unprogrammed default
  4380   300005                     	org	3145733
  4381   300005  83                 	db	131
  4382                           
  4383                           ;Config register CONFIG4L @ 0x300006
  4384                           ;	unspecified, using default values
  4385                           ;	Stack Overflow Reset
  4386                           ;	STVR = 0x1, unprogrammed default
  4387                           ;	Low Voltage Program
  4388                           ;	LVP = 0x1, unprogrammed default
  4389                           ;	Background Debugger Enable bit
  4390                           ;	DEBUG = 0x1, unprogrammed default
  4391   300006                     	org	3145734
  4392   300006  85                 	db	133
  4393                           
  4394                           ; Padding undefined space
  4395   300007                     	org	3145735
  4396   300007  FF                 	db	255
  4397                           
  4398                           ;Config register CONFIG5L @ 0x300008
  4399                           ;	unspecified, using default values
  4400                           ;	Code Protect 000800-0003FFF
  4401                           ;	CP0 = 0x1, unprogrammed default
  4402                           ;	Code Protect 0004000-007FFF
  4403                           ;	CP1 = 0x1, unprogrammed default
  4404                           ;	Code Protect 008000-00BFFF
  4405                           ;	CP2 = 0x1, unprogrammed default
  4406   300008                     	org	3145736
  4407   300008  0F                 	db	15
  4408                           
  4409                           ;Config register CONFIG5H @ 0x300009
  4410                           ;	unspecified, using default values
  4411                           ;	Code Protect Boot
  4412                           ;	CPB = 0x1, unprogrammed default
  4413                           ;	Data EE Read Protect
  4414                           ;	CPD = 0x1, unprogrammed default
  4415   300009                     	org	3145737
  4416   300009  C0                 	db	192
  4417                           
  4418                           ;Config register CONFIG6L @ 0x30000A
  4419                           ;	unspecified, using default values
  4420                           ;	Table Write Protect 00800-003FFF
  4421                           ;	WRT0 = 0x1, unprogrammed default
  4422                           ;	Table Write Protect 004000-007FFF
  4423                           ;	WRT1 = 0x1, unprogrammed default
  4424                           ;	Table Write Protect 08000-0BFFF
  4425                           ;	WRT2 = 0x1, unprogrammed default
  4426   30000A                     	org	3145738
  4427   30000A  0F                 	db	15
  4428                           
  4429                           ;Config register CONFIG6H @ 0x30000B
  4430                           ;	unspecified, using default values
  4431                           ;	Config. Write Protect
  4432                           ;	WRTC = 0x1, unprogrammed default
  4433                           ;	Table Write Protect Boot
  4434                           ;	WRTB = 0x1, unprogrammed default
  4435                           ;	Data EE Write Protect
  4436                           ;	WRTD = 0x1, unprogrammed default
  4437   30000B                     	org	3145739
  4438   30000B  E0                 	db	224
  4439                           
  4440                           ;Config register CONFIG7L @ 0x30000C
  4441                           ;	unspecified, using default values
  4442                           ;	Table Read Protect 00800-003FFF
  4443                           ;	EBTR0 = 0x1, unprogrammed default
  4444                           ;	Table Read Protect 004000-07FFF
  4445                           ;	EBTR1 = 0x1, unprogrammed default
  4446                           ;	Table Read Protect 08000-0BFFF
  4447                           ;	EBTR2 = 0x1, unprogrammed default
  4448   30000C                     	org	3145740
  4449   30000C  0F                 	db	15
  4450                           
  4451                           ;Config register CONFIG7H @ 0x30000D
  4452                           ;	unspecified, using default values
  4453                           ;	Table Read Protect Boot
  4454                           ;	EBTRB = 0x1, unprogrammed default
  4455   30000D                     	org	3145741
  4456   30000D  40                 	db	64
  4457                           tosu	equ	0xFFF
  4458                           tosh	equ	0xFFE
  4459                           tosl	equ	0xFFD
  4460                           stkptr	equ	0xFFC
  4461                           pclatu	equ	0xFFB
  4462                           pclath	equ	0xFFA
  4463                           pcl	equ	0xFF9
  4464                           tblptru	equ	0xFF8
  4465                           tblptrh	equ	0xFF7
  4466                           tblptrl	equ	0xFF6
  4467                           tablat	equ	0xFF5
  4468                           prodh	equ	0xFF4
  4469                           prodl	equ	0xFF3
  4470                           indf0	equ	0xFEF
  4471                           postinc0	equ	0xFEE
  4472                           postdec0	equ	0xFED
  4473                           preinc0	equ	0xFEC
  4474                           plusw0	equ	0xFEB
  4475                           fsr0h	equ	0xFEA
  4476                           fsr0l	equ	0xFE9
  4477                           wreg	equ	0xFE8
  4478                           indf1	equ	0xFE7
  4479                           postinc1	equ	0xFE6
  4480                           postdec1	equ	0xFE5
  4481                           preinc1	equ	0xFE4
  4482                           plusw1	equ	0xFE3
  4483                           fsr1h	equ	0xFE2
  4484                           fsr1l	equ	0xFE1
  4485                           bsr	equ	0xFE0
  4486                           indf2	equ	0xFDF
  4487                           postinc2	equ	0xFDE
  4488                           postdec2	equ	0xFDD
  4489                           preinc2	equ	0xFDC
  4490                           plusw2	equ	0xFDB
  4491                           fsr2h	equ	0xFDA
  4492                           fsr2l	equ	0xFD9
  4493                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      83
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    S1035s_HeadLightStateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightEventPoll(), 

    headLightSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightEventPoll(), 

    S1035s_HeadLightStateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightActiveState(), SGL_HeadLightPasiveState(), 

    headLightSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightActiveState(), SGL_HeadLightPasiveState(), 

    SGL_setAllHazardLights@toggle	PTR unsigned char  size(2) Largest target is 3327
		 -> NULL(NULL[0]), RAM(DATA[3327]), blinkerSM(COMRAM[13]), 

    SGL_toggleSideHazardLights@toggle	PTR unsigned char  size(2) Largest target is 13
		 -> blinkerSM(COMRAM[13]), 

    SGL_toggleAllHazardLights@toggle	PTR unsigned char  size(2) Largest target is 13
		 -> blinkerSM(COMRAM[13]), 

    S934s_blinkStateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkEventPoll(), 

    blinkerSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkEventPoll(), 

    S934s_blinkStateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState(), SGL_BlinkSwitchOnState(), SGL_BlinkPasiveState(), 

    blinkerSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState(), SGL_BlinkSwitchOnState(), SGL_BlinkPasiveState(), 

    S26s_stateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoEventPoll(), 

    demoSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoEventPoll(), 

    S26s_stateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoState2(), LIGHTS_DemoState1(), 

    demoSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoState2(), LIGHTS_DemoState1(), 


Critical Paths under _main in COMRAM

    _LIGHTS_BrakeInit->_IOC_vSetOutputPort
    _SGL_BlinkersRun->_SGL_BlinkSwitchOffState
    _SGL_BlinkSwitchOnState->_SGL_toggleSideHazardLights
    _SGL_setSideHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkSwitchOffState->_SGL_toggleSideHazardLights
    _SGL_toggleSideHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkPasiveState->_SGL_setAllHazardLights
    _SGL_BlinkPasiveState->_SGL_toggleAllHazardLights
    _SGL_toggleAllHazardLights->_IOC_vSetOutputPort
    _SGL_setAllHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkEventPoll->_IOC_T16GetInputPort
    _LIGHTS_BrakeRun->_IOC_vSetOutputPort
    _SGL_HeadLightPasiveState->_SGL_isNight
    _SGL_isNight->___ftge
    ___lwtoft->___ftpack
    ___ftge->___lwtoft
    _SGL_HeadLightEventPoll->_IOC_T16GetInputPort
    _IOC_T16GetInputPort->_PCS_T16GetInputPortC
    _SGL_HeadLightActiveState->_IOC_vSetOutputPort
    _IOC_vSetOutputPort->_IOC_T16GetInputPort

Critical Paths under _INT_vInterruptHandler in COMRAM

    _INT_vInterruptHandler->_ADC_vConversionCompleted

Critical Paths under _main in BANK0

    None.

Critical Paths under _INT_vInterruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT_vInterruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT_vInterruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT_vInterruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT_vInterruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT_vInterruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT_vInterruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT_vInterruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INT_vInterruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INT_vInterruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INT_vInterruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INT_vInterruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INT_vInterruptHandler in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70654
                  _SCHED_vInitSystem
              _SCHED_vStartScheduler
 ---------------------------------------------------------------------------------
 (1) _SCHED_vStartScheduler                                0     0      0   70654
                    _TASK_vTask100ms
                     _TASK_vTask10ms
                      _TASK_vTask1ms
                       _TASK_vTask1s
                  _TASK_vTaskAppInit
 ---------------------------------------------------------------------------------
 (2) _TASK_vTaskAppInit                                    0     0      0    6247
                   _LIGHTS_BrakeInit
                _LIGHTS_HeadLampInit
                   _SGL_BlinkersInit
 ---------------------------------------------------------------------------------
 (3) _SGL_BlinkersInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_HeadLampInit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_BrakeInit                                     0     0      0    6247
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask1s                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask1ms                                        0     0      0   47655
                    _LIGHTS_BrakeRun
                    _SGL_BlinkersRun
 ---------------------------------------------------------------------------------
 (3) _SGL_BlinkersRun                                      0     0      0   40536
                 _SGL_BlinkEventPoll *
               _SGL_BlinkPasiveState *
            _SGL_BlinkSwitchOffState *
             _SGL_BlinkSwitchOnState *
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkSwitchOnState                               0     0      0   19821
             _SGL_setAllHazardLights
            _SGL_setSideHazardLights
         _SGL_toggleSideHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_setSideHazardLights                              2     1      1    6433
                                             28 COMRAM     2     1      1
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkSwitchOffState                              5     5      0    6705
                                             31 COMRAM     5     5      0
         _SGL_toggleSideHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_toggleSideHazardLights                           3     0      3    6705
                                             28 COMRAM     3     0      3
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkPasiveState                                 2     2      0   13138
                                             30 COMRAM     2     2      0
             _SGL_setAllHazardLights
          _SGL_toggleAllHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_toggleAllHazardLights                            2     0      2    6455
                                             28 COMRAM     2     0      2
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (5) _SGL_setAllHazardLights                               2     0      2    6683
                                             28 COMRAM     2     0      2
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkEventPoll                                   0     0      0     872
                _IOC_T16GetInputPort
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_BrakeRun                                      0     0      0    7119
                _IOC_T16GetInputPort
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask10ms                                       0     0      0   16752
                 _LIGHTS_HeadLampRun
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_HeadLampRun                                   0     0      0   16752
           _SGL_HeadLightActiveState *
             _SGL_HeadLightEventPoll *
           _SGL_HeadLightPasiveState *
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightPasiveState                             0     0      0    9633
                 _IOC_vSetOutputPort
                        _SGL_isNight
 ---------------------------------------------------------------------------------
 (5) _SGL_isNight                                          2     2      0    3386
                                             27 COMRAM     2     2      0
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2901
                                             15 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2727
                                              7 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     440
                                             18 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightEventPoll                               0     0      0     872
                _IOC_T16GetInputPort
 ---------------------------------------------------------------------------------
 (5) _IOC_T16GetInputPort                                  6     4      2     872
                                             17 COMRAM     6     4      2
                _ADC_u16ReadAdcValue
               _PCS_T16GetInputPortC
 ---------------------------------------------------------------------------------
 (6) _PCS_T16GetInputPortC                                10     8      2     113
                                              7 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _ADC_u16ReadAdcValue                                  6     4      2      91
                                              7 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightActiveState                             0     0      0    6247
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _IOC_vSetOutputPort                                   5     2      3    6247
                                             23 COMRAM     5     2      3
                _IOC_T16GetInputPort (ARG)
                _PCS_vSetOutputPortD
                _PCS_vSetOutputPortE
 ---------------------------------------------------------------------------------
 (5) _PCS_vSetOutputPortE                                  8     7      1     234
                                              7 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (5) _PCS_vSetOutputPortD                                  8     7      1     234
                                              7 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask100ms                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SCHED_vInitSystem                                    0     0      0       0
                          _ADC_vInit
                          _INT_vInit
                          _PCS_vInit
                          _TIM_vInit
 ---------------------------------------------------------------------------------
 (2) _TIM_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PCS_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INT_vInterruptHandler                                4     4      0       0
                                              3 COMRAM     4     4      0
           _ADC_vConversionCompleted
            _SCHED_vTickFunctionCall
 ---------------------------------------------------------------------------------
 (9) _SCHED_vTickFunctionCall                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _ADC_vConversionCompleted                             3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SCHED_vInitSystem
     _ADC_vInit
     _INT_vInit
     _PCS_vInit
     _TIM_vInit
   _SCHED_vStartScheduler
     _TASK_vTask100ms
     _TASK_vTask10ms
       _LIGHTS_HeadLampRun
         _SGL_HeadLightActiveState *
           _IOC_vSetOutputPort
             _IOC_T16GetInputPort (ARG)
               _ADC_u16ReadAdcValue
               _PCS_T16GetInputPortC
             _PCS_vSetOutputPortD (ARG)
             _PCS_vSetOutputPortE (ARG)
         _SGL_HeadLightEventPoll *
           _IOC_T16GetInputPort
         _SGL_HeadLightPasiveState *
           _IOC_vSetOutputPort
           _SGL_isNight
             ___ftge
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
     _TASK_vTask1ms
       _LIGHTS_BrakeRun
         _IOC_T16GetInputPort
         _IOC_vSetOutputPort
       _SGL_BlinkersRun
         _SGL_BlinkEventPoll *
           _IOC_T16GetInputPort
         _SGL_BlinkPasiveState *
           _SGL_setAllHazardLights
             _IOC_vSetOutputPort
           _SGL_toggleAllHazardLights
             _IOC_vSetOutputPort
         _SGL_BlinkSwitchOffState *
           _SGL_toggleSideHazardLights
             _IOC_vSetOutputPort
         _SGL_BlinkSwitchOnState *
           _SGL_setAllHazardLights
           _SGL_setSideHazardLights
             _IOC_vSetOutputPort
           _SGL_toggleSideHazardLights
     _TASK_vTask1s
     _TASK_vTaskAppInit
       _LIGHTS_BrakeInit
         _IOC_vSetOutputPort
       _LIGHTS_HeadLampInit
       _SGL_BlinkersInit

 _INT_vInterruptHandler (ROOT)
   _ADC_vConversionCompleted
   _SCHED_vTickFunctionCall

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      39        0.0%
EEDATA             400      0       0       0        0.0%
BITBIGSFRllll      282      0       0      38        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      53       1       88.3%
BITBIGSFRhlhh       25      0       0      32        0.0%
BITBIGSFRlh         20      0       0      34        0.0%
BITBIGSFRlllh        D      0       0      37        0.0%
BITBIGSFRhh          D      0       0      31        0.0%
BITBIGSFRllhh        6      0       0      35        0.0%
BITBIGSFRhll         5      0       0      33        0.0%
BITBIGSFRllhl        1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      53       6        0.0%
DATA                 0      0      53       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Nov 20 15:17:00 2022

                                                  ?_SGL_BlinkSwitchOnState 002E  
                                                 ?_SGL_BlinkSwitchOffState 002E  
                                         SGL_BlinkSwitchOnState@firstEntry 0052  
                                                                       l61 0ADA  
                                                                       l59 0AD2  
                                                     ?_LIGHTS_HeadLampInit 002E  
                                                                      l111 06A2  
                                                                      l120 0624  
                                                                      l114 06EC  
                                                                      l123 066E  
                                                                      l109 069A  
                                                                      l118 061C  
                                                                      l214 0B34  
                                                                      l302 0340  
                                                                      l127 08DA  
                                                                      l320 01D0  
                                                                      l129 08E2  
                                                                      l273 0A74  
                                                                      l354 0570  
                                                                      l362 0460  
                                                                      l367 03D0  
                                                                      l288 028A  
                                                                      l653 010E  
                                                                      l728 05F0  
                                                                      _PR2 000FCB  
                                                                      u940 0682  
                                                                      u950 0686  
                                                                      u984 06C0  
                                                                      u985 06BA  
                                                                      u994 06E0  
                                                                      u995 06DA  
                                                                      prod 000FF3  
                                                                      tosl 000FFD  
                                                                      wreg 000FE8  
                                                                     l2000 0408  
                                                                     l2004 0426  
                                                                     l2020 0388  
                                                                     l2006 0438  
                                                                     l2114 0840  
                                                                     l2108 082E  
                                                                     l2074 0C3A  
                                                                     l1720 064E  
                                                                     l2096 0808  
                                                                     l1730 0072  
                                                                     l1708 06CC  
                                                                     l1812 09FE  
                                                                     l1740 00D6  
                                                                     l1732 007E  
                                                                     l1742 00E2  
                                                                     l1734 009E  
                                                                     l1830 04D2  
                                                                     l1816 0A18  
                                                                     l1840 0A52  
                                                                     l1920 02C0  
                                                                     l1762 0B1E  
                                                                     l1738 00B6  
                                                                     l1914 02AA  
                                                                     l1828 04A0  
                                                                     l1790 05BE  
                                                                     l1854 0534  
                                                                     l1926 02E8  
                                                                     l1864 056C  
                                                                     l1928 02EE  
                                                                     l1880 020C  
                                                                     l1872 01E8  
                                                                     l1786 059A  
                                                                     l1938 0318  
                                                                     l1970 0194  
                                                                     l1796 05EC  
                                                                     l1980 01B8  
                                                                     l1956 0130  
                                                                     l1966 0182  
                                                                     l1894 0252  
                                                                     l1886 0230  
                                                                     l1968 018A  
                                                                     l1896 0258  
                                                                     l1888 0238  
                                                  ?_SGL_HeadLightEventPoll 002E  
                                                                     u1000 0604  
                                                                     u1010 0608  
                                                                     u1110 00EE  
                                                                     u1044 0642  
                                                                     u1045 063C  
                                                                     u1054 0662  
                                                                     u1070 0062  
                                                                     u1055 065C  
                                                                     u1184 08FE  
                                                                     u1185 08F8  
                                                                     u1194 0914  
                                                                     u1530 01C6  
                                                                     u1195 090E  
                                                                     u1380 0266  
                                                                     u1608 0932  
                                                                     u1609 094A  
                                                                     u1628 095C  
                                                                     u1629 0974  
                                                                     u1807 0AB2  
                                                                     u1658 0988  
                                                                     u1659 09A0  
                                                                     u1678 09B2  
                                                                     u1679 09CA  
                                                                     i2l88 0034  
                                                                     _TMR2 000FCC  
                                                 ??_SGL_setAllHazardLights 004C  
                                                                     _main 0D42  
                                                             ___ftpack@arg 0035  
                                                             ___ftpack@exp 0038  
                                                                     fsr2h 000FDA  
                                                                     indf2 000FDF  
                                                                     fsr2l 000FD9  
                                                                     btemp 0054  
                                           PCS_vSetOutputPortD@u8BitNumber 003B  
                                                                     prodh 000FF4  
                                                                     prodl 000FF3  
                                                                     start 004C  
                                                    ?_PCS_T16GetInputPortC 0035  
                                           __end_of_SGL_BlinkSwitchOnState 0346  
                                                          _LIGHTS_BrakeRun 0C10  
                                                             ___param_bank 000000  
                                                    _INT_vInterruptHandler 0008  
                                         __end_of_SGL_HeadLightPasiveState 0466  
                                                    ??_LIGHTS_HeadLampInit 0035  
                                          __end_of_SCHED_vTickFunctionCall 0D1C  
                                                                    ?_main 002E  
                                                       _IOC_vSetOutputPort 0AFC  
                                                                    _T2CON 000FCA  
                                                                    _PORTC 000F82  
                                                                    _PORTD 000F83  
                                                                    _PORTE 000F84  
                                                                    _TRISD 000F95  
                                       SGL_BlinkSwitchOffState@counterRuns 001D  
                                                         ?_SGL_BlinkersRun 002E  
                                                      ?_IOC_vSetOutputPort 0045  
                                           __end_of_SGL_HeadLightEventPoll 0C96  
                                                            ___ftpack@sign 0039  
                                                                    pclath 000FFA  
                                                                    tablat 000FF5  
                                                                    ttemp5 0055  
                                                                    ttemp6 0058  
                                                                    ttemp7 005C  
                                                                    status 000FD8  
                                                        __end_of_ADC_vInit 0ABE  
                                                                    wtemp8 0055  
                                           PCS_vSetOutputPortE@u8BitNumber 003B  
                                          __end_of_SGL_BlinkSwitchOffState 01D6  
                                                         _LIGHTS_BrakeInit 0CDA  
                                                          __initialization 0BDE  
                                                     ??_IOC_vSetOutputPort 0048  
                                                             __end_of_main 0D50  
                                            __end_of_SCHED_vStartScheduler 0860  
                                                                   ??_main 0052  
                                                            __activetblptr 000002  
                                      PCS_vSetOutputPortD@u8BitNumberValue 003C  
                                                    __end_of_TASK_vTask1ms 0D5E  
                                                                   _ADRESH 000FC4  
                                                                   _ADRESL 000FC3  
                                                         __end_of___ftpack 0114  
                                                                   i2l1682 0026  
                                       SGL_BlinkSwitchOffState@extraToggle 001C  
                                                         __end_of___lwtoft 0CBE  
                                                  __end_of_LIGHTS_BrakeRun 0C42  
                                                   ??_PCS_T16GetInputPortC 0037  
                                                        __end_of_INT_vInit 0D30  
                                                        __end_of_PCS_vInit 0CDA  
                                               __end_of_LIGHTS_HeadLampRun 09D0  
                                                   ?_INT_vInterruptHandler 002E  
                                                        ?_SGL_BlinkersInit 002E  
                                                                   ___ftge 0576  
                                       IOC_vSetOutputPort@u16ChannelSelect 0045  
                                                                   _demoSM 000A  
                                             ??_SGL_toggleSideHazardLights 004D  
                                                       ??_SGL_BlinkersInit 0035  
                                                                   clear_0 0BFC  
                                                                   isa$std 000001  
                                                 _SGL_HeadLightPasiveState 03D6  
                                                        __end_of_TIM_vInit 0BDE  
                                                             __pdataCOMRAM 0052  
                                                ?_ADC_vConversionCompleted 002E  
                                      IOC_T16GetInputPort@u16ChannelSelect 003F  
                                                             ?_SGL_isNight 002E  
                                                                   tblptrh 000FF7  
                                                                   tblptrl 000FF6  
                                                                   tblptru 000FF8  
                                               ??_SGL_HeadLightActiveState 004A  
                                              SGL_setSideHazardLights@side 004A  
                                              __end_of_IOC_T16GetInputPort 0A26  
                                                        _SCHED_vInitSystem 0CF0  
                                                               __accesstop 0060  
                                                  __end_of__initialization 0C02  
                                                        _TASK_vTaskAppInit 0D30  
                                              __end_of_PCS_vSetOutputPortD 06F2  
                                              __end_of_PCS_vSetOutputPortE 0674  
                                                               ___ftge@ff1 0040  
                                                               ___ftge@ff2 0043  
                                                        _LIGHTS_DemoState1 000000  
                                                        _LIGHTS_DemoState2 000000  
                                                       ?_SCHED_vInitSystem 002E  
                                                            ___rparam_used 000001  
                                                       ?_TASK_vTaskAppInit 002E  
                                                           __pcstackCOMRAM 002E  
                                                      ??_SCHED_vInitSystem 0035  
                                                           _TASK_vTask10ms 0D5E  
                                                      ??_TASK_vTaskAppInit 004A  
                                                   _SGL_setAllHazardLights 076E  
                                                               ___lwtoft@c 003D  
                                                  _SGL_setSideHazardLights 0A26  
                                             SGL_isNight@currentLightLevel 0049  
                                                        ??_TASK_vTask100ms 0035  
                                                __end_of_SCHED_vInitSystem 0D06  
                                                __end_of_TASK_vTaskAppInit 0D42  
                                                         ?_LIGHTS_BrakeRun 002E  
                                      PCS_vSetOutputPortE@u8BitNumberValue 003C  
                                                   __end_of_TASK_vTask10ms 0D68  
                                                                  ?___ftge 0040  
                                                   LIGHTS_BrakeRun@counter 001B  
                                                                ?___ftpack 0035  
                                                            ?_TASK_vTask1s 002E  
                                                                ?___lwtoft 003D  
                                                 __end_of_LIGHTS_BrakeInit 0CF0  
                                                                  i2u75_40 0880  
                                                                  i2u76_40 08A8  
                                                                  i2u75_48 0884  
                                                                  i2u77_48 08AC  
                                               __end_of_SGL_BlinkEventPoll 0BAA  
                                              __end_of_LIGHTS_HeadLampInit 0C6C  
                                                                  __Hparam 0000  
                                                                  __Lparam 0000  
                                                                _ADC_vInit 0A7A  
                                                          ?_TASK_vTask10ms 002E  
                                       __end_of_SGL_toggleSideHazardLights 04EE  
                                               _SGL_toggleSideHazardLights 0466  
                                         IOC_vSetOutputPort@u16ChannelMask 0048  
                                                ??_SGL_setSideHazardLights 004B  
                                                           ??_TASK_vTask1s 0035  
                                                                  __pcinit 0BDE  
                                                               ??___ftpack 003A  
                                                                  __ramtop 1000  
                                                                  __ptext0 0D42  
                                                                  __ptext1 07EA  
                                                                  __ptext2 0D30  
                                                                  __ptext3 0B3A  
                                                                  __ptext4 0C42  
                                                                  __ptext5 0CDA  
                                                                  __ptext6 0D68  
                                                                  __ptext7 0D50  
                                                                  __ptext8 0924  
                                                                  __ptext9 01D6  
                                                               ??___lwtoft 0040  
                                                  _PCS_vSetOutputPortD$706 0038  
                                                  _PCS_vSetOutputPortE$712 0038  
                                                                _T2CONbits 000FCA  
                                                     end_of_initialization 0C02  
                                                            _sched_bTicked 0016  
                                                            _sched_gTick1s 0018  
                                                  _SCHED_vTickFunctionCall 0D06  
                                                            __Lmediumconst 0000  
                                                  ??_INT_vInterruptHandler 0031  
                                                               ?_ADC_vInit 002E  
                                               ??_SGL_HeadLightPasiveState 004B  
                                         __end_of_ADC_vConversionCompleted 08C4  
                                                      _ADC_u16ReadAdcValue 0ABE  
                                                                  postdec2 000FDD  
                                               ?_SGL_toggleAllHazardLights 004A  
                                                                _INT_vInit 0D1C  
                                                                  postinc0 000FEE  
                                                                  postinc2 000FDE  
                                           SGL_BlinkPasiveState@firstEntry 0053  
                                                                _PCS_vInit 0CBE  
                                             SGL_setSideHazardLights@value 004B  
                                                       _LIGHTS_HeadLampRun 097A  
                                                    _SCHED_vStartScheduler 07EA  
                                                  _SGL_BlinkSwitchOffState 0114  
                                                                _TRISAbits 000F92  
                                                                _TRISCbits 000F94  
                                                                _TRISEbits 000F96  
                                                                _TIM_vInit 0BAA  
                                                     ?_ADC_u16ReadAdcValue 0035  
                                                      ?_LIGHTS_HeadLampRun 002E  
                                                 ??_SGL_BlinkSwitchOnState 004D  
                                                  _ADC_u16ReadAdcValue$374 0037  
                                                  ?_SGL_setAllHazardLights 004A  
                                                               ?_INT_vInit 002E  
                                                     ??_LIGHTS_HeadLampRun 004B  
                                        __end_of_SGL_toggleAllHazardLights 076E  
                                          SGL_toggleAllHazardLights@toggle 004A  
                                                           __end_of___ftge 05F6  
                                                               ?_PCS_vInit 002E  
                                                          _TASK_vTask100ms 0D6E  
                                                            __pidataCOMRAM 0D74  
                                                 ??_SGL_HeadLightEventPoll 0045  
                                                      start_initialization 0BDE  
                                                    ??_ADC_u16ReadAdcValue 0037  
                                                               ?_TIM_vInit 002E  
                                                     SGL_isNight@prevState 001A  
                                             __end_of_SGL_BlinkPasiveState 0290  
                                                ??_SCHED_vTickFunctionCall 002E  
                                                         _sched_gTick100ms 001F  
                                                     __end_of_TASK_vTask1s 0D6E  
                                           __end_of_SGL_setAllHazardLights 07EA  
                                                              ??_ADC_vInit 0035  
                                                ?_SGL_HeadLightActiveState 002E  
                                                                 ??___ftge 0046  
                                                        ??_SGL_BlinkersRun 0052  
                                                 _ADC_vConversionCompleted 0860  
                                                ??_SGL_BlinkSwitchOffState 004D  
                                                   ?_SCHED_vStartScheduler 002E  
                                               PCS_vSetOutputPortD@u8Value 0035  
                                                              __pbssCOMRAM 0001  
                                               PCS_vSetOutputPortE@u8Value 0035  
                                     PCS_T16GetInputPortC@u8BitNumberValue 003E  
                                                        ?_LIGHTS_BrakeInit 002E  
                                                            _TASK_vTask1ms 0D50  
                                              IOC_T16GetInputPort@pinValue 0041  
                                                              _headLightSM 0001  
                                                       ??_LIGHTS_BrakeInit 004A  
                                                         ??_TASK_vTask10ms 004B  
                                                  __end_of_TASK_vTask100ms 0D74  
                                                       _SGL_BlinkEventPoll 0B74  
                                                                __pintcode 0008  
                                                                _blinkerSM 0021  
                                                              ??_INT_vInit 0035  
                                              ?_SGL_toggleSideHazardLights 004A  
                                                              ??_PCS_vInit 0035  
                                                      ?_SGL_BlinkEventPoll 002E  
                                               SGL_BlinkSwitchOnState@side 001E  
                                                         _SGL_BlinkersInit 0B3A  
                                                              ??_TIM_vInit 0035  
                                                           ?_TASK_vTask1ms 002E  
                                                     ??_SGL_BlinkEventPoll 0045  
                                                                 _IPR1bits 000F9F  
                                                                 _PIE1bits 000F9D  
                                            __end_of_INT_vInterruptHandler 004C  
                                                                 _PIR1bits 000F9E  
                                            PCS_vSetOutputPortD@u8BitValue 003A  
                                          PCS_T16GetInputPortC@u8BitNumber 003D  
                                              ??_SGL_toggleAllHazardLights 004C  
                                                     _SGL_BlinkPasiveState 01D6  
                                        ADC_u16ReadAdcValue@U8ChannelValue 0039  
                                                   _SGL_BlinkSwitchOnState 0290  
                                                               _ADCON0bits 000FC2  
                                                               _ADCON1bits 000FC1  
                                                               _ADCON2bits 000FC0  
                                                            ??_SGL_isNight 0049  
                                           SGL_toggleSideHazardLights@side 004C  
                                            PCS_vSetOutputPortE@u8BitValue 003A  
                                                   _SGL_HeadLightEventPoll 0C6C  
                                             ADC_u16ReadAdcValue@U8Channel 003A  
                                                          _sched_gTick10ms 0020  
                                               __end_of_IOC_vSetOutputPort 0B3A  
                                                                 __Hrparam 0000  
                                                         ?_TASK_vTask100ms 002E  
                                                                 __Lrparam 0000  
                                                 ?_SGL_setSideHazardLights 004A  
                                                    ?_SGL_BlinkPasiveState 002E  
                                        IOC_T16GetInputPort@u16ChannelMask 0043  
                                                                 ___ftpack 0050  
                                                             _TASK_vTask1s 0D68  
                                                                 ___lwtoft 0C96  
                                                        ??_LIGHTS_BrakeRun 004A  
                                             __end_of_PCS_T16GetInputPortC 0924  
                                                          ??_TASK_vTask1ms 0052  
                                                ?_SGL_HeadLightPasiveState 002E  
                                                      _IOC_T16GetInputPort 09D0  
                                                                 __ptext10 0114  
                                                                 __ptext11 0290  
                                                                 __ptext20 0346  
                                                                 __ptext12 0A26  
                                                                 __ptext21 03D6  
                                                                 __ptext13 0466  
                                                                 __ptext30 0AFC  
                                                                 __ptext22 04EE  
                                                                 __ptext14 06F2  
                                                                 __ptext31 05F6  
                                                                 __ptext23 0C96  
                                                                 __ptext15 076E  
                                                                 __ptext40 0D06  
                                                                 __ptext32 0674  
                                                                 __ptext24 0050  
                                                                 __ptext16 0B74  
                                                                 __ptext41 0860  
                                                                 __ptext33 0D6E  
                                                                 __ptext25 0576  
                                                                 __ptext17 0C10  
                                                                 __ptext42 0000  
                                                                 __ptext34 0CF0  
                                                                 __ptext26 0C6C  
                                                                 __ptext18 0D5E  
                                                                 __ptext35 0BAA  
                                                                 __ptext27 09D0  
                                                                 __ptext19 097A  
                                                                 __ptext36 0CBE  
                                                                 __ptext28 08C6  
                                                                 __ptext37 0D1C  
                                                                 __ptext29 0ABE  
                                                                 __ptext38 0A7A  
                                                _SGL_toggleAllHazardLights 06F2  
                                         SGL_toggleSideHazardLights@toggle 004A  
                                         __end_of_SGL_HeadLightActiveState 03D6  
                                                      _PCS_vSetOutputPortD 0674  
                                                      _PCS_vSetOutputPortE 05F6  
                                                      __end_of_SGL_isNight 0576  
                                                          _SGL_BlinkersRun 0924  
                                               ??_ADC_vConversionCompleted 002E  
                                                     ?_IOC_T16GetInputPort 003F  
                                                                 isa$xinst 000000  
                                                     ?_PCS_vSetOutputPortD 0035  
                                                     ?_PCS_vSetOutputPortE 0035  
                                                                 int$flags 0054  
                                                  ??_SCHED_vStartScheduler 0052  
                                              __end_of_ADC_u16ReadAdcValue 0AFC  
                                                               _INTCONbits 000FF2  
                                             SGL_setAllHazardLights@toggle 004A  
                                                                 intlevel2 0D76  
                                          __end_of_SGL_setSideHazardLights 0A7A  
                                                IOC_vSetOutputPort@u8Value 0047  
                                                    ??_IOC_T16GetInputPort 0041  
                                                 __end_of_SGL_BlinkersInit 0B74  
                                                   ??_SGL_BlinkPasiveState 004C  
                                                    ??_PCS_vSetOutputPortD 0036  
                                                    ??_PCS_vSetOutputPortE 0036  
                                                         _au16AdcReadValue 0012  
                                                 ?_SCHED_vTickFunctionCall 002E  
                                                              _SGL_isNight 04EE  
                                                  __end_of_SGL_BlinkersRun 097A  
                                                 _PCS_T16GetInputPortC$716 003B  
                                                      _LIGHTS_HeadLampInit 0C42  
                                                 _SGL_HeadLightActiveState 0346  
                                                     _PCS_T16GetInputPortC 08C6  
                                                     _LIGHTS_DemoEventPoll 000000  
