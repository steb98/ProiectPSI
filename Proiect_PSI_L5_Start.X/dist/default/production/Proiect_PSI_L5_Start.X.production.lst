

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Dec 11 18:33:28 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F6585
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61   000000                     
    62                           ; Version 2.40
    63                           ; Generated 04/07/2022 GMT
    64                           ; 
    65                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution. Publication is not required when
    79                           ;        this file is used in an embedded application.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F6585 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97   000000                     
    98 ;; Function _LIGHTS_DemoState1 is unused but had its address taken
    99   000000                     
   100 ;; Function _LIGHTS_DemoState2 is unused but had its address taken
   101   000000                     
   102 ;; Function _LIGHTS_DemoEventPoll is unused but had its address taken
   103   000000                     
   104                           	psect	idataCOMRAM
   105   000E6C                     __pidataCOMRAM:
   106                           	callstack 0
   107                           
   108                           ;initializer for SGL_BlinkSwitchOnState@firstEntry
   109   000E6C  01                 	db	1
   110                           
   111                           ;initializer for SGL_BlinkPasiveState@firstEntry
   112   000E6D  01                 	db	1
   113   000000                     _PR2	set	4043
   114   000000                     _TMR2	set	4044
   115   000000                     _T2CON	set	4042
   116   000000                     _PORTC	set	3970
   117   000000                     _PORTD	set	3971
   118   000000                     _TRISAbits	set	3986
   119   000000                     _PIE1bits	set	3997
   120   000000                     _PIR1bits	set	3998
   121   000000                     _ADCON2bits	set	4032
   122   000000                     _ADCON1bits	set	4033
   123   000000                     _ADCON0bits	set	4034
   124   000000                     _ADRESL	set	4035
   125   000000                     _ADRESH	set	4036
   126   000000                     _T2CONbits	set	4042
   127   000000                     _INTCONbits	set	4082
   128   000000                     _IPR1bits	set	3999
   129   000000                     _TRISCbits	set	3988
   130   000000                     _TRISEbits	set	3990
   131   000000                     _TRISD	set	3989
   132   000000                     _PORTE	set	3972
   133                           
   134                           ; #config settings
   135                           
   136                           	psect	cinit
   137   000C5E                     __pcinit:
   138                           	callstack 0
   139   000C5E                     start_initialization:
   140                           	callstack 0
   141   000C5E                     __initialization:
   142                           	callstack 0
   143                           
   144                           ; Initialize objects allocated to COMRAM (2 bytes)
   145                           ; load TBLPTR registers with __pidataCOMRAM
   146   000C5E  0E6C               	movlw	low __pidataCOMRAM
   147   000C60  6EF6               	movwf	tblptrl,c
   148   000C62  0E0E               	movlw	high __pidataCOMRAM
   149   000C64  6EF7               	movwf	tblptrh,c
   150   000C66  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   151   000C68  6EF8               	movwf	tblptru,c
   152   000C6A  0009               	tblrd		*+	;fetch initializer
   153   000C6C  CFF5 F056          	movff	tablat,__pdataCOMRAM
   154   000C70  0009               	tblrd		*+	;fetch initializer
   155   000C72  CFF5 F057          	movff	tablat,__pdataCOMRAM+1
   156                           
   157                           ; Clear objects allocated to BANK0 (4 bytes)
   158   000C76  0100               	movlb	0
   159   000C78  6B63               	clrf	(__pbssBANK0+3)& (0+255),b
   160   000C7A  6B62               	clrf	(__pbssBANK0+2)& (0+255),b
   161   000C7C  6B61               	clrf	(__pbssBANK0+1)& (0+255),b
   162   000C7E  6B60               	clrf	__pbssBANK0& (0+255),b
   163                           
   164                           ; Clear objects allocated to COMRAM (56 bytes)
   165   000C80  EE00  F001         	lfsr	0,__pbssCOMRAM
   166   000C84  0E38               	movlw	56
   167   000C86                     clear_0:
   168   000C86  6AEE               	clrf	postinc0,c
   169   000C88  06E8               	decf	wreg,f,c
   170   000C8A  E1FD               	bnz	clear_0
   171   000C8C                     end_of_initialization:
   172                           	callstack 0
   173   000C8C                     __end_of__initialization:
   174                           	callstack 0
   175   000C8C  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   176   000C8E  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   177   000C90  0E00               	movlw	low (__Lmediumconst shr (0+16))
   178   000C92  6EF8               	movwf	tblptru,c
   179   000C94  0100               	movlb	0
   180   000C96  EF1D  F007         	goto	_main	;jump to C main() function
   181                           
   182                           	psect	bssCOMRAM
   183   000001                     __pbssCOMRAM:
   184                           	callstack 0
   185   000001                     _blinkerSM:
   186                           	callstack 0
   187   000001                     	ds	12
   188   00000D                     _headLightSM:
   189                           	callstack 0
   190   00000D                     	ds	9
   191   000016                     _demoSM:
   192                           	callstack 0
   193   000016                     	ds	8
   194   00001E                     _sched_bTicked:
   195                           	callstack 0
   196   00001E                     	ds	2
   197   000020                     _sched_gTick1s:
   198                           	callstack 0
   199   000020                     	ds	2
   200   000022                     _g_lightStateLumini:
   201                           	callstack 0
   202   000022                     	ds	2
   203   000024                     _g_lightStateFrana:
   204                           	callstack 0
   205   000024                     	ds	2
   206   000026                     SGL_BlinkSwitchOffState@side:
   207                           	callstack 0
   208   000026                     	ds	2
   209   000028                     SGL_BlinkSwitchOffState@counter:
   210                           	callstack 0
   211   000028                     	ds	2
   212   00002A                     SGL_BlinkSwitchOnState@counter:
   213                           	callstack 0
   214   00002A                     	ds	2
   215   00002C                     SGL_BlinkPasiveState@counter:
   216                           	callstack 0
   217   00002C                     	ds	2
   218   00002E                     _g_sglStareSemnal:
   219                           	callstack 0
   220   00002E                     	ds	2
   221   000030                     _sched_gTick100ms:
   222                           	callstack 0
   223   000030                     	ds	1
   224   000031                     _sched_gTick10ms:
   225                           	callstack 0
   226   000031                     	ds	1
   227   000032                     SGL_isNight@prevState:
   228                           	callstack 0
   229   000032                     	ds	1
   230   000033                     LIGHTS_BrakeRun@counter:
   231                           	callstack 0
   232   000033                     	ds	1
   233   000034                     SGL_BlinkSwitchOffState@cycles:
   234                           	callstack 0
   235   000034                     	ds	1
   236   000035                     SGL_BlinkSwitchOnState@side:
   237                           	callstack 0
   238   000035                     	ds	1
   239   000036                     SGL_BlinkSwitchOffState@toggleLights:
   240                           	callstack 0
   241   000036                     	ds	1
   242   000037                     SGL_BlinkSwitchOnState@toggleLights:
   243                           	callstack 0
   244   000037                     	ds	1
   245   000038                     SGL_BlinkPasiveState@toggleLights:
   246                           	callstack 0
   247   000038                     	ds	1
   248                           
   249                           	psect	dataCOMRAM
   250   000056                     __pdataCOMRAM:
   251                           	callstack 0
   252   000056                     SGL_BlinkSwitchOnState@firstEntry:
   253                           	callstack 0
   254   000056                     	ds	1
   255   000057                     SGL_BlinkPasiveState@firstEntry:
   256                           	callstack 0
   257   000057                     	ds	1
   258                           
   259                           	psect	bssBANK0
   260   000060                     __pbssBANK0:
   261                           	callstack 0
   262   000060                     _au16AdcReadValue:
   263                           	callstack 0
   264   000060                     	ds	4
   265                           
   266                           	psect	cstackBANK0
   267   000064                     __pcstackBANK0:
   268                           	callstack 0
   269   000064                     ??_SGL_BlinkSwitchOffState:
   270                           
   271                           ; 1 bytes @ 0x0
   272   000064                     	ds	2
   273                           
   274                           	psect	cstackCOMRAM
   275   000039                     __pcstackCOMRAM:
   276                           	callstack 0
   277   000039                     ??_ADC_vConversionCompleted:
   278   000039                     
   279                           ; 1 bytes @ 0x0
   280   000039                     	ds	3
   281   00003C                     ??_INT_vInterruptHandler:
   282                           
   283                           ; 1 bytes @ 0x3
   284   00003C                     	ds	4
   285   000040                     ?_ADC_u16ReadAdcValue:
   286                           	callstack 0
   287   000040                     ?_PCS_T16GetInputPortC:
   288                           	callstack 0
   289   000040                     ?___ftpack:
   290                           	callstack 0
   291   000040                     PCS_vSetOutputPortD@u8Value:
   292                           	callstack 0
   293   000040                     PCS_vSetOutputPortE@u8Value:
   294                           	callstack 0
   295   000040                     ___ftpack@arg:
   296                           	callstack 0
   297                           
   298                           ; 3 bytes @ 0x7
   299   000040                     	ds	1
   300   000041                     ??_PCS_vSetOutputPortD:
   301   000041                     ??_PCS_vSetOutputPortE:
   302                           
   303                           ; 1 bytes @ 0x8
   304   000041                     	ds	1
   305   000042                     ??_PCS_T16GetInputPortC:
   306   000042                     _ADC_u16ReadAdcValue$519:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0x9
   310   000042                     	ds	1
   311   000043                     ___ftpack@exp:
   312                           	callstack 0
   313   000043                     _PCS_vSetOutputPortD$851:
   314                           	callstack 0
   315   000043                     _PCS_vSetOutputPortE$857:
   316                           	callstack 0
   317                           
   318                           ; 2 bytes @ 0xA
   319   000043                     	ds	1
   320   000044                     ADC_u16ReadAdcValue@U8ChannelValue:
   321                           	callstack 0
   322   000044                     ___ftpack@sign:
   323                           	callstack 0
   324                           
   325                           ; 1 bytes @ 0xB
   326   000044                     	ds	1
   327   000045                     ??___ftpack:
   328   000045                     ADC_u16ReadAdcValue@U8Channel:
   329                           	callstack 0
   330   000045                     PCS_vSetOutputPortD@u8BitValue:
   331                           	callstack 0
   332   000045                     PCS_vSetOutputPortE@u8BitValue:
   333                           	callstack 0
   334                           
   335                           ; 1 bytes @ 0xC
   336   000045                     	ds	1
   337   000046                     PCS_vSetOutputPortD@u8BitNumber:
   338                           	callstack 0
   339   000046                     PCS_vSetOutputPortE@u8BitNumber:
   340                           	callstack 0
   341   000046                     _PCS_T16GetInputPortC$861:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0xD
   345   000046                     	ds	1
   346   000047                     PCS_vSetOutputPortD@u8BitNumberValue:
   347                           	callstack 0
   348   000047                     PCS_vSetOutputPortE@u8BitNumberValue:
   349                           	callstack 0
   350                           
   351                           ; 1 bytes @ 0xE
   352   000047                     	ds	1
   353   000048                     ?___lwtoft:
   354                           	callstack 0
   355   000048                     PCS_T16GetInputPortC@u8BitNumber:
   356                           	callstack 0
   357   000048                     IOC_vSetOutputPort@u16ChannelSelect:
   358                           	callstack 0
   359   000048                     ___lwtoft@c:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0xF
   363   000048                     	ds	1
   364   000049                     PCS_T16GetInputPortC@u8BitNumberValue:
   365                           	callstack 0
   366                           
   367                           ; 1 bytes @ 0x10
   368   000049                     	ds	1
   369   00004A                     ?_IOC_T16GetInputPort:
   370                           	callstack 0
   371   00004A                     IOC_vSetOutputPort@u8Value:
   372                           	callstack 0
   373   00004A                     IOC_T16GetInputPort@u16ChannelSelect:
   374                           	callstack 0
   375                           
   376                           ; 2 bytes @ 0x11
   377   00004A                     	ds	1
   378   00004B                     IOC_vSetOutputPort@u16ChannelMask:
   379                           	callstack 0
   380   00004B                     ___ftge@ff1:
   381                           	callstack 0
   382                           
   383                           ; 3 bytes @ 0x12
   384   00004B                     	ds	1
   385   00004C                     IOC_T16GetInputPort@pinValue:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x13
   389   00004C                     	ds	1
   390   00004D                     SGL_setAllHazardLights@value:
   391                           	callstack 0
   392   00004D                     SGL_setSideHazardLights@side:
   393                           	callstack 0
   394   00004D                     SGL_toggleAllHazardLights@toggle:
   395                           	callstack 0
   396   00004D                     SGL_toggleSideHazardLights@toggle:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x14
   400   00004D                     	ds	1
   401   00004E                     SGL_setSideHazardLights@value:
   402                           	callstack 0
   403   00004E                     IOC_T16GetInputPort@u16ChannelMask:
   404                           	callstack 0
   405   00004E                     ___ftge@ff2:
   406                           	callstack 0
   407                           
   408                           ; 3 bytes @ 0x15
   409   00004E                     	ds	1
   410   00004F                     SGL_toggleSideHazardLights@side:
   411                           	callstack 0
   412                           
   413                           ; 1 bytes @ 0x16
   414   00004F                     	ds	1
   415   000050                     
   416                           ; 1 bytes @ 0x17
   417   000050                     	ds	1
   418   000051                     ??___ftge:
   419                           
   420                           ; 1 bytes @ 0x18
   421   000051                     	ds	3
   422   000054                     SGL_isNight@currentLightLevel:
   423                           	callstack 0
   424   000054                     DIAGNOSIS_ActivateError@sensorValue:
   425                           	callstack 0
   426                           
   427                           ; 2 bytes @ 0x1B
   428   000054                     	ds	2
   429   000056                     
   430                           ; 1 bytes @ 0x1D
   431 ;;
   432 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   433 ;;
   434 ;; *************** function _main *****************
   435 ;; Defined at:
   436 ;;		line 11 in file "main.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;		None
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   454 ;;Total ram usage:        0 bytes
   455 ;; Hardware stack levels required when called: 9
   456 ;; This function calls:
   457 ;;		_SCHED_vInitSystem
   458 ;;		_SCHED_vStartScheduler
   459 ;; This function is called by:
   460 ;;		Startup code after reset
   461 ;; This function uses a non-reentrant model
   462 ;;
   463                           
   464                           	psect	text0
   465   000E3A                     __ptext0:
   466                           	callstack 0
   467   000E3A                     _main:
   468                           	callstack 0
   469   000E3A  FFFF               	dw	65535	; assembler added errata NOP
   470                           
   471                           ;main.c: 13: SCHED_vInitSystem();
   472                           
   473                           ;incstack = 0
   474   000E3C  ECF4  F006         	call	_SCHED_vInitSystem	;wreg free
   475                           
   476                           ;main.c: 14: SCHED_vStartScheduler();
   477   000E40  EC44  F004         	call	_SCHED_vStartScheduler	;wreg free
   478   000E44  EF26  F000         	goto	start
   479   000E48                     __end_of_main:
   480                           	callstack 0
   481                           
   482 ;; *************** function _SCHED_vStartScheduler *****************
   483 ;; Defined at:
   484 ;;		line 29 in file "sched.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   502 ;;Total ram usage:        0 bytes
   503 ;; Hardware stack levels used: 1
   504 ;; Hardware stack levels required when called: 8
   505 ;; This function calls:
   506 ;;		_TASK_vTask100ms
   507 ;;		_TASK_vTask10ms
   508 ;;		_TASK_vTask1ms
   509 ;;		_TASK_vTask1s
   510 ;;		_TASK_vTaskAppInit
   511 ;; This function is called by:
   512 ;;		_main
   513 ;; This function uses a non-reentrant model
   514 ;;
   515                           
   516                           	psect	text1
   517   000888                     __ptext1:
   518                           	callstack 0
   519   000888                     _SCHED_vStartScheduler:
   520                           	callstack 0
   521   000888  FFFF               	dw	65535	; assembler added errata NOP
   522                           
   523                           ;sched.c: 31: sched_gTick10ms = 0;
   524                           
   525                           ;incstack = 0
   526   00088A  0E00               	movlw	0
   527   00088C  6E31               	movwf	_sched_gTick10ms^0,c
   528                           
   529                           ;sched.c: 32: sched_gTick100ms = 0;
   530   00088E  0E00               	movlw	0
   531   000890  6E30               	movwf	_sched_gTick100ms^0,c
   532                           
   533                           ;sched.c: 33: sched_gTick1s = 0;
   534   000892  0E00               	movlw	0
   535   000894  6E21               	movwf	(_sched_gTick1s+1)^0,c
   536   000896  0E00               	movlw	0
   537   000898  6E20               	movwf	_sched_gTick1s^0,c
   538                           
   539                           ;sched.c: 34: sched_bTicked = 0;;
   540   00089A  0E00               	movlw	0
   541   00089C  6E1F               	movwf	(_sched_bTicked+1)^0,c
   542   00089E  0E00               	movlw	0
   543   0008A0  6E1E               	movwf	_sched_bTicked^0,c
   544                           
   545                           ;sched.c: 36: TASK_vTaskAppInit();
   546   0008A2  EC14  F007         	call	_TASK_vTaskAppInit	;wreg free
   547   0008A6                     l2620:
   548   0008A6  FFFF               	dw	65535	; assembler added errata NOP
   549                           
   550                           ;sched.c: 39: {;sched.c: 40: if(sched_bTicked)
   551   0008A8  501E               	movf	_sched_bTicked^0,w,c
   552   0008AA  101F               	iorwf	(_sched_bTicked+1)^0,w,c
   553   0008AC  B4D8               	btfsc	status,2,c
   554   0008AE  D7FB               	goto	l2620
   555                           
   556                           ;sched.c: 41: {;sched.c: 42: sched_bTicked = 0;;
   557   0008B0  0E00               	movlw	0
   558   0008B2  6E1F               	movwf	(_sched_bTicked+1)^0,c
   559   0008B4  0E00               	movlw	0
   560   0008B6  6E1E               	movwf	_sched_bTicked^0,c
   561                           
   562                           ;sched.c: 43: TASK_vTask1ms();
   563   0008B8  EC24  F007         	call	_TASK_vTask1ms	;wreg free
   564                           
   565                           ;sched.c: 45: if(sched_gTick10ms == 10)
   566   0008BC  0E0A               	movlw	10
   567   0008BE  1831               	xorwf	_sched_gTick10ms^0,w,c
   568   0008C0  A4D8               	btfss	status,2,c
   569   0008C2  D004               	goto	l2632
   570                           
   571                           ;sched.c: 46: {;sched.c: 47: sched_gTick10ms = 0;
   572   0008C4  0E00               	movlw	0
   573   0008C6  6E31               	movwf	_sched_gTick10ms^0,c
   574                           
   575                           ;sched.c: 48: TASK_vTask10ms();
   576   0008C8  EC2B  F007         	call	_TASK_vTask10ms	;wreg free
   577   0008CC                     l2632:
   578   0008CC  FFFF               	dw	65535	; assembler added errata NOP
   579                           
   580                           ;sched.c: 49: };sched.c: 50: if(sched_gTick100ms == 100)
   581   0008CE  0E64               	movlw	100
   582   0008D0  1830               	xorwf	_sched_gTick100ms^0,w,c
   583   0008D2  A4D8               	btfss	status,2,c
   584   0008D4  D004               	goto	l2638
   585                           
   586                           ;sched.c: 51: {;sched.c: 52: sched_gTick100ms = 0;
   587   0008D6  0E00               	movlw	0
   588   0008D8  6E30               	movwf	_sched_gTick100ms^0,c
   589                           
   590                           ;sched.c: 53: TASK_vTask100ms();
   591   0008DA  EC33  F007         	call	_TASK_vTask100ms	;wreg free
   592   0008DE                     l2638:
   593   0008DE  FFFF               	dw	65535	; assembler added errata NOP
   594                           
   595                           ;sched.c: 54: };sched.c: 55: if(sched_gTick1s == 1000)
   596   0008E0  0EE8               	movlw	232
   597   0008E2  1820               	xorwf	_sched_gTick1s^0,w,c
   598   0008E4  E1E0               	bnz	l2620
   599   0008E6  0E03               	movlw	3
   600   0008E8  1821               	xorwf	(_sched_gTick1s+1)^0,w,c
   601   0008EA  A4D8               	btfss	status,2,c
   602   0008EC  D7DC               	goto	l2620
   603                           
   604                           ;sched.c: 56: {;sched.c: 57: sched_gTick1s = 0;
   605   0008EE  0E00               	movlw	0
   606   0008F0  6E21               	movwf	(_sched_gTick1s+1)^0,c
   607   0008F2  0E00               	movlw	0
   608   0008F4  6E20               	movwf	_sched_gTick1s^0,c
   609                           
   610                           ;sched.c: 58: TASK_vTask1s();
   611   0008F6  EC30  F007         	call	_TASK_vTask1s	;wreg free
   612   0008FA  D7D5               	goto	l2620
   613   0008FC  FFFF               	dw	65535	; errata NOP
   614   0008FE                     __end_of_SCHED_vStartScheduler:
   615                           	callstack 0
   616                           
   617 ;; *************** function _TASK_vTaskAppInit *****************
   618 ;; Defined at:
   619 ;;		line 6 in file "tasks.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;		None
   622 ;; Auto vars:     Size  Location     Type
   623 ;;		None
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, status,2, status,0, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   637 ;;Total ram usage:        0 bytes
   638 ;; Hardware stack levels used: 1
   639 ;; Hardware stack levels required when called: 5
   640 ;; This function calls:
   641 ;;		_LIGHTS_BrakeInit
   642 ;;		_LIGHTS_HeadLampInit
   643 ;;		_SGL_BlinkersInit
   644 ;; This function is called by:
   645 ;;		_SCHED_vStartScheduler
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           	psect	text2
   650   000E28                     __ptext2:
   651                           	callstack 0
   652   000E28                     _TASK_vTaskAppInit:
   653                           	callstack 0
   654   000E28  FFFF               	dw	65535	; assembler added errata NOP
   655                           
   656                           ;tasks.c: 8: SGL_BlinkersInit();
   657                           
   658                           ;incstack = 0
   659   000E2A  EC4D  F006         	call	_SGL_BlinkersInit	;wreg free
   660                           
   661                           ;tasks.c: 9: LIGHTS_BrakeInit();
   662   000E2E  ECE9  F006         	call	_LIGHTS_BrakeInit	;wreg free
   663                           
   664                           ;tasks.c: 10: LIGHTS_HeadLampInit();
   665   000E32  EC9D  F006         	call	_LIGHTS_HeadLampInit	;wreg free
   666   000E36  0012               	return		;funcret
   667   000E38  FFFF               	dw	65535	; errata NOP
   668   000E3A                     __end_of_TASK_vTaskAppInit:
   669                           	callstack 0
   670                           
   671 ;; *************** function _SGL_BlinkersInit *****************
   672 ;; Defined at:
   673 ;;		line 245 in file "sgl.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;		None
   676 ;; Auto vars:     Size  Location     Type
   677 ;;		None
   678 ;; Return value:  Size  Location     Type
   679 ;;                  1    wreg      void 
   680 ;; Registers used:
   681 ;;		wreg, status,2, status,0
   682 ;; Tracked objects:
   683 ;;		On entry : 0/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   691 ;;Total ram usage:        0 bytes
   692 ;; Hardware stack levels used: 1
   693 ;; Hardware stack levels required when called: 2
   694 ;; This function calls:
   695 ;;		Nothing
   696 ;; This function is called by:
   697 ;;		_TASK_vTaskAppInit
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701                           	psect	text3
   702   000C9A                     __ptext3:
   703                           	callstack 0
   704   000C9A                     _SGL_BlinkersInit:
   705                           	callstack 0
   706   000C9A  FFFF               	dw	65535	; assembler added errata NOP
   707                           
   708                           ;sgl.c: 247: blinkerSM._currentState = SGL_BlinkPasiveState;
   709                           
   710                           ;incstack = 0
   711   000C9C  0E48               	movlw	low _SGL_BlinkPasiveState
   712   000C9E  6E01               	movwf	_blinkerSM^0,c
   713   000CA0  0E01               	movlw	high _SGL_BlinkPasiveState
   714   000CA2  6E02               	movwf	(_blinkerSM+1)^0,c
   715                           
   716                           ;sgl.c: 248: blinkerSM._pollEvents = SGL_BlinkEventPoll;
   717   000CA4  0ED0               	movlw	low _SGL_BlinkEventPoll
   718   000CA6  6E03               	movwf	(_blinkerSM+2)^0,c
   719   000CA8  0E0C               	movlw	high _SGL_BlinkEventPoll
   720   000CAA  6E04               	movwf	(_blinkerSM+3)^0,c
   721                           
   722                           ;sgl.c: 249: blinkerSM.avarie = 0;
   723   000CAC  0E00               	movlw	0
   724   000CAE  6E07               	movwf	(_blinkerSM+6)^0,c
   725                           
   726                           ;sgl.c: 250: blinkerSM.firstEntry = 1;
   727   000CB0  0E00               	movlw	0
   728   000CB2  6E06               	movwf	(_blinkerSM+5)^0,c
   729   000CB4  0E01               	movlw	1
   730   000CB6  6E05               	movwf	(_blinkerSM+4)^0,c
   731                           
   732                           ;sgl.c: 251: blinkerSM.leftSwitch = 0;
   733   000CB8  0E00               	movlw	0
   734   000CBA  6E08               	movwf	(_blinkerSM+7)^0,c
   735                           
   736                           ;sgl.c: 252: blinkerSM.rightSwitch = 0;
   737   000CBC  0E00               	movlw	0
   738   000CBE  6E09               	movwf	(_blinkerSM+8)^0,c
   739                           
   740                           ;sgl.c: 253: blinkerSM.lastSide = 0;
   741   000CC0  0E00               	movlw	0
   742   000CC2  6E0A               	movwf	(_blinkerSM+9)^0,c
   743                           
   744                           ;sgl.c: 254: blinkerSM.lastToggle = 0;
   745   000CC4  0E00               	movlw	0
   746   000CC6  6E0B               	movwf	(_blinkerSM+10)^0,c
   747                           
   748                           ;sgl.c: 255: blinkerSM.carryCounter = 0;
   749   000CC8  0E00               	movlw	0
   750   000CCA  6E0C               	movwf	(_blinkerSM+11)^0,c
   751   000CCC  0012               	return		;funcret
   752   000CCE  FFFF               	dw	65535	; errata NOP
   753   000CD0                     __end_of_SGL_BlinkersInit:
   754                           	callstack 0
   755                           
   756 ;; *************** function _LIGHTS_HeadLampInit *****************
   757 ;; Defined at:
   758 ;;		line 120 in file "lights.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;		None
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   776 ;;Total ram usage:        0 bytes
   777 ;; Hardware stack levels used: 1
   778 ;; Hardware stack levels required when called: 2
   779 ;; This function calls:
   780 ;;		Nothing
   781 ;; This function is called by:
   782 ;;		_TASK_vTaskAppInit
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text4
   787   000D3A                     __ptext4:
   788                           	callstack 0
   789   000D3A                     _LIGHTS_HeadLampInit:
   790                           	callstack 0
   791   000D3A  FFFF               	dw	65535	; assembler added errata NOP
   792                           
   793                           ;lights.c: 122: headLightSM._currentState = SGL_HeadLightPasiveState;
   794                           
   795                           ;incstack = 0
   796   000D3C  0E6A               	movlw	low _SGL_HeadLightPasiveState
   797   000D3E  6E0D               	movwf	_headLightSM^0,c
   798   000D40  0E04               	movlw	high _SGL_HeadLightPasiveState
   799   000D42  6E0E               	movwf	(_headLightSM+1)^0,c
   800                           
   801                           ;lights.c: 123: headLightSM._pollEvents = SGL_HeadLightEventPoll;
   802   000D44  0E64               	movlw	low _SGL_HeadLightEventPoll
   803   000D46  6E0F               	movwf	(_headLightSM+2)^0,c
   804   000D48  0E0D               	movlw	high _SGL_HeadLightEventPoll
   805   000D4A  6E10               	movwf	(_headLightSM+3)^0,c
   806                           
   807                           ;lights.c: 124: headLightSM.firstEntry = 1;
   808   000D4C  0E00               	movlw	0
   809   000D4E  6E12               	movwf	(_headLightSM+5)^0,c
   810   000D50  0E01               	movlw	1
   811   000D52  6E11               	movwf	(_headLightSM+4)^0,c
   812                           
   813                           ;lights.c: 125: headLightSM.faruri = 0;
   814   000D54  0E00               	movlw	0
   815   000D56  6E13               	movwf	(_headLightSM+6)^0,c
   816                           
   817                           ;lights.c: 126: headLightSM.lightLevel = 0;
   818   000D58  0E00               	movlw	0
   819   000D5A  6E15               	movwf	(_headLightSM+8)^0,c
   820   000D5C  0E00               	movlw	0
   821   000D5E  6E14               	movwf	(_headLightSM+7)^0,c
   822   000D60  0012               	return		;funcret
   823   000D62  FFFF               	dw	65535	; errata NOP
   824   000D64                     __end_of_LIGHTS_HeadLampInit:
   825                           	callstack 0
   826                           
   827 ;; *************** function _LIGHTS_BrakeInit *****************
   828 ;; Defined at:
   829 ;;		line 6 in file "lights.c"
   830 ;; Parameters:    Size  Location     Type
   831 ;;		None
   832 ;; Auto vars:     Size  Location     Type
   833 ;;		None
   834 ;; Return value:  Size  Location     Type
   835 ;;                  1    wreg      void 
   836 ;; Registers used:
   837 ;;		wreg, status,2, status,0, cstack
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   847 ;;Total ram usage:        0 bytes
   848 ;; Hardware stack levels used: 1
   849 ;; Hardware stack levels required when called: 4
   850 ;; This function calls:
   851 ;;		_IOC_vSetOutputPort
   852 ;; This function is called by:
   853 ;;		_TASK_vTaskAppInit
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           	psect	text5
   858   000DD2                     __ptext5:
   859                           	callstack 0
   860   000DD2                     _LIGHTS_BrakeInit:
   861                           	callstack 0
   862   000DD2  FFFF               	dw	65535	; assembler added errata NOP
   863                           
   864                           ;lights.c: 8: IOC_vSetOutputPort(IOC_LSF, 0);
   865                           
   866                           ;incstack = 0
   867   000DD4  0E01               	movlw	1
   868   000DD6  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
   869   000DD8  0E05               	movlw	5
   870   000DDA  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
   871   000DDC  0E00               	movlw	0
   872   000DDE  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
   873   000DE0  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
   874   000DE4  0012               	return		;funcret
   875   000DE6  FFFF               	dw	65535	; errata NOP
   876   000DE8                     __end_of_LIGHTS_BrakeInit:
   877                           	callstack 0
   878                           
   879 ;; *************** function _TASK_vTask1s *****************
   880 ;; Defined at:
   881 ;;		line 31 in file "tasks.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		None
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   899 ;;Total ram usage:        0 bytes
   900 ;; Hardware stack levels used: 1
   901 ;; Hardware stack levels required when called: 2
   902 ;; This function calls:
   903 ;;		Nothing
   904 ;; This function is called by:
   905 ;;		_SCHED_vStartScheduler
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           	psect	text6
   910   000E60                     __ptext6:
   911                           	callstack 0
   912   000E60                     _TASK_vTask1s:
   913                           	callstack 0
   914   000E60  FFFF               	dw	65535	; assembler added errata NOP
   915                           
   916                           ;incstack = 0
   917   000E62  0012               	return		;funcret
   918   000E64  FFFF               	dw	65535	; errata NOP
   919   000E66                     __end_of_TASK_vTask1s:
   920                           	callstack 0
   921                           
   922 ;; *************** function _TASK_vTask1ms *****************
   923 ;; Defined at:
   924 ;;		line 15 in file "tasks.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;		None
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      void 
   931 ;; Registers used:
   932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   942 ;;Total ram usage:        0 bytes
   943 ;; Hardware stack levels used: 1
   944 ;; Hardware stack levels required when called: 7
   945 ;; This function calls:
   946 ;;		_LIGHTS_BrakeRun
   947 ;;		_SGL_BlinkersRun
   948 ;; This function is called by:
   949 ;;		_SCHED_vStartScheduler
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	text7
   954   000E48                     __ptext7:
   955                           	callstack 0
   956   000E48                     _TASK_vTask1ms:
   957                           	callstack 0
   958   000E48  FFFF               	dw	65535	; assembler added errata NOP
   959                           
   960                           ;tasks.c: 17: SGL_BlinkersRun();
   961                           
   962                           ;incstack = 0
   963   000E4A  ECE1  F004         	call	_SGL_BlinkersRun	;wreg free
   964                           
   965                           ;tasks.c: 18: LIGHTS_BrakeRun();
   966   000E4E  ECD2  F005         	call	_LIGHTS_BrakeRun	;wreg free
   967   000E52  0012               	return		;funcret
   968   000E54  FFFF               	dw	65535	; errata NOP
   969   000E56                     __end_of_TASK_vTask1ms:
   970                           	callstack 0
   971                           
   972 ;; *************** function _SGL_BlinkersRun *****************
   973 ;; Defined at:
   974 ;;		line 258 in file "sgl.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;		None
   977 ;; Auto vars:     Size  Location     Type
   978 ;;		None
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   992 ;;Total ram usage:        0 bytes
   993 ;; Hardware stack levels used: 1
   994 ;; Hardware stack levels required when called: 6
   995 ;; This function calls:
   996 ;;		_SGL_BlinkEventPoll
   997 ;;		_SGL_BlinkPasiveState
   998 ;;		_SGL_BlinkSwitchOffState
   999 ;;		_SGL_BlinkSwitchOnState
  1000 ;; This function is called by:
  1001 ;;		_TASK_vTask1ms
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           	psect	text8
  1006   0009C2                     __ptext8:
  1007                           	callstack 0
  1008   0009C2                     _SGL_BlinkersRun:
  1009                           	callstack 0
  1010   0009C2  FFFF               	dw	65535	; assembler added errata NOP
  1011                           
  1012                           ;sgl.c: 260: if(0 != blinkerSM._currentState)
  1013                           
  1014                           ;incstack = 0
  1015   0009C4  5001               	movf	_blinkerSM^0,w,c
  1016   0009C6  1002               	iorwf	(_blinkerSM+1)^0,w,c
  1017   0009C8  B4D8               	btfsc	status,2,c
  1018   0009CA  D00E               	goto	u2139
  1019                           
  1020                           ;sgl.c: 261: {;sgl.c: 262: (*blinkerSM._currentState)();
  1021   0009CC  D801               	call	u2138
  1022   0009CE  D00C               	goto	u2139
  1023   0009D0                     u2138:
  1024   0009D0  FFFF               	dw	65535	; assembler added errata NOP
  1025   0009D2  0005               	push	
  1026   0009D4  6EFA               	movwf	pclath,c
  1027   0009D6  5001               	movf	_blinkerSM^0,w,c
  1028   0009D8  6EFD               	movwf	tosl,c
  1029   0009DA  5002               	movf	(_blinkerSM+1)^0,w,c
  1030   0009DC  6EFE               	movwf	tosh,c
  1031   0009DE  50F8               	movf	tblptru,w,c
  1032   0009E0  6EFF               	movwf	tosu,c
  1033   0009E2  50FA               	movf	pclath,w,c
  1034   0009E4  0012               	return		;indir
  1035   0009E6  FFFF               	dw	65535	; errata NOP
  1036   0009E8                     u2139:
  1037   0009E8  FFFF               	dw	65535	; assembler added errata NOP
  1038                           
  1039                           ;sgl.c: 263: };sgl.c: 264: if(0 != blinkerSM._pollEvents)
  1040   0009EA  5003               	movf	(_blinkerSM+2)^0,w,c
  1041   0009EC  1004               	iorwf	(_blinkerSM+3)^0,w,c
  1042   0009EE  B4D8               	btfsc	status,2,c
  1043   0009F0  D010               	goto	u2159
  1044                           
  1045                           ;sgl.c: 265: {;sgl.c: 266: (*blinkerSM._pollEvents)();
  1046   0009F2  EE20  F003         	lfsr	2,_blinkerSM+2
  1047   0009F6  D801               	call	u2158
  1048   0009F8  D00C               	goto	u2159
  1049   0009FA                     u2158:
  1050   0009FA  FFFF               	dw	65535	; assembler added errata NOP
  1051   0009FC  0005               	push	
  1052   0009FE  6EFA               	movwf	pclath,c
  1053   000A00  50DE               	movf	postinc2,w,c
  1054   000A02  6EFD               	movwf	tosl,c
  1055   000A04  50DE               	movf	postinc2,w,c
  1056   000A06  6EFE               	movwf	tosh,c
  1057   000A08  50F8               	movf	tblptru,w,c
  1058   000A0A  6EFF               	movwf	tosu,c
  1059   000A0C  50FA               	movf	pclath,w,c
  1060   000A0E  0012               	return		;indir
  1061   000A10  FFFF               	dw	65535	; errata NOP
  1062   000A12                     u2159:
  1063   000A12  FFFF               	dw	65535	; assembler added errata NOP
  1064   000A14  0012               	return		;funcret
  1065   000A16  FFFF               	dw	65535	; errata NOP
  1066   000A18                     __end_of_SGL_BlinkersRun:
  1067                           	callstack 0
  1068                           
  1069 ;; *************** function _SGL_BlinkPasiveState *****************
  1070 ;; Defined at:
  1071 ;;		line 66 in file "sgl.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;		None
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;		None
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1089 ;;Total ram usage:        0 bytes
  1090 ;; Hardware stack levels used: 1
  1091 ;; Hardware stack levels required when called: 5
  1092 ;; This function calls:
  1093 ;;		_DIAGNOSIS_ActivateError
  1094 ;;		_SGL_setAllHazardLights
  1095 ;;		_SGL_toggleAllHazardLights
  1096 ;; This function is called by:
  1097 ;;		_SGL_BlinkSwitchOnState
  1098 ;;		_SGL_BlinkSwitchOffState
  1099 ;;		_SGL_BlinkersInit
  1100 ;;		_SGL_BlinkersRun
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text9
  1105   000148                     __ptext9:
  1106                           	callstack 0
  1107   000148                     _SGL_BlinkPasiveState:
  1108                           	callstack 0
  1109   000148  FFFF               	dw	65535	; assembler added errata NOP
  1110                           
  1111                           ;sgl.c: 68: static T_U16 counter = 0;;sgl.c: 69: static T_U8 firstEntry = 1;;sgl.c: 70: 
      +                          static T_U8 toggleLights = 0;;sgl.c: 73: if(blinkerSM.firstEntry == 1)
  1112                           
  1113                           ;incstack = 0
  1114   00014A  0405               	decf	(_blinkerSM+4)^0,w,c
  1115   00014C  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1116   00014E  A4D8               	btfss	status,2,c
  1117   000150  D007               	goto	l2408
  1118                           
  1119                           ;sgl.c: 74: {;sgl.c: 75: SGL_setAllHazardLights(0);
  1120   000152  0E00               	movlw	0
  1121   000154  EC8C  F005         	call	_SGL_setAllHazardLights
  1122                           
  1123                           ;sgl.c: 76: blinkerSM.firstEntry = 0;
  1124   000158  0E00               	movlw	0
  1125   00015A  6E06               	movwf	(_blinkerSM+5)^0,c
  1126   00015C  0E00               	movlw	0
  1127   00015E  6E05               	movwf	(_blinkerSM+4)^0,c
  1128   000160                     l2408:
  1129   000160  FFFF               	dw	65535	; assembler added errata NOP
  1130                           
  1131                           ;sgl.c: 77: };sgl.c: 80: if(1 == blinkerSM.avarie)
  1132   000162  0407               	decf	(_blinkerSM+6)^0,w,c
  1133   000164  A4D8               	btfss	status,2,c
  1134   000166  D029               	goto	l2432
  1135                           
  1136                           ;sgl.c: 81: {;sgl.c: 82: if(1 == firstEntry)
  1137   000168  0457               	decf	SGL_BlinkPasiveState@firstEntry^0,w,c
  1138   00016A  A4D8               	btfss	status,2,c
  1139   00016C  D00B               	goto	l2420
  1140                           
  1141                           ;sgl.c: 83: {;sgl.c: 84: SGL_setAllHazardLights(1);
  1142   00016E  0E01               	movlw	1
  1143   000170  EC8C  F005         	call	_SGL_setAllHazardLights
  1144                           
  1145                           ;sgl.c: 85: g_sglStareSemnal = 1;
  1146   000174  0E00               	movlw	0
  1147   000176  6E2F               	movwf	(_g_sglStareSemnal+1)^0,c
  1148   000178  0E01               	movlw	1
  1149   00017A  6E2E               	movwf	_g_sglStareSemnal^0,c
  1150                           
  1151                           ;sgl.c: 86: DIAGNOSIS_ActivateError();
  1152   00017C  EC05  F003         	call	_DIAGNOSIS_ActivateError	;wreg free
  1153                           
  1154                           ;sgl.c: 87: firstEntry = 0;
  1155   000180  0E00               	movlw	0
  1156   000182  6E57               	movwf	SGL_BlinkPasiveState@firstEntry^0,c
  1157   000184                     l2420:
  1158   000184  FFFF               	dw	65535	; assembler added errata NOP
  1159                           
  1160                           ;sgl.c: 88: };sgl.c: 89: if(500 == counter)
  1161   000186  0EF4               	movlw	244
  1162   000188  182C               	xorwf	SGL_BlinkPasiveState@counter^0,w,c
  1163   00018A  E113               	bnz	l2430
  1164   00018C  042D               	decf	(SGL_BlinkPasiveState@counter+1)^0,w,c
  1165   00018E  A4D8               	btfss	status,2,c
  1166   000190  D010               	goto	l2430
  1167                           
  1168                           ;sgl.c: 90: {;sgl.c: 91: g_sglStareSemnal = toggleLights;
  1169   000192  C038  F02E         	movff	SGL_BlinkPasiveState@toggleLights,_g_sglStareSemnal
  1170   000196  6A2F               	clrf	(_g_sglStareSemnal+1)^0,c
  1171                           
  1172                           ;sgl.c: 92: SGL_toggleAllHazardLights(&toggleLights);
  1173   000198  0E38               	movlw	low SGL_BlinkPasiveState@toggleLights
  1174   00019A  6E4D               	movwf	SGL_toggleAllHazardLights@toggle^0,c
  1175   00019C  0E00               	movlw	high SGL_BlinkPasiveState@toggleLights
  1176   00019E  6E4E               	movwf	(SGL_toggleAllHazardLights@toggle+1)^0,c
  1177   0001A0  EC06  F004         	call	_SGL_toggleAllHazardLights	;wreg free
  1178                           
  1179                           ;sgl.c: 93: DIAGNOSIS_ActivateError();
  1180   0001A4  EC05  F003         	call	_DIAGNOSIS_ActivateError	;wreg free
  1181                           
  1182                           ;sgl.c: 94: counter = 0;
  1183   0001A8  0E00               	movlw	0
  1184   0001AA  6E2D               	movwf	(SGL_BlinkPasiveState@counter+1)^0,c
  1185   0001AC  0E00               	movlw	0
  1186   0001AE  6E2C               	movwf	SGL_BlinkPasiveState@counter^0,c
  1187                           
  1188                           ;sgl.c: 95: }
  1189   0001B0  D016               	goto	l2444
  1190   0001B2                     l2430:
  1191   0001B2  FFFF               	dw	65535	; assembler added errata NOP
  1192                           
  1193                           ;sgl.c: 96: else;sgl.c: 97: {;sgl.c: 98: counter++;
  1194   0001B4  4A2C               	infsnz	SGL_BlinkPasiveState@counter^0,f,c
  1195   0001B6  2A2D               	incf	(SGL_BlinkPasiveState@counter+1)^0,f,c
  1196   0001B8  D012               	goto	l2444
  1197   0001BA                     l2432:
  1198   0001BA  FFFF               	dw	65535	; assembler added errata NOP
  1199                           
  1200                           ;sgl.c: 101: else;sgl.c: 102: {;sgl.c: 103: g_sglStareSemnal = 0;
  1201   0001BC  0E00               	movlw	0
  1202   0001BE  6E2F               	movwf	(_g_sglStareSemnal+1)^0,c
  1203   0001C0  0E00               	movlw	0
  1204   0001C2  6E2E               	movwf	_g_sglStareSemnal^0,c
  1205                           
  1206                           ;sgl.c: 104: SGL_setAllHazardLights(0);
  1207   0001C4  0E00               	movlw	0
  1208   0001C6  EC8C  F005         	call	_SGL_setAllHazardLights
  1209                           
  1210                           ;sgl.c: 105: DIAGNOSIS_ActivateError();
  1211   0001CA  EC05  F003         	call	_DIAGNOSIS_ActivateError	;wreg free
  1212                           
  1213                           ;sgl.c: 106: counter = 0;
  1214   0001CE  0E00               	movlw	0
  1215   0001D0  6E2D               	movwf	(SGL_BlinkPasiveState@counter+1)^0,c
  1216   0001D2  0E00               	movlw	0
  1217   0001D4  6E2C               	movwf	SGL_BlinkPasiveState@counter^0,c
  1218                           
  1219                           ;sgl.c: 107: firstEntry = 1;
  1220   0001D6  0E01               	movlw	1
  1221   0001D8  6E57               	movwf	SGL_BlinkPasiveState@firstEntry^0,c
  1222                           
  1223                           ;sgl.c: 108: toggleLights = 0;
  1224   0001DA  0E00               	movlw	0
  1225   0001DC  6E38               	movwf	SGL_BlinkPasiveState@toggleLights^0,c
  1226   0001DE                     l2444:
  1227   0001DE  FFFF               	dw	65535	; assembler added errata NOP
  1228                           
  1229                           ;sgl.c: 109: };sgl.c: 112: if( ((1 == blinkerSM.leftSwitch) || (1 == blinkerSM.rightSwit
      +                          ch)) && 0 == blinkerSM.avarie )
  1230   0001E0  0408               	decf	(_blinkerSM+7)^0,w,c
  1231   0001E2  B4D8               	btfsc	status,2,c
  1232   0001E4  D003               	goto	u1960
  1233   0001E6  0409               	decf	(_blinkerSM+8)^0,w,c
  1234   0001E8  A4D8               	btfss	status,2,c
  1235   0001EA  D01B               	goto	l77
  1236   0001EC                     u1960:
  1237   0001EC  FFFF               	dw	65535	; assembler added errata NOP
  1238   0001EE  5007               	movf	(_blinkerSM+6)^0,w,c
  1239   0001F0  A4D8               	btfss	status,2,c
  1240   0001F2  D017               	goto	l77
  1241                           
  1242                           ;sgl.c: 113: {;sgl.c: 114: blinkerSM._currentState = SGL_BlinkSwitchOnState;
  1243   0001F4  0E50               	movlw	low _SGL_BlinkSwitchOnState
  1244   0001F6  6E01               	movwf	_blinkerSM^0,c
  1245   0001F8  0E00               	movlw	high _SGL_BlinkSwitchOnState
  1246   0001FA  6E02               	movwf	(_blinkerSM+1)^0,c
  1247                           
  1248                           ;sgl.c: 115: blinkerSM.firstEntry = 1;
  1249   0001FC  0E00               	movlw	0
  1250   0001FE  6E06               	movwf	(_blinkerSM+5)^0,c
  1251   000200  0E01               	movlw	1
  1252   000202  6E05               	movwf	(_blinkerSM+4)^0,c
  1253                           
  1254                           ;sgl.c: 116: counter = 0;
  1255   000204  0E00               	movlw	0
  1256   000206  6E2D               	movwf	(SGL_BlinkPasiveState@counter+1)^0,c
  1257   000208  0E00               	movlw	0
  1258   00020A  6E2C               	movwf	SGL_BlinkPasiveState@counter^0,c
  1259                           
  1260                           ;sgl.c: 117: toggleLights = 0;
  1261   00020C  0E00               	movlw	0
  1262   00020E  6E38               	movwf	SGL_BlinkPasiveState@toggleLights^0,c
  1263                           
  1264                           ;sgl.c: 118: g_sglStareSemnal = 0;
  1265   000210  0E00               	movlw	0
  1266   000212  6E2F               	movwf	(_g_sglStareSemnal+1)^0,c
  1267   000214  0E00               	movlw	0
  1268   000216  6E2E               	movwf	_g_sglStareSemnal^0,c
  1269                           
  1270                           ;sgl.c: 119: SGL_setAllHazardLights(0);
  1271   000218  0E00               	movlw	0
  1272   00021A  EC8C  F005         	call	_SGL_setAllHazardLights
  1273                           
  1274                           ;sgl.c: 120: DIAGNOSIS_ActivateError();
  1275   00021E  EC05  F003         	call	_DIAGNOSIS_ActivateError	;wreg free
  1276   000222                     l77:
  1277   000222  FFFF               	dw	65535	; assembler added errata NOP
  1278   000224  0012               	return		;funcret
  1279   000226  FFFF               	dw	65535	; errata NOP
  1280   000228                     __end_of_SGL_BlinkPasiveState:
  1281                           	callstack 0
  1282                           
  1283 ;; *************** function _SGL_BlinkSwitchOffState *****************
  1284 ;; Defined at:
  1285 ;;		line 187 in file "sgl.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1303 ;;Total ram usage:        2 bytes
  1304 ;; Hardware stack levels used: 1
  1305 ;; Hardware stack levels required when called: 5
  1306 ;; This function calls:
  1307 ;;		_DIAGNOSIS_ActivateError
  1308 ;;		_SGL_toggleSideHazardLights
  1309 ;; This function is called by:
  1310 ;;		_SGL_BlinkSwitchOnState
  1311 ;;		_SGL_BlinkersRun
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text10
  1316   000228                     __ptext10:
  1317                           	callstack 0
  1318   000228                     _SGL_BlinkSwitchOffState:
  1319                           	callstack 0
  1320   000228  FFFF               	dw	65535	; assembler added errata NOP
  1321                           
  1322                           ;sgl.c: 189: static T_U16 counter = 0;;sgl.c: 190: static T_U16 side = 0;;sgl.c: 191: st
      +                          atic T_U8 toggleLights = 0;;sgl.c: 192: static T_U8 cycles = 0;;sgl.c: 195: if(blinkerSM
      +                          .firstEntry == 1)
  1323                           
  1324                           ;incstack = 0
  1325   00022A  0405               	decf	(_blinkerSM+4)^0,w,c
  1326   00022C  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1327   00022E  A4D8               	btfss	status,2,c
  1328   000230  D00C               	goto	l2542
  1329                           
  1330                           ;sgl.c: 196: {;sgl.c: 197: blinkerSM.firstEntry = 0;
  1331   000232  0E00               	movlw	0
  1332   000234  6E06               	movwf	(_blinkerSM+5)^0,c
  1333   000236  0E00               	movlw	0
  1334   000238  6E05               	movwf	(_blinkerSM+4)^0,c
  1335                           
  1336                           ;sgl.c: 198: toggleLights = blinkerSM.lastToggle;
  1337   00023A  C00B  F036         	movff	_blinkerSM+10,SGL_BlinkSwitchOffState@toggleLights
  1338                           
  1339                           ;sgl.c: 199: side = blinkerSM.lastSide;
  1340   00023E  C00A  F026         	movff	_blinkerSM+9,SGL_BlinkSwitchOffState@side
  1341   000242  6A27               	clrf	(SGL_BlinkSwitchOffState@side+1)^0,c
  1342                           
  1343                           ;sgl.c: 200: counter = blinkerSM.carryCounter;
  1344   000244  C00C  F028         	movff	_blinkerSM+11,SGL_BlinkSwitchOffState@counter
  1345   000248  6A29               	clrf	(SGL_BlinkSwitchOffState@counter+1)^0,c
  1346   00024A                     l2542:
  1347   00024A  FFFF               	dw	65535	; assembler added errata NOP
  1348                           
  1349                           ;sgl.c: 201: };sgl.c: 204: if(500 == counter && (5 != (cycles+blinkerSM.lastToggle)))
  1350   00024C  0EF4               	movlw	244
  1351   00024E  1828               	xorwf	SGL_BlinkSwitchOffState@counter^0,w,c
  1352   000250  E123               	bnz	l2556
  1353   000252  0429               	decf	(SGL_BlinkSwitchOffState@counter+1)^0,w,c
  1354   000254  A4D8               	btfss	status,2,c
  1355   000256  D020               	goto	l2556
  1356   000258  500B               	movf	(_blinkerSM+10)^0,w,c
  1357   00025A  C034  F064         	movff	SGL_BlinkSwitchOffState@cycles,??_SGL_BlinkSwitchOffState
  1358   00025E  0100               	movlb	0	; () banked
  1359   000260  6B65               	clrf	(??_SGL_BlinkSwitchOffState+1)& (0+255),b
  1360   000262  2764               	addwf	??_SGL_BlinkSwitchOffState& (0+255),f,b
  1361   000264  0E00               	movlw	0
  1362   000266  2365               	addwfc	(??_SGL_BlinkSwitchOffState+1)& (0+255),f,b
  1363   000268  0E05               	movlw	5
  1364   00026A  1964               	xorwf	??_SGL_BlinkSwitchOffState& (0+255),w,b
  1365   00026C  1165               	iorwf	(??_SGL_BlinkSwitchOffState+1)& (0+255),w,b
  1366   00026E  B4D8               	btfsc	status,2,c
  1367   000270  D013               	goto	l2556
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;sgl.c: 205: {;sgl.c: 206: g_sglStareSemnal = toggleLights;
  1371   000272  C036  F02E         	movff	SGL_BlinkSwitchOffState@toggleLights,_g_sglStareSemnal
  1372   000276  6A2F               	clrf	(_g_sglStareSemnal+1)^0,c
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;sgl.c: 207: SGL_toggleSideHazardLights(&toggleLights, side);
  1376   000278  0E36               	movlw	low SGL_BlinkSwitchOffState@toggleLights
  1377   00027A  6E4D               	movwf	SGL_toggleSideHazardLights@toggle^0,c
  1378   00027C  0E00               	movlw	high SGL_BlinkSwitchOffState@toggleLights
  1379   00027E  6E4E               	movwf	(SGL_toggleSideHazardLights@toggle+1)^0,c
  1380   000280  C026  F04F         	movff	SGL_BlinkSwitchOffState@side,SGL_toggleSideHazardLights@side
  1381   000284  EC7D  F002         	call	_SGL_toggleSideHazardLights	;wreg free
  1382                           
  1383                           ;sgl.c: 208: DIAGNOSIS_ActivateError();
  1384   000288  EC05  F003         	call	_DIAGNOSIS_ActivateError	;wreg free
  1385                           
  1386                           ;sgl.c: 209: cycles++;
  1387   00028C  2A34               	incf	SGL_BlinkSwitchOffState@cycles^0,f,c
  1388                           
  1389                           ;sgl.c: 210: counter = 0;
  1390   00028E  0E00               	movlw	0
  1391   000290  6E29               	movwf	(SGL_BlinkSwitchOffState@counter+1)^0,c
  1392   000292  0E00               	movlw	0
  1393   000294  6E28               	movwf	SGL_BlinkSwitchOffState@counter^0,c
  1394                           
  1395                           ;sgl.c: 211: }
  1396   000296  D010               	goto	l2560
  1397   000298                     l2556:
  1398   000298  FFFF               	dw	65535	; assembler added errata NOP
  1399                           
  1400                           ;sgl.c: 212: else;sgl.c: 213: {;sgl.c: 214: if((5 != (cycles+blinkerSM.lastToggle)))
  1401   00029A  500B               	movf	(_blinkerSM+10)^0,w,c
  1402   00029C  C034  F064         	movff	SGL_BlinkSwitchOffState@cycles,??_SGL_BlinkSwitchOffState
  1403   0002A0  0100               	movlb	0	; () banked
  1404   0002A2  6B65               	clrf	(??_SGL_BlinkSwitchOffState+1)& (0+255),b
  1405   0002A4  2764               	addwf	??_SGL_BlinkSwitchOffState& (0+255),f,b
  1406   0002A6  0E00               	movlw	0
  1407   0002A8  2365               	addwfc	(??_SGL_BlinkSwitchOffState+1)& (0+255),f,b
  1408   0002AA  0E05               	movlw	5
  1409   0002AC  1964               	xorwf	??_SGL_BlinkSwitchOffState& (0+255),w,b
  1410   0002AE  1165               	iorwf	(??_SGL_BlinkSwitchOffState+1)& (0+255),w,b
  1411   0002B0  B4D8               	btfsc	status,2,c
  1412   0002B2  D002               	goto	l2560
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;sgl.c: 215: {;sgl.c: 216: counter++;
  1416   0002B4  4A28               	infsnz	SGL_BlinkSwitchOffState@counter^0,f,c
  1417   0002B6  2A29               	incf	(SGL_BlinkSwitchOffState@counter+1)^0,f,c
  1418   0002B8                     l2560:
  1419   0002B8  FFFF               	dw	65535	; assembler added errata NOP
  1420                           
  1421                           ;sgl.c: 217: };sgl.c: 218: };sgl.c: 221: if( 1 == blinkerSM.avarie )
  1422   0002BA  0407               	decf	(_blinkerSM+6)^0,w,c
  1423   0002BC  A4D8               	btfss	status,2,c
  1424   0002BE  D012               	goto	l2572
  1425                           
  1426                           ;sgl.c: 222: {;sgl.c: 223: blinkerSM._currentState = SGL_BlinkPasiveState;
  1427   0002C0  0E48               	movlw	low _SGL_BlinkPasiveState
  1428   0002C2  6E01               	movwf	_blinkerSM^0,c
  1429   0002C4  0E01               	movlw	high _SGL_BlinkPasiveState
  1430   0002C6  FFFF               	dw	65535	; assembler added errata NOP
  1431   0002C8  6E02               	movwf	(_blinkerSM+1)^0,c
  1432                           
  1433                           ;sgl.c: 224: blinkerSM.firstEntry = 1;
  1434   0002CA  0E00               	movlw	0
  1435   0002CC  6E06               	movwf	(_blinkerSM+5)^0,c
  1436   0002CE  0E01               	movlw	1
  1437   0002D0  6E05               	movwf	(_blinkerSM+4)^0,c
  1438                           
  1439                           ;sgl.c: 225: blinkerSM.carryCounter = counter;
  1440   0002D2  C028  F00C         	movff	SGL_BlinkSwitchOffState@counter,_blinkerSM+11
  1441                           
  1442                           ;sgl.c: 226: cycles = 0;
  1443   0002D6  0E00               	movlw	0
  1444   0002D8  6E34               	movwf	SGL_BlinkSwitchOffState@cycles^0,c
  1445                           
  1446                           ;sgl.c: 227: counter = 0;
  1447   0002DA  0E00               	movlw	0
  1448   0002DC  6E29               	movwf	(SGL_BlinkSwitchOffState@counter+1)^0,c
  1449   0002DE  0E00               	movlw	0
  1450   0002E0  6E28               	movwf	SGL_BlinkSwitchOffState@counter^0,c
  1451                           
  1452                           ;sgl.c: 228: } else if( (1 == blinkerSM.leftSwitch) || (1 == blinkerSM.rightSwitch) )
  1453   0002E2  D00C               	goto	l115
  1454   0002E4                     l2572:
  1455   0002E4  FFFF               	dw	65535	; assembler added errata NOP
  1456   0002E6  0408               	decf	(_blinkerSM+7)^0,w,c
  1457   0002E8  B4D8               	btfsc	status,2,c
  1458   0002EA  D003               	goto	u2110
  1459   0002EC  0409               	decf	(_blinkerSM+8)^0,w,c
  1460   0002EE  A4D8               	btfss	status,2,c
  1461   0002F0  D005               	goto	l115
  1462   0002F2                     u2110:
  1463   0002F2  FFFF               	dw	65535	; assembler added errata NOP
  1464                           
  1465                           ;sgl.c: 229: {;sgl.c: 230: blinkerSM._currentState = SGL_BlinkSwitchOnState;
  1466   0002F4  0E50               	movlw	low _SGL_BlinkSwitchOnState
  1467   0002F6  6E01               	movwf	_blinkerSM^0,c
  1468   0002F8  0E00               	movlw	high _SGL_BlinkSwitchOnState
  1469   0002FA  D7E5               	goto	L1
  1470   0002FC                     l115:
  1471   0002FC  FFFF               	dw	65535	; assembler added errata NOP
  1472   0002FE  0012               	return		;funcret
  1473   000300  FFFF               	dw	65535	; errata NOP
  1474   000302                     __end_of_SGL_BlinkSwitchOffState:
  1475                           	callstack 0
  1476                           
  1477 ;; *************** function _SGL_BlinkSwitchOnState *****************
  1478 ;; Defined at:
  1479 ;;		line 125 in file "sgl.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;		None
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;		None
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  1    wreg      void 
  1486 ;; Registers used:
  1487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1497 ;;Total ram usage:        0 bytes
  1498 ;; Hardware stack levels used: 1
  1499 ;; Hardware stack levels required when called: 5
  1500 ;; This function calls:
  1501 ;;		_DIAGNOSIS_ActivateError
  1502 ;;		_SGL_setAllHazardLights
  1503 ;;		_SGL_setSideHazardLights
  1504 ;;		_SGL_toggleSideHazardLights
  1505 ;; This function is called by:
  1506 ;;		_SGL_BlinkPasiveState
  1507 ;;		_SGL_BlinkSwitchOffState
  1508 ;;		_SGL_BlinkersRun
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text11
  1513   000050                     __ptext11:
  1514                           	callstack 0
  1515   000050                     _SGL_BlinkSwitchOnState:
  1516                           	callstack 0
  1517   000050  FFFF               	dw	65535	; assembler added errata NOP
  1518                           
  1519                           ;sgl.c: 127: static T_U8 side = 0;;sgl.c: 128: static T_U16 counter = 0;;sgl.c: 129: sta
      +                          tic T_U8 firstEntry = 1;;sgl.c: 130: static T_U8 toggleLights = 0;;sgl.c: 133: if(blinke
      +                          rSM.firstEntry == 1)
  1520                           
  1521                           ;incstack = 0
  1522   000052  0405               	decf	(_blinkerSM+4)^0,w,c
  1523   000054  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1524   000056  A4D8               	btfss	status,2,c
  1525   000058  D00B               	goto	l2472
  1526                           
  1527                           ;sgl.c: 134: {;sgl.c: 136: side = blinkerSM.rightSwitch;
  1528   00005A  C009  F035         	movff	_blinkerSM+8,SGL_BlinkSwitchOnState@side
  1529                           
  1530                           ;sgl.c: 137: blinkerSM.lastSide = side;
  1531   00005E  C035  F00A         	movff	SGL_BlinkSwitchOnState@side,_blinkerSM+9
  1532                           
  1533                           ;sgl.c: 138: blinkerSM.firstEntry = 0;
  1534   000062  0E00               	movlw	0
  1535   000064  6E06               	movwf	(_blinkerSM+5)^0,c
  1536   000066  0E00               	movlw	0
  1537   000068  6E05               	movwf	(_blinkerSM+4)^0,c
  1538                           
  1539                           ;sgl.c: 139: counter = blinkerSM.carryCounter;
  1540   00006A  C00C  F02A         	movff	_blinkerSM+11,SGL_BlinkSwitchOnState@counter
  1541   00006E  6A2B               	clrf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1542   000070                     l2472:
  1543   000070  FFFF               	dw	65535	; assembler added errata NOP
  1544                           
  1545                           ;sgl.c: 140: };sgl.c: 143: if(1 == firstEntry)
  1546   000072  0456               	decf	SGL_BlinkSwitchOnState@firstEntry^0,w,c
  1547   000074  A4D8               	btfss	status,2,c
  1548   000076  D00D               	goto	l2482
  1549                           
  1550                           ;sgl.c: 144: {;sgl.c: 145: g_sglStareSemnal = 1;
  1551   000078  0E00               	movlw	0
  1552   00007A  6E2F               	movwf	(_g_sglStareSemnal+1)^0,c
  1553   00007C  0E01               	movlw	1
  1554   00007E  6E2E               	movwf	_g_sglStareSemnal^0,c
  1555                           
  1556                           ;sgl.c: 146: SGL_setSideHazardLights(1, side);
  1557   000080  C035  F04D         	movff	SGL_BlinkSwitchOnState@side,SGL_setSideHazardLights@side
  1558   000084  0E01               	movlw	1
  1559   000086  EC62  F005         	call	_SGL_setSideHazardLights
  1560                           
  1561                           ;sgl.c: 147: DIAGNOSIS_ActivateError();
  1562   00008A  EC05  F003         	call	_DIAGNOSIS_ActivateError	;wreg free
  1563                           
  1564                           ;sgl.c: 149: firstEntry = 0;
  1565   00008E  0E00               	movlw	0
  1566   000090  6E56               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1567   000092                     l2482:
  1568   000092  FFFF               	dw	65535	; assembler added errata NOP
  1569                           
  1570                           ;sgl.c: 150: };sgl.c: 151: if(500 == counter)
  1571   000094  0EF4               	movlw	244
  1572   000096  182A               	xorwf	SGL_BlinkSwitchOnState@counter^0,w,c
  1573   000098  E115               	bnz	l2492
  1574   00009A  042B               	decf	(SGL_BlinkSwitchOnState@counter+1)^0,w,c
  1575   00009C  A4D8               	btfss	status,2,c
  1576   00009E  D012               	goto	l2492
  1577                           
  1578                           ;sgl.c: 152: {;sgl.c: 153: g_sglStareSemnal = toggleLights;
  1579   0000A0  C037  F02E         	movff	SGL_BlinkSwitchOnState@toggleLights,_g_sglStareSemnal
  1580   0000A4  6A2F               	clrf	(_g_sglStareSemnal+1)^0,c
  1581                           
  1582                           ;sgl.c: 154: SGL_toggleSideHazardLights(&toggleLights, side);
  1583   0000A6  0E37               	movlw	low SGL_BlinkSwitchOnState@toggleLights
  1584   0000A8  6E4D               	movwf	SGL_toggleSideHazardLights@toggle^0,c
  1585   0000AA  0E00               	movlw	high SGL_BlinkSwitchOnState@toggleLights
  1586   0000AC  6E4E               	movwf	(SGL_toggleSideHazardLights@toggle+1)^0,c
  1587   0000AE  C035  F04F         	movff	SGL_BlinkSwitchOnState@side,SGL_toggleSideHazardLights@side
  1588   0000B2  EC7D  F002         	call	_SGL_toggleSideHazardLights	;wreg free
  1589                           
  1590                           ;sgl.c: 155: DIAGNOSIS_ActivateError();
  1591   0000B6  EC05  F003         	call	_DIAGNOSIS_ActivateError	;wreg free
  1592                           
  1593                           ;sgl.c: 156: counter = 0;
  1594   0000BA  0E00               	movlw	0
  1595   0000BC  6E2B               	movwf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1596   0000BE  0E00               	movlw	0
  1597   0000C0  6E2A               	movwf	SGL_BlinkSwitchOnState@counter^0,c
  1598                           
  1599                           ;sgl.c: 157: }
  1600   0000C2  D003               	goto	l2494
  1601   0000C4                     l2492:
  1602   0000C4  FFFF               	dw	65535	; assembler added errata NOP
  1603                           
  1604                           ;sgl.c: 158: else;sgl.c: 159: {;sgl.c: 160: counter++;
  1605   0000C6  4A2A               	infsnz	SGL_BlinkSwitchOnState@counter^0,f,c
  1606   0000C8  2A2B               	incf	(SGL_BlinkSwitchOnState@counter+1)^0,f,c
  1607   0000CA                     l2494:
  1608   0000CA  FFFF               	dw	65535	; assembler added errata NOP
  1609                           
  1610                           ;sgl.c: 161: };sgl.c: 164: if( 1 == blinkerSM.avarie )
  1611   0000CC  0407               	decf	(_blinkerSM+6)^0,w,c
  1612   0000CE  A4D8               	btfss	status,2,c
  1613   0000D0  D01A               	goto	l2512
  1614                           
  1615                           ;sgl.c: 165: {;sgl.c: 166: blinkerSM._currentState = SGL_BlinkPasiveState;
  1616   0000D2  0E48               	movlw	low _SGL_BlinkPasiveState
  1617   0000D4  6E01               	movwf	_blinkerSM^0,c
  1618   0000D6  0E01               	movlw	high _SGL_BlinkPasiveState
  1619   0000D8  6E02               	movwf	(_blinkerSM+1)^0,c
  1620                           
  1621                           ;sgl.c: 167: blinkerSM.firstEntry = 1;
  1622   0000DA  0E00               	movlw	0
  1623   0000DC  6E06               	movwf	(_blinkerSM+5)^0,c
  1624   0000DE  0E01               	movlw	1
  1625   0000E0  6E05               	movwf	(_blinkerSM+4)^0,c
  1626                           
  1627                           ;sgl.c: 168: counter = 0;
  1628   0000E2  0E00               	movlw	0
  1629   0000E4  6E2B               	movwf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1630   0000E6  0E00               	movlw	0
  1631   0000E8  6E2A               	movwf	SGL_BlinkSwitchOnState@counter^0,c
  1632                           
  1633                           ;sgl.c: 169: toggleLights = 0;
  1634   0000EA  0E00               	movlw	0
  1635   0000EC  6E37               	movwf	SGL_BlinkSwitchOnState@toggleLights^0,c
  1636                           
  1637                           ;sgl.c: 170: firstEntry = 1;
  1638   0000EE  0E01               	movlw	1
  1639   0000F0  6E56               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1640                           
  1641                           ;sgl.c: 171: g_sglStareSemnal = 0;
  1642   0000F2  0E00               	movlw	0
  1643   0000F4  6E2F               	movwf	(_g_sglStareSemnal+1)^0,c
  1644   0000F6  0E00               	movlw	0
  1645   0000F8  6E2E               	movwf	_g_sglStareSemnal^0,c
  1646                           
  1647                           ;sgl.c: 172: SGL_setAllHazardLights(0);
  1648   0000FA  0E00               	movlw	0
  1649   0000FC  EC8C  F005         	call	_SGL_setAllHazardLights
  1650                           
  1651                           ;sgl.c: 173: DIAGNOSIS_ActivateError();
  1652   000100  EC05  F003         	call	_DIAGNOSIS_ActivateError	;wreg free
  1653                           
  1654                           ;sgl.c: 174: }else if( (0 == blinkerSM.avarie) && (0 == blinkerSM.leftSwitch) && (0 == b
      +                          linkerSM.rightSwitch) )
  1655   000104  D01E               	goto	l95
  1656   000106                     l2512:
  1657   000106  FFFF               	dw	65535	; assembler added errata NOP
  1658   000108  5007               	movf	(_blinkerSM+6)^0,w,c
  1659   00010A  A4D8               	btfss	status,2,c
  1660   00010C  D01A               	goto	l95
  1661   00010E  5008               	movf	(_blinkerSM+7)^0,w,c
  1662   000110  A4D8               	btfss	status,2,c
  1663   000112  D017               	goto	l95
  1664   000114  5009               	movf	(_blinkerSM+8)^0,w,c
  1665   000116  A4D8               	btfss	status,2,c
  1666   000118  D014               	goto	l95
  1667                           
  1668                           ;sgl.c: 175: {;sgl.c: 176: blinkerSM._currentState = SGL_BlinkSwitchOffState;
  1669   00011A  0E28               	movlw	low _SGL_BlinkSwitchOffState
  1670   00011C  6E01               	movwf	_blinkerSM^0,c
  1671   00011E  0E02               	movlw	high _SGL_BlinkSwitchOffState
  1672   000120  6E02               	movwf	(_blinkerSM+1)^0,c
  1673                           
  1674                           ;sgl.c: 177: blinkerSM.firstEntry = 1;
  1675   000122  0E00               	movlw	0
  1676   000124  6E06               	movwf	(_blinkerSM+5)^0,c
  1677   000126  0E01               	movlw	1
  1678   000128  6E05               	movwf	(_blinkerSM+4)^0,c
  1679                           
  1680                           ;sgl.c: 178: blinkerSM.lastToggle = toggleLights;
  1681   00012A  C037  F00B         	movff	SGL_BlinkSwitchOnState@toggleLights,_blinkerSM+10
  1682                           
  1683                           ;sgl.c: 179: blinkerSM.carryCounter = counter;
  1684   00012E  C02A  F00C         	movff	SGL_BlinkSwitchOnState@counter,_blinkerSM+11
  1685                           
  1686                           ;sgl.c: 180: counter = 0;
  1687   000132  0E00               	movlw	0
  1688   000134  6E2B               	movwf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1689   000136  0E00               	movlw	0
  1690   000138  6E2A               	movwf	SGL_BlinkSwitchOnState@counter^0,c
  1691                           
  1692                           ;sgl.c: 181: toggleLights = 0;
  1693   00013A  0E00               	movlw	0
  1694   00013C  6E37               	movwf	SGL_BlinkSwitchOnState@toggleLights^0,c
  1695                           
  1696                           ;sgl.c: 182: firstEntry = 1;
  1697   00013E  0E01               	movlw	1
  1698   000140  6E56               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1699   000142                     l95:
  1700   000142  FFFF               	dw	65535	; assembler added errata NOP
  1701   000144  0012               	return		;funcret
  1702   000146  FFFF               	dw	65535	; errata NOP
  1703   000148                     __end_of_SGL_BlinkSwitchOnState:
  1704                           	callstack 0
  1705                           
  1706 ;; *************** function _SGL_setSideHazardLights *****************
  1707 ;; Defined at:
  1708 ;;		line 49 in file "sgl.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;  value           1    wreg     unsigned char 
  1711 ;;  side            1   20[COMRAM] unsigned char 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  value           1   21[COMRAM] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		wreg, status,2, status,0, cstack
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1723 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1726 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1727 ;;Total ram usage:        2 bytes
  1728 ;; Hardware stack levels used: 1
  1729 ;; Hardware stack levels required when called: 4
  1730 ;; This function calls:
  1731 ;;		_IOC_vSetOutputPort
  1732 ;; This function is called by:
  1733 ;;		_SGL_BlinkSwitchOnState
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text12
  1738   000AC4                     __ptext12:
  1739                           	callstack 0
  1740   000AC4                     _SGL_setSideHazardLights:
  1741                           	callstack 0
  1742   000AC4  FFFF               	dw	65535	; assembler added errata NOP
  1743                           
  1744                           ;incstack = 0
  1745                           ;SGL_setSideHazardLights@value stored from wreg
  1746   000AC6  6E4E               	movwf	SGL_setSideHazardLights@value^0,c
  1747                           
  1748                           ;sgl.c: 51: if(0 == side)
  1749   000AC8  504D               	movf	SGL_setSideHazardLights@side^0,w,c
  1750   000ACA  A4D8               	btfss	status,2,c
  1751   000ACC  D011               	goto	l1958
  1752                           
  1753                           ;sgl.c: 52: {;sgl.c: 53: IOC_vSetOutputPort(IOC_SFS, value);
  1754   000ACE  0E01               	movlw	1
  1755   000AD0  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1756   000AD2  0E03               	movlw	3
  1757   000AD4  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1758   000AD6  C04E  F04A         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1759   000ADA  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1760                           
  1761                           ;sgl.c: 54: IOC_vSetOutputPort(IOC_SSS, value);
  1762   000ADE  0E01               	movlw	1
  1763   000AE0  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1764   000AE2  0E07               	movlw	7
  1765   000AE4  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1766   000AE6  C04E  F04A         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1767   000AEA  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1768                           
  1769                           ;sgl.c: 55: }
  1770   000AEE  D011               	goto	l59
  1771   000AF0                     l1958:
  1772   000AF0  FFFF               	dw	65535	; assembler added errata NOP
  1773                           
  1774                           ;sgl.c: 56: else;sgl.c: 57: {;sgl.c: 58: IOC_vSetOutputPort(IOC_SFD, value);
  1775   000AF2  0E01               	movlw	1
  1776   000AF4  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1777   000AF6  0E00               	movlw	0
  1778   000AF8  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1779   000AFA  C04E  F04A         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1780   000AFE  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1781                           
  1782                           ;sgl.c: 59: IOC_vSetOutputPort(IOC_SSD, value);
  1783   000B02  0E01               	movlw	1
  1784   000B04  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1785   000B06  0E04               	movlw	4
  1786   000B08  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1787   000B0A  C04E  F04A         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1788   000B0E  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1789   000B12                     l59:
  1790   000B12  FFFF               	dw	65535	; assembler added errata NOP
  1791   000B14  0012               	return		;funcret
  1792   000B16  FFFF               	dw	65535	; errata NOP
  1793   000B18                     __end_of_SGL_setSideHazardLights:
  1794                           	callstack 0
  1795                           
  1796 ;; *************** function _SGL_toggleSideHazardLights *****************
  1797 ;; Defined at:
  1798 ;;		line 26 in file "sgl.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  toggle          2   20[COMRAM] PTR unsigned char 
  1801 ;;		 -> SGL_BlinkSwitchOffState@toggleLights(1), SGL_BlinkSwitchOnState@toggleLights(1), 
  1802 ;;  side            1   22[COMRAM] unsigned char 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1814 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1817 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1818 ;;Total ram usage:        3 bytes
  1819 ;; Hardware stack levels used: 1
  1820 ;; Hardware stack levels required when called: 4
  1821 ;; This function calls:
  1822 ;;		_IOC_vSetOutputPort
  1823 ;; This function is called by:
  1824 ;;		_SGL_BlinkSwitchOnState
  1825 ;;		_SGL_BlinkSwitchOffState
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text13
  1830   0004FA                     __ptext13:
  1831                           	callstack 0
  1832   0004FA                     _SGL_toggleSideHazardLights:
  1833                           	callstack 0
  1834   0004FA  FFFF               	dw	65535	; assembler added errata NOP
  1835                           
  1836                           ;sgl.c: 28: if(0 == side)
  1837                           
  1838                           ;incstack = 0
  1839   0004FC  504F               	movf	SGL_toggleSideHazardLights@side^0,w,c
  1840   0004FE  A4D8               	btfss	status,2,c
  1841   000500  D019               	goto	l1948
  1842                           
  1843                           ;sgl.c: 29: {;sgl.c: 30: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1844   000502  0E01               	movlw	1
  1845   000504  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1846   000506  0E03               	movlw	3
  1847   000508  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1848   00050A  C04D  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1849   00050E  C04E  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1850   000512  50DF               	movf	indf2,w,c
  1851   000514  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1852   000516  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1853                           
  1854                           ;sgl.c: 31: IOC_vSetOutputPort(IOC_SSS, *toggle);
  1855   00051A  0E01               	movlw	1
  1856   00051C  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1857   00051E  0E07               	movlw	7
  1858   000520  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1859   000522  C04D  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1860   000526  C04E  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1861   00052A  50DF               	movf	indf2,w,c
  1862   00052C  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1863   00052E  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1864                           
  1865                           ;sgl.c: 32: }
  1866   000532  D019               	goto	l1950
  1867   000534                     l1948:
  1868   000534  FFFF               	dw	65535	; assembler added errata NOP
  1869                           
  1870                           ;sgl.c: 33: else;sgl.c: 34: {;sgl.c: 35: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1871   000536  0E01               	movlw	1
  1872   000538  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1873   00053A  0E00               	movlw	0
  1874   00053C  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1875   00053E  C04D  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1876   000542  C04E  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1877   000546  50DF               	movf	indf2,w,c
  1878   000548  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1879   00054A  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1880                           
  1881                           ;sgl.c: 36: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1882   00054E  0E01               	movlw	1
  1883   000550  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1884   000552  0E04               	movlw	4
  1885   000554  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1886   000556  C04D  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1887   00055A  C04E  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1888   00055E  50DF               	movf	indf2,w,c
  1889   000560  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1890   000562  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1891   000566                     l1950:
  1892   000566  FFFF               	dw	65535	; assembler added errata NOP
  1893                           
  1894                           ;sgl.c: 37: };sgl.c: 38: *toggle = *toggle ^ 1;
  1895   000568  C04D  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1896   00056C  C04E  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1897   000570  50DF               	movf	indf2,w,c
  1898   000572  0A01               	xorlw	1
  1899   000574  C04D  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1900   000578  C04E  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1901   00057C  6EDF               	movwf	indf2,c
  1902   00057E  0012               	return		;funcret
  1903   000580  FFFF               	dw	65535	; errata NOP
  1904   000582                     __end_of_SGL_toggleSideHazardLights:
  1905                           	callstack 0
  1906                           
  1907 ;; *************** function _SGL_toggleAllHazardLights *****************
  1908 ;; Defined at:
  1909 ;;		line 17 in file "sgl.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  toggle          2   20[COMRAM] PTR unsigned char 
  1912 ;;		 -> SGL_BlinkPasiveState@toggleLights(1), 
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      void 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1924 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1927 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1928 ;;Total ram usage:        2 bytes
  1929 ;; Hardware stack levels used: 1
  1930 ;; Hardware stack levels required when called: 4
  1931 ;; This function calls:
  1932 ;;		_IOC_vSetOutputPort
  1933 ;; This function is called by:
  1934 ;;		_SGL_BlinkPasiveState
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text14
  1939   00080C                     __ptext14:
  1940                           	callstack 0
  1941   00080C                     _SGL_toggleAllHazardLights:
  1942                           	callstack 0
  1943   00080C  FFFF               	dw	65535	; assembler added errata NOP
  1944                           
  1945                           ;sgl.c: 19: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1946                           
  1947                           ;incstack = 0
  1948   00080E  0E01               	movlw	1
  1949   000810  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1950   000812  0E00               	movlw	0
  1951   000814  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1952   000816  C04D  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1953   00081A  C04E  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1954   00081E  50DF               	movf	indf2,w,c
  1955   000820  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1956   000822  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1957                           
  1958                           ;sgl.c: 20: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1959   000826  0E01               	movlw	1
  1960   000828  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1961   00082A  0E03               	movlw	3
  1962   00082C  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1963   00082E  C04D  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1964   000832  C04E  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1965   000836  50DF               	movf	indf2,w,c
  1966   000838  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1967   00083A  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1968                           
  1969                           ;sgl.c: 21: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1970   00083E  0E01               	movlw	1
  1971   000840  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1972   000842  0E04               	movlw	4
  1973   000844  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1974   000846  C04D  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1975   00084A  C04E  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1976   00084E  50DF               	movf	indf2,w,c
  1977   000850  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1978   000852  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1979                           
  1980                           ;sgl.c: 22: IOC_vSetOutputPort(IOC_SSS, *toggle);
  1981   000856  0E01               	movlw	1
  1982   000858  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1983   00085A  0E07               	movlw	7
  1984   00085C  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1985   00085E  C04D  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1986   000862  C04E  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1987   000866  50DF               	movf	indf2,w,c
  1988   000868  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1989   00086A  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  1990                           
  1991                           ;sgl.c: 23: *toggle = *toggle ^ 1;
  1992   00086E  C04D  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1993   000872  C04E  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1994   000876  50DF               	movf	indf2,w,c
  1995   000878  0A01               	xorlw	1
  1996   00087A  C04D  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1997   00087E  C04E  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1998   000882  6EDF               	movwf	indf2,c
  1999   000884  0012               	return		;funcret
  2000   000886  FFFF               	dw	65535	; errata NOP
  2001   000888                     __end_of_SGL_toggleAllHazardLights:
  2002                           	callstack 0
  2003                           
  2004 ;; *************** function _SGL_setAllHazardLights *****************
  2005 ;; Defined at:
  2006 ;;		line 41 in file "sgl.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;  value           1    wreg     unsigned char 
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  value           1   20[COMRAM] unsigned char 
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  1    wreg      void 
  2013 ;; Registers used:
  2014 ;;		wreg, status,2, status,0, cstack
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2024 ;;Total ram usage:        1 bytes
  2025 ;; Hardware stack levels used: 1
  2026 ;; Hardware stack levels required when called: 4
  2027 ;; This function calls:
  2028 ;;		_IOC_vSetOutputPort
  2029 ;; This function is called by:
  2030 ;;		_SGL_BlinkPasiveState
  2031 ;;		_SGL_BlinkSwitchOnState
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text15
  2036   000B18                     __ptext15:
  2037                           	callstack 0
  2038   000B18                     _SGL_setAllHazardLights:
  2039                           	callstack 0
  2040   000B18  FFFF               	dw	65535	; assembler added errata NOP
  2041                           
  2042                           ;incstack = 0
  2043                           ;SGL_setAllHazardLights@value stored from wreg
  2044   000B1A  6E4D               	movwf	SGL_setAllHazardLights@value^0,c
  2045                           
  2046                           ;sgl.c: 43: IOC_vSetOutputPort(IOC_SFD, value);
  2047   000B1C  0E01               	movlw	1
  2048   000B1E  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2049   000B20  0E00               	movlw	0
  2050   000B22  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2051   000B24  C04D  F04A         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  2052   000B28  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2053                           
  2054                           ;sgl.c: 44: IOC_vSetOutputPort(IOC_SFS, value);
  2055   000B2C  0E01               	movlw	1
  2056   000B2E  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2057   000B30  0E03               	movlw	3
  2058   000B32  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2059   000B34  C04D  F04A         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  2060   000B38  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2061                           
  2062                           ;sgl.c: 45: IOC_vSetOutputPort(IOC_SSD, value);
  2063   000B3C  0E01               	movlw	1
  2064   000B3E  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2065   000B40  0E04               	movlw	4
  2066   000B42  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2067   000B44  C04D  F04A         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  2068   000B48  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2069                           
  2070                           ;sgl.c: 46: IOC_vSetOutputPort(IOC_SSS, value);
  2071   000B4C  0E01               	movlw	1
  2072   000B4E  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2073   000B50  0E07               	movlw	7
  2074   000B52  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2075   000B54  C04D  F04A         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  2076   000B58  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2077   000B5C  0012               	return		;funcret
  2078   000B5E  FFFF               	dw	65535	; errata NOP
  2079   000B60                     __end_of_SGL_setAllHazardLights:
  2080                           	callstack 0
  2081                           
  2082 ;; *************** function _SGL_BlinkEventPoll *****************
  2083 ;; Defined at:
  2084 ;;		line 238 in file "sgl.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;		None
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2102 ;;Total ram usage:        0 bytes
  2103 ;; Hardware stack levels used: 1
  2104 ;; Hardware stack levels required when called: 4
  2105 ;; This function calls:
  2106 ;;		_IOC_T16GetInputPort
  2107 ;; This function is called by:
  2108 ;;		_SGL_BlinkersInit
  2109 ;;		_SGL_BlinkersRun
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text16
  2114   000CD0                     __ptext16:
  2115                           	callstack 0
  2116   000CD0                     _SGL_BlinkEventPoll:
  2117                           	callstack 0
  2118   000CD0  FFFF               	dw	65535	; assembler added errata NOP
  2119                           
  2120                           ;sgl.c: 240: blinkerSM.avarie = IOC_T16GetInputPort(IOC_AVARII);
  2121                           
  2122                           ;incstack = 0
  2123   000CD2  0E00               	movlw	0
  2124   000CD4  6E4B               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2125   000CD6  0E02               	movlw	2
  2126   000CD8  6E4A               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2127   000CDA  EC37  F005         	call	_IOC_T16GetInputPort	;wreg free
  2128   000CDE  504A               	movf	?_IOC_T16GetInputPort^0,w,c
  2129   000CE0  6E07               	movwf	(_blinkerSM+6)^0,c
  2130                           
  2131                           ;sgl.c: 241: blinkerSM.leftSwitch = IOC_T16GetInputPort(IOC_SEM_S);
  2132   000CE2  0E00               	movlw	0
  2133   000CE4  6E4B               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2134   000CE6  0E04               	movlw	4
  2135   000CE8  6E4A               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2136   000CEA  EC37  F005         	call	_IOC_T16GetInputPort	;wreg free
  2137   000CEE  504A               	movf	?_IOC_T16GetInputPort^0,w,c
  2138   000CF0  6E08               	movwf	(_blinkerSM+7)^0,c
  2139                           
  2140                           ;sgl.c: 242: blinkerSM.rightSwitch = IOC_T16GetInputPort(IOC_SEM_D);
  2141   000CF2  0E00               	movlw	0
  2142   000CF4  6E4B               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2143   000CF6  0E03               	movlw	3
  2144   000CF8  6E4A               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2145   000CFA  EC37  F005         	call	_IOC_T16GetInputPort	;wreg free
  2146   000CFE  504A               	movf	?_IOC_T16GetInputPort^0,w,c
  2147   000D00  6E09               	movwf	(_blinkerSM+8)^0,c
  2148   000D02  0012               	return		;funcret
  2149   000D04  FFFF               	dw	65535	; errata NOP
  2150   000D06                     __end_of_SGL_BlinkEventPoll:
  2151                           	callstack 0
  2152                           
  2153 ;; *************** function _LIGHTS_BrakeRun *****************
  2154 ;; Defined at:
  2155 ;;		line 12 in file "lights.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;		None
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;		None
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      void 
  2162 ;; Registers used:
  2163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2173 ;;Total ram usage:        0 bytes
  2174 ;; Hardware stack levels used: 1
  2175 ;; Hardware stack levels required when called: 5
  2176 ;; This function calls:
  2177 ;;		_DIAGNOSIS_ActivateError
  2178 ;;		_IOC_T16GetInputPort
  2179 ;;		_IOC_vSetOutputPort
  2180 ;; This function is called by:
  2181 ;;		_TASK_vTask1ms
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185                           	psect	text17
  2186   000BA4                     __ptext17:
  2187                           	callstack 0
  2188   000BA4                     _LIGHTS_BrakeRun:
  2189                           	callstack 0
  2190   000BA4  FFFF               	dw	65535	; assembler added errata NOP
  2191                           
  2192                           ;lights.c: 14: static T_U8 counter = 0;;lights.c: 16: if(4 == counter)
  2193                           
  2194                           ;incstack = 0
  2195   000BA6  0E04               	movlw	4
  2196   000BA8  1833               	xorwf	LIGHTS_BrakeRun@counter^0,w,c
  2197   000BAA  A4D8               	btfss	status,2,c
  2198   000BAC  D016               	goto	l2270
  2199                           
  2200                           ;lights.c: 17: {;lights.c: 18: g_lightStateFrana = IOC_T16GetInputPort(IOC_FRANA);
  2201   000BAE  0E00               	movlw	0
  2202   000BB0  6E4B               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2203   000BB2  0E00               	movlw	0
  2204   000BB4  6E4A               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2205   000BB6  EC37  F005         	call	_IOC_T16GetInputPort	;wreg free
  2206   000BBA  C04A  F024         	movff	?_IOC_T16GetInputPort,_g_lightStateFrana
  2207   000BBE  C04B  F025         	movff	?_IOC_T16GetInputPort+1,_g_lightStateFrana+1
  2208                           
  2209                           ;lights.c: 20: IOC_vSetOutputPort(IOC_LSF, g_lightStateFrana);
  2210   000BC2  0E01               	movlw	1
  2211   000BC4  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2212   000BC6  0E05               	movlw	5
  2213   000BC8  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2214   000BCA  C024  F04A         	movff	_g_lightStateFrana,IOC_vSetOutputPort@u8Value
  2215   000BCE  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2216                           
  2217                           ;lights.c: 21: DIAGNOSIS_ActivateError();
  2218   000BD2  EC05  F003         	call	_DIAGNOSIS_ActivateError	;wreg free
  2219                           
  2220                           ;lights.c: 23: counter = 0;
  2221   000BD6  0E00               	movlw	0
  2222   000BD8  6E33               	movwf	LIGHTS_BrakeRun@counter^0,c
  2223   000BDA                     l2270:
  2224   000BDA  FFFF               	dw	65535	; assembler added errata NOP
  2225                           
  2226                           ;lights.c: 24: };lights.c: 26: ++counter;
  2227   000BDC  2A33               	incf	LIGHTS_BrakeRun@counter^0,f,c
  2228   000BDE  0012               	return		;funcret
  2229   000BE0  FFFF               	dw	65535	; errata NOP
  2230   000BE2                     __end_of_LIGHTS_BrakeRun:
  2231                           	callstack 0
  2232                           
  2233 ;; *************** function _TASK_vTask10ms *****************
  2234 ;; Defined at:
  2235 ;;		line 22 in file "tasks.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;		None
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2253 ;;Total ram usage:        0 bytes
  2254 ;; Hardware stack levels used: 1
  2255 ;; Hardware stack levels required when called: 7
  2256 ;; This function calls:
  2257 ;;		_LIGHTS_HeadLampRun
  2258 ;; This function is called by:
  2259 ;;		_SCHED_vStartScheduler
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text18
  2264   000E56                     __ptext18:
  2265                           	callstack 0
  2266   000E56                     _TASK_vTask10ms:
  2267                           	callstack 0
  2268   000E56  FFFF               	dw	65535	; assembler added errata NOP
  2269                           
  2270                           ;tasks.c: 24: LIGHTS_HeadLampRun();
  2271                           
  2272                           ;incstack = 0
  2273   000E58  EC0C  F005         	call	_LIGHTS_HeadLampRun	;wreg free
  2274   000E5C  0012               	return		;funcret
  2275   000E5E  FFFF               	dw	65535	; errata NOP
  2276   000E60                     __end_of_TASK_vTask10ms:
  2277                           	callstack 0
  2278                           
  2279 ;; *************** function _LIGHTS_HeadLampRun *****************
  2280 ;; Defined at:
  2281 ;;		line 129 in file "lights.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;		None
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;		None
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  1    wreg      void 
  2288 ;; Registers used:
  2289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2299 ;;Total ram usage:        0 bytes
  2300 ;; Hardware stack levels used: 1
  2301 ;; Hardware stack levels required when called: 6
  2302 ;; This function calls:
  2303 ;;		_SGL_HeadLightActiveState
  2304 ;;		_SGL_HeadLightEventPoll
  2305 ;;		_SGL_HeadLightPasiveState
  2306 ;; This function is called by:
  2307 ;;		_TASK_vTask10ms
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           	psect	text19
  2312   000A18                     __ptext19:
  2313                           	callstack 0
  2314   000A18                     _LIGHTS_HeadLampRun:
  2315                           	callstack 0
  2316   000A18  FFFF               	dw	65535	; assembler added errata NOP
  2317                           
  2318                           ;lights.c: 131: if(0 != headLightSM._currentState)
  2319                           
  2320                           ;incstack = 0
  2321   000A1A  500D               	movf	_headLightSM^0,w,c
  2322   000A1C  100E               	iorwf	(_headLightSM+1)^0,w,c
  2323   000A1E  B4D8               	btfsc	status,2,c
  2324   000A20  D00E               	goto	u1699
  2325                           
  2326                           ;lights.c: 132: {;lights.c: 133: (*headLightSM._currentState)();
  2327   000A22  D801               	call	u1698
  2328   000A24  D00C               	goto	u1699
  2329   000A26                     u1698:
  2330   000A26  FFFF               	dw	65535	; assembler added errata NOP
  2331   000A28  0005               	push	
  2332   000A2A  6EFA               	movwf	pclath,c
  2333   000A2C  500D               	movf	_headLightSM^0,w,c
  2334   000A2E  6EFD               	movwf	tosl,c
  2335   000A30  500E               	movf	(_headLightSM+1)^0,w,c
  2336   000A32  6EFE               	movwf	tosh,c
  2337   000A34  50F8               	movf	tblptru,w,c
  2338   000A36  6EFF               	movwf	tosu,c
  2339   000A38  50FA               	movf	pclath,w,c
  2340   000A3A  0012               	return		;indir
  2341   000A3C  FFFF               	dw	65535	; errata NOP
  2342   000A3E                     u1699:
  2343   000A3E  FFFF               	dw	65535	; assembler added errata NOP
  2344                           
  2345                           ;lights.c: 134: };lights.c: 135: if(0 != headLightSM._pollEvents)
  2346   000A40  500F               	movf	(_headLightSM+2)^0,w,c
  2347   000A42  1010               	iorwf	(_headLightSM+3)^0,w,c
  2348   000A44  B4D8               	btfsc	status,2,c
  2349   000A46  D010               	goto	u1719
  2350                           
  2351                           ;lights.c: 136: {;lights.c: 137: (*headLightSM._pollEvents)();
  2352   000A48  EE20  F00F         	lfsr	2,_headLightSM+2
  2353   000A4C  D801               	call	u1718
  2354   000A4E  D00C               	goto	u1719
  2355   000A50                     u1718:
  2356   000A50  FFFF               	dw	65535	; assembler added errata NOP
  2357   000A52  0005               	push	
  2358   000A54  6EFA               	movwf	pclath,c
  2359   000A56  50DE               	movf	postinc2,w,c
  2360   000A58  6EFD               	movwf	tosl,c
  2361   000A5A  50DE               	movf	postinc2,w,c
  2362   000A5C  6EFE               	movwf	tosh,c
  2363   000A5E  50F8               	movf	tblptru,w,c
  2364   000A60  6EFF               	movwf	tosu,c
  2365   000A62  50FA               	movf	pclath,w,c
  2366   000A64  0012               	return		;indir
  2367   000A66  FFFF               	dw	65535	; errata NOP
  2368   000A68                     u1719:
  2369   000A68  FFFF               	dw	65535	; assembler added errata NOP
  2370   000A6A  0012               	return		;funcret
  2371   000A6C  FFFF               	dw	65535	; errata NOP
  2372   000A6E                     __end_of_LIGHTS_HeadLampRun:
  2373                           	callstack 0
  2374                           
  2375 ;; *************** function _SGL_HeadLightActiveState *****************
  2376 ;; Defined at:
  2377 ;;		line 86 in file "lights.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;		None
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  1    wreg      void 
  2384 ;; Registers used:
  2385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2395 ;;Total ram usage:        0 bytes
  2396 ;; Hardware stack levels used: 1
  2397 ;; Hardware stack levels required when called: 5
  2398 ;; This function calls:
  2399 ;;		_DIAGNOSIS_ActivateError
  2400 ;;		_IOC_vSetOutputPort
  2401 ;; This function is called by:
  2402 ;;		_SGL_HeadLightPasiveState
  2403 ;;		_LIGHTS_HeadLampRun
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text20
  2408   0003C6                     __ptext20:
  2409                           	callstack 0
  2410   0003C6                     _SGL_HeadLightActiveState:
  2411                           	callstack 0
  2412   0003C6  FFFF               	dw	65535	; assembler added errata NOP
  2413                           
  2414                           ;lights.c: 89: if(headLightSM.firstEntry == 1)
  2415                           
  2416                           ;incstack = 0
  2417   0003C8  0411               	decf	(_headLightSM+4)^0,w,c
  2418   0003CA  1012               	iorwf	(_headLightSM+5)^0,w,c
  2419   0003CC  A4D8               	btfss	status,2,c
  2420   0003CE  D020               	goto	l2216
  2421                           
  2422                           ;lights.c: 90: {;lights.c: 91: IOC_vSetOutputPort(IOC_LS, 1);
  2423   0003D0  0E01               	movlw	1
  2424   0003D2  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2425   0003D4  0E06               	movlw	6
  2426   0003D6  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2427   0003D8  0E01               	movlw	1
  2428   0003DA  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2429   0003DC  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2430                           
  2431                           ;lights.c: 92: IOC_vSetOutputPort(IOC_FS, 1);
  2432   0003E0  0E01               	movlw	1
  2433   0003E2  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2434   0003E4  0E02               	movlw	2
  2435   0003E6  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2436   0003E8  0E01               	movlw	1
  2437   0003EA  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2438   0003EC  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2439                           
  2440                           ;lights.c: 93: IOC_vSetOutputPort(IOC_FD, 1);
  2441   0003F0  0E01               	movlw	1
  2442   0003F2  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2443   0003F4  0E01               	movlw	1
  2444   0003F6  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2445   0003F8  0E01               	movlw	1
  2446   0003FA  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2447   0003FC  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2448                           
  2449                           ;lights.c: 94: g_lightStateLumini = 1;
  2450   000400  0E00               	movlw	0
  2451   000402  6E23               	movwf	(_g_lightStateLumini+1)^0,c
  2452   000404  0E01               	movlw	1
  2453   000406  6E22               	movwf	_g_lightStateLumini^0,c
  2454                           
  2455                           ;lights.c: 95: headLightSM.firstEntry = 0;
  2456   000408  0E00               	movlw	0
  2457   00040A  6E12               	movwf	(_headLightSM+5)^0,c
  2458   00040C  0E00               	movlw	0
  2459   00040E  6E11               	movwf	(_headLightSM+4)^0,c
  2460   000410                     l2216:
  2461   000410  FFFF               	dw	65535	; assembler added errata NOP
  2462                           
  2463                           ;lights.c: 96: };lights.c: 99: DIAGNOSIS_ActivateError();
  2464   000412  EC05  F003         	call	_DIAGNOSIS_ActivateError	;wreg free
  2465                           
  2466                           ;lights.c: 102: if(0 == headLightSM.faruri)
  2467   000416  5013               	movf	(_headLightSM+6)^0,w,c
  2468   000418  A4D8               	btfss	status,2,c
  2469   00041A  D024               	goto	l168
  2470                           
  2471                           ;lights.c: 103: {;lights.c: 104: headLightSM._currentState = SGL_HeadLightPasiveState;
  2472   00041C  0E6A               	movlw	low _SGL_HeadLightPasiveState
  2473   00041E  6E0D               	movwf	_headLightSM^0,c
  2474   000420  0E04               	movlw	high _SGL_HeadLightPasiveState
  2475   000422  6E0E               	movwf	(_headLightSM+1)^0,c
  2476                           
  2477                           ;lights.c: 105: headLightSM.firstEntry = 1;
  2478   000424  0E00               	movlw	0
  2479   000426  6E12               	movwf	(_headLightSM+5)^0,c
  2480   000428  0E01               	movlw	1
  2481   00042A  6E11               	movwf	(_headLightSM+4)^0,c
  2482                           
  2483                           ;lights.c: 106: g_lightStateLumini = 0;
  2484   00042C  0E00               	movlw	0
  2485   00042E  6E23               	movwf	(_g_lightStateLumini+1)^0,c
  2486   000430  0E00               	movlw	0
  2487   000432  6E22               	movwf	_g_lightStateLumini^0,c
  2488                           
  2489                           ;lights.c: 107: IOC_vSetOutputPort(IOC_LS, 0);
  2490   000434  0E01               	movlw	1
  2491   000436  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2492   000438  0E06               	movlw	6
  2493   00043A  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2494   00043C  0E00               	movlw	0
  2495   00043E  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2496   000440  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2497                           
  2498                           ;lights.c: 108: IOC_vSetOutputPort(IOC_FS, 0);
  2499   000444  0E01               	movlw	1
  2500   000446  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2501   000448  0E02               	movlw	2
  2502   00044A  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2503   00044C  0E00               	movlw	0
  2504   00044E  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2505   000450  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2506                           
  2507                           ;lights.c: 109: IOC_vSetOutputPort(IOC_FD, 0);
  2508   000454  0E01               	movlw	1
  2509   000456  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2510   000458  0E01               	movlw	1
  2511   00045A  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2512   00045C  0E00               	movlw	0
  2513   00045E  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2514   000460  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2515   000464                     l168:
  2516   000464  FFFF               	dw	65535	; assembler added errata NOP
  2517   000466  0012               	return		;funcret
  2518   000468  FFFF               	dw	65535	; errata NOP
  2519   00046A                     __end_of_SGL_HeadLightActiveState:
  2520                           	callstack 0
  2521                           
  2522 ;; *************** function _SGL_HeadLightPasiveState *****************
  2523 ;; Defined at:
  2524 ;;		line 57 in file "lights.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2542 ;;Total ram usage:        0 bytes
  2543 ;; Hardware stack levels used: 1
  2544 ;; Hardware stack levels required when called: 5
  2545 ;; This function calls:
  2546 ;;		_IOC_vSetOutputPort
  2547 ;;		_SGL_isNight
  2548 ;; This function is called by:
  2549 ;;		_SGL_HeadLightActiveState
  2550 ;;		_LIGHTS_HeadLampInit
  2551 ;;		_LIGHTS_HeadLampRun
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text21
  2556   00046A                     __ptext21:
  2557                           	callstack 0
  2558   00046A                     _SGL_HeadLightPasiveState:
  2559                           	callstack 0
  2560   00046A  FFFF               	dw	65535	; assembler added errata NOP
  2561                           
  2562                           ;lights.c: 60: if(headLightSM.firstEntry == 1)
  2563                           
  2564                           ;incstack = 0
  2565   00046C  0411               	decf	(_headLightSM+4)^0,w,c
  2566   00046E  1012               	iorwf	(_headLightSM+5)^0,w,c
  2567   000470  A4D8               	btfss	status,2,c
  2568   000472  D014               	goto	l2194
  2569                           
  2570                           ;lights.c: 61: {;lights.c: 62: IOC_vSetOutputPort(IOC_IFS, 0);
  2571   000474  0E02               	movlw	2
  2572   000476  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2573   000478  0E01               	movlw	1
  2574   00047A  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2575   00047C  0E00               	movlw	0
  2576   00047E  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2577   000480  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2578                           
  2579                           ;lights.c: 63: IOC_vSetOutputPort(IOC_LS, 0);
  2580   000484  0E01               	movlw	1
  2581   000486  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2582   000488  0E06               	movlw	6
  2583   00048A  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2584   00048C  0E00               	movlw	0
  2585   00048E  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2586   000490  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2587                           
  2588                           ;lights.c: 64: headLightSM.firstEntry = 0;
  2589   000494  0E00               	movlw	0
  2590   000496  6E12               	movwf	(_headLightSM+5)^0,c
  2591   000498  0E00               	movlw	0
  2592   00049A  6E11               	movwf	(_headLightSM+4)^0,c
  2593   00049C                     l2194:
  2594   00049C  FFFF               	dw	65535	; assembler added errata NOP
  2595                           
  2596                           ;lights.c: 65: };lights.c: 68: if(SGL_isNight())
  2597   00049E  ECC1  F002         	call	_SGL_isNight	;wreg free
  2598   0004A2  0900               	iorlw	0
  2599   0004A4  B4D8               	btfsc	status,2,c
  2600   0004A6  D009               	goto	l2198
  2601                           
  2602                           ;lights.c: 69: {;lights.c: 70: IOC_vSetOutputPort(IOC_IFS, 1);
  2603   0004A8  0E02               	movlw	2
  2604   0004AA  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2605   0004AC  0E01               	movlw	1
  2606   0004AE  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2607   0004B0  0E01               	movlw	1
  2608   0004B2  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2609   0004B4  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2610                           
  2611                           ;lights.c: 71: }
  2612   0004B8  D009               	goto	l2200
  2613   0004BA                     l2198:
  2614   0004BA  FFFF               	dw	65535	; assembler added errata NOP
  2615                           
  2616                           ;lights.c: 72: else;lights.c: 73: {;lights.c: 74: IOC_vSetOutputPort(IOC_IFS, 0);
  2617   0004BC  0E02               	movlw	2
  2618   0004BE  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2619   0004C0  0E01               	movlw	1
  2620   0004C2  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2621   0004C4  0E00               	movlw	0
  2622   0004C6  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2623   0004C8  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2624   0004CC                     l2200:
  2625   0004CC  FFFF               	dw	65535	; assembler added errata NOP
  2626                           
  2627                           ;lights.c: 75: };lights.c: 78: if(1 == headLightSM.faruri)
  2628   0004CE  0413               	decf	(_headLightSM+6)^0,w,c
  2629   0004D0  A4D8               	btfss	status,2,c
  2630   0004D2  D010               	goto	l163
  2631                           
  2632                           ;lights.c: 79: {;lights.c: 80: headLightSM.firstEntry = 1;
  2633   0004D4  0E00               	movlw	0
  2634   0004D6  6E12               	movwf	(_headLightSM+5)^0,c
  2635   0004D8  0E01               	movlw	1
  2636   0004DA  6E11               	movwf	(_headLightSM+4)^0,c
  2637                           
  2638                           ;lights.c: 81: headLightSM._currentState = SGL_HeadLightActiveState;
  2639   0004DC  0EC6               	movlw	low _SGL_HeadLightActiveState
  2640   0004DE  6E0D               	movwf	_headLightSM^0,c
  2641   0004E0  0E03               	movlw	high _SGL_HeadLightActiveState
  2642   0004E2  6E0E               	movwf	(_headLightSM+1)^0,c
  2643                           
  2644                           ;lights.c: 82: IOC_vSetOutputPort(IOC_IFS, 0);
  2645   0004E4  0E02               	movlw	2
  2646   0004E6  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2647   0004E8  0E01               	movlw	1
  2648   0004EA  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2649   0004EC  0E00               	movlw	0
  2650   0004EE  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2651   0004F0  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2652   0004F4                     l163:
  2653   0004F4  FFFF               	dw	65535	; assembler added errata NOP
  2654   0004F6  0012               	return		;funcret
  2655   0004F8  FFFF               	dw	65535	; errata NOP
  2656   0004FA                     __end_of_SGL_HeadLightPasiveState:
  2657                           	callstack 0
  2658                           
  2659 ;; *************** function _SGL_isNight *****************
  2660 ;; Defined at:
  2661 ;;		line 37 in file "lights.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  currentLight    2   27[COMRAM] unsigned int 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      unsigned char 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2678 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2679 ;;Total ram usage:        2 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; Hardware stack levels required when called: 4
  2682 ;; This function calls:
  2683 ;;		___ftge
  2684 ;;		___lwtoft
  2685 ;; This function is called by:
  2686 ;;		_SGL_HeadLightPasiveState
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text22
  2691   000582                     __ptext22:
  2692                           	callstack 0
  2693   000582                     _SGL_isNight:
  2694                           	callstack 0
  2695   000582  FFFF               	dw	65535	; assembler added errata NOP
  2696                           
  2697                           ;lights.c: 39: static T_U8 prevState = 0;;lights.c: 40: T_U16 currentLightLevel = headLi
      +                          ghtSM.lightLevel;
  2698                           
  2699                           ;incstack = 0
  2700   000584  C014  F054         	movff	_headLightSM+7,SGL_isNight@currentLightLevel
  2701   000588  C015  F055         	movff	_headLightSM+8,SGL_isNight@currentLightLevel+1
  2702                           
  2703                           ;lights.c: 42: if(prevState == 0 && currentLightLevel < (2.2*204))
  2704   00058C  5032               	movf	SGL_isNight@prevState^0,w,c
  2705   00058E  A4D8               	btfss	status,2,c
  2706   000590  D01B               	goto	l1988
  2707   000592  C054  F048         	movff	SGL_isNight@currentLightLevel,___lwtoft@c
  2708   000596  C055  F049         	movff	SGL_isNight@currentLightLevel+1,___lwtoft@c+1
  2709   00059A  ECC7  F006         	call	___lwtoft	;wreg free
  2710   00059E  C048  F04B         	movff	?___lwtoft,___ftge@ff1
  2711   0005A2  C049  F04C         	movff	?___lwtoft+1,___ftge@ff1+1
  2712   0005A6  C04A  F04D         	movff	?___lwtoft+2,___ftge@ff1+2
  2713   0005AA  0E66               	movlw	102
  2714   0005AC  6E4E               	movwf	___ftge@ff2^0,c
  2715   0005AE  0EE0               	movlw	224
  2716   0005B0  6E4F               	movwf	(___ftge@ff2+1)^0,c
  2717   0005B2  0E43               	movlw	67
  2718   0005B4  6E50               	movwf	(___ftge@ff2+2)^0,c
  2719   0005B6  EC48  F003         	call	___ftge	;wreg free
  2720   0005BA  B0D8               	btfsc	status,0,c
  2721   0005BC  D005               	goto	l1988
  2722                           
  2723                           ;lights.c: 43: {;lights.c: 44: prevState = 1;
  2724   0005BE  0E01               	movlw	1
  2725   0005C0  FFFF               	dw	65535	; assembler added errata NOP
  2726   0005C2  6E32               	movwf	SGL_isNight@prevState^0,c
  2727                           
  2728                           ;lights.c: 45: return 1;
  2729   0005C4  0E01               	movlw	1
  2730   0005C6  D01E               	goto	l155
  2731   0005C8                     l1988:
  2732   0005C8  FFFF               	dw	65535	; assembler added errata NOP
  2733                           
  2734                           ;lights.c: 46: };lights.c: 48: if(prevState == 1 && currentLightLevel > (2.4*204))
  2735   0005CA  0432               	decf	SGL_isNight@prevState^0,w,c
  2736   0005CC  A4D8               	btfss	status,2,c
  2737   0005CE  D018               	goto	l1998
  2738   0005D0  0ECD               	movlw	205
  2739   0005D2  6E4B               	movwf	___ftge@ff1^0,c
  2740   0005D4  0EF4               	movlw	244
  2741   0005D6  6E4C               	movwf	(___ftge@ff1+1)^0,c
  2742   0005D8  0E43               	movlw	67
  2743   0005DA  6E4D               	movwf	(___ftge@ff1+2)^0,c
  2744   0005DC  C054  F048         	movff	SGL_isNight@currentLightLevel,___lwtoft@c
  2745   0005E0  C055  F049         	movff	SGL_isNight@currentLightLevel+1,___lwtoft@c+1
  2746   0005E4  ECC7  F006         	call	___lwtoft	;wreg free
  2747   0005E8  C048  F04E         	movff	?___lwtoft,___ftge@ff2
  2748   0005EC  C049  F04F         	movff	?___lwtoft+1,___ftge@ff2+1
  2749   0005F0  C04A  F050         	movff	?___lwtoft+2,___ftge@ff2+2
  2750   0005F4  EC48  F003         	call	___ftge	;wreg free
  2751   0005F8  B0D8               	btfsc	status,0,c
  2752   0005FA  D002               	goto	l1998
  2753                           
  2754                           ;lights.c: 49: {;lights.c: 50: prevState = 0;
  2755   0005FC  0E00               	movlw	0
  2756   0005FE  D7E0               	goto	L2
  2757   000600                     l1998:
  2758   000600  FFFF               	dw	65535	; assembler added errata NOP
  2759                           
  2760                           ;lights.c: 52: };lights.c: 54: return prevState;
  2761   000602  5032               	movf	SGL_isNight@prevState^0,w,c
  2762   000604                     l155:
  2763   000604  FFFF               	dw	65535	; assembler added errata NOP
  2764   000606  0012               	return		;funcret
  2765   000608  FFFF               	dw	65535	; errata NOP
  2766   00060A                     __end_of_SGL_isNight:
  2767                           	callstack 0
  2768                           
  2769 ;; *************** function _SGL_HeadLightEventPoll *****************
  2770 ;; Defined at:
  2771 ;;		line 114 in file "lights.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used: 1
  2791 ;; Hardware stack levels required when called: 4
  2792 ;; This function calls:
  2793 ;;		_IOC_T16GetInputPort
  2794 ;; This function is called by:
  2795 ;;		_LIGHTS_HeadLampInit
  2796 ;;		_LIGHTS_HeadLampRun
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text23
  2801   000D64                     __ptext23:
  2802                           	callstack 0
  2803   000D64                     _SGL_HeadLightEventPoll:
  2804                           	callstack 0
  2805   000D64  FFFF               	dw	65535	; assembler added errata NOP
  2806                           
  2807                           ;lights.c: 116: headLightSM.faruri = IOC_T16GetInputPort(IOC_FARURI);
  2808                           
  2809                           ;incstack = 0
  2810   000D66  0E00               	movlw	0
  2811   000D68  6E4B               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2812   000D6A  0E01               	movlw	1
  2813   000D6C  6E4A               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2814   000D6E  EC37  F005         	call	_IOC_T16GetInputPort	;wreg free
  2815   000D72  504A               	movf	?_IOC_T16GetInputPort^0,w,c
  2816   000D74  6E13               	movwf	(_headLightSM+6)^0,c
  2817                           
  2818                           ;lights.c: 117: headLightSM.lightLevel = IOC_T16GetInputPort(IOC_ADC0);
  2819   000D76  0E03               	movlw	3
  2820   000D78  6E4B               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2821   000D7A  0E00               	movlw	0
  2822   000D7C  6E4A               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2823   000D7E  EC37  F005         	call	_IOC_T16GetInputPort	;wreg free
  2824   000D82  C04A  F014         	movff	?_IOC_T16GetInputPort,_headLightSM+7
  2825   000D86  C04B  F015         	movff	?_IOC_T16GetInputPort+1,_headLightSM+8
  2826   000D8A  0012               	return		;funcret
  2827   000D8C  FFFF               	dw	65535	; errata NOP
  2828   000D8E                     __end_of_SGL_HeadLightEventPoll:
  2829                           	callstack 0
  2830                           
  2831 ;; *************** function _DIAGNOSIS_ActivateError *****************
  2832 ;; Defined at:
  2833 ;;		line 8 in file "diagnosis.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;		None
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  sensorValue     2   27[COMRAM] unsigned int 
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2848 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2850 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2851 ;;Total ram usage:        2 bytes
  2852 ;; Hardware stack levels used: 1
  2853 ;; Hardware stack levels required when called: 4
  2854 ;; This function calls:
  2855 ;;		_IOC_T16GetInputPort
  2856 ;;		_IOC_vSetOutputPort
  2857 ;;		___ftge
  2858 ;;		___lwtoft
  2859 ;; This function is called by:
  2860 ;;		_SGL_BlinkPasiveState
  2861 ;;		_SGL_BlinkSwitchOnState
  2862 ;;		_SGL_BlinkSwitchOffState
  2863 ;;		_LIGHTS_BrakeRun
  2864 ;;		_SGL_HeadLightActiveState
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text24
  2869   00060A                     __ptext24:
  2870                           	callstack 0
  2871   00060A                     _DIAGNOSIS_ActivateError:
  2872                           	callstack 0
  2873   00060A  FFFF               	dw	65535	; assembler added errata NOP
  2874                           
  2875                           ;diagnosis.c: 10: T_U16 sensorValue = IOC_T16GetInputPort(IOC_ADC1);
  2876                           
  2877                           ;incstack = 0
  2878   00060C  0E03               	movlw	3
  2879   00060E  6E4B               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2880   000610  0E01               	movlw	1
  2881   000612  6E4A               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2882   000614  EC37  F005         	call	_IOC_T16GetInputPort	;wreg free
  2883   000618  C04A  F054         	movff	?_IOC_T16GetInputPort,DIAGNOSIS_ActivateError@sensorValue
  2884   00061C  C04B  F055         	movff	?_IOC_T16GetInputPort+1,DIAGNOSIS_ActivateError@sensorValue+1
  2885                           
  2886                           ;diagnosis.c: 12: if(g_lightStateFrana || g_lightStateLumini || g_sglStareSemnal)
  2887   000620  5024               	movf	_g_lightStateFrana^0,w,c
  2888   000622  1025               	iorwf	(_g_lightStateFrana+1)^0,w,c
  2889   000624  A4D8               	btfss	status,2,c
  2890   000626  D008               	goto	u1310
  2891   000628  5022               	movf	_g_lightStateLumini^0,w,c
  2892   00062A  1023               	iorwf	(_g_lightStateLumini+1)^0,w,c
  2893   00062C  A4D8               	btfss	status,2,c
  2894   00062E  D004               	goto	u1310
  2895   000630  502E               	movf	_g_sglStareSemnal^0,w,c
  2896   000632  102F               	iorwf	(_g_sglStareSemnal+1)^0,w,c
  2897   000634  B4D8               	btfsc	status,2,c
  2898   000636  D020               	goto	l1972
  2899   000638                     u1310:
  2900   000638  FFFF               	dw	65535	; assembler added errata NOP
  2901                           
  2902                           ;diagnosis.c: 13: {;diagnosis.c: 14: if(sensorValue > (4.5*204))
  2903   00063A  0E80               	movlw	128
  2904   00063C  6E4B               	movwf	___ftge@ff1^0,c
  2905   00063E  0E65               	movlw	101
  2906   000640  6E4C               	movwf	(___ftge@ff1+1)^0,c
  2907   000642  0E44               	movlw	68
  2908   000644  6E4D               	movwf	(___ftge@ff1+2)^0,c
  2909   000646  C054  F048         	movff	DIAGNOSIS_ActivateError@sensorValue,___lwtoft@c
  2910   00064A  C055  F049         	movff	DIAGNOSIS_ActivateError@sensorValue+1,___lwtoft@c+1
  2911   00064E  ECC7  F006         	call	___lwtoft	;wreg free
  2912   000652  C048  F04E         	movff	?___lwtoft,___ftge@ff2
  2913   000656  C049  F04F         	movff	?___lwtoft+1,___ftge@ff2+1
  2914   00065A  C04A  F050         	movff	?___lwtoft+2,___ftge@ff2+2
  2915   00065E  EC48  F003         	call	___ftge	;wreg free
  2916   000662  B0D8               	btfsc	status,0,c
  2917   000664  D009               	goto	l1972
  2918                           
  2919                           ;diagnosis.c: 15: {;diagnosis.c: 16: IOC_vSetOutputPort(IOC_IE, 1);
  2920   000666  0E02               	movlw	2
  2921   000668  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2922   00066A  0E00               	movlw	0
  2923   00066C  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2924   00066E  0E01               	movlw	1
  2925   000670  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2926   000672  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2927                           
  2928                           ;diagnosis.c: 17: }
  2929   000676  D009               	goto	l416
  2930   000678                     l1972:
  2931   000678  FFFF               	dw	65535	; assembler added errata NOP
  2932                           
  2933                           ;diagnosis.c: 18: else;diagnosis.c: 19: {;diagnosis.c: 20: IOC_vSetOutputPort(IOC_IE, 0)
      +                          ;
  2934   00067A  0E02               	movlw	2
  2935   00067C  6E49               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2936   00067E  0E00               	movlw	0
  2937   000680  6E48               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2938   000682  0E00               	movlw	0
  2939   000684  6E4A               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2940   000686  ECF1  F005         	call	_IOC_vSetOutputPort	;wreg free
  2941   00068A                     l416:
  2942   00068A  FFFF               	dw	65535	; assembler added errata NOP
  2943   00068C  0012               	return		;funcret
  2944   00068E  FFFF               	dw	65535	; errata NOP
  2945   000690                     __end_of_DIAGNOSIS_ActivateError:
  2946                           	callstack 0
  2947                           
  2948 ;; *************** function ___lwtoft *****************
  2949 ;; Defined at:
  2950 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwtoft.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  c               2   15[COMRAM] unsigned int 
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;		None
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  3   15[COMRAM] float 
  2957 ;; Registers used:
  2958 ;;		wreg, status,2, status,0, cstack
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2964 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2967 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2968 ;;Total ram usage:        3 bytes
  2969 ;; Hardware stack levels used: 1
  2970 ;; Hardware stack levels required when called: 3
  2971 ;; This function calls:
  2972 ;;		___ftpack
  2973 ;; This function is called by:
  2974 ;;		_SGL_isNight
  2975 ;;		_DIAGNOSIS_ActivateError
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           	psect	text25
  2980   000D8E                     __ptext25:
  2981                           	callstack 0
  2982   000D8E                     ___lwtoft:
  2983                           	callstack 0
  2984   000D8E  FFFF               	dw	65535	; assembler added errata NOP
  2985                           
  2986                           ;incstack = 0
  2987   000D90  C048  F040         	movff	___lwtoft@c,___ftpack@arg
  2988   000D94  C049  F041         	movff	___lwtoft@c+1,___ftpack@arg+1
  2989   000D98  6A42               	clrf	(___ftpack@arg+2)^0,c
  2990   000D9A  0E8E               	movlw	142
  2991   000D9C  6E43               	movwf	___ftpack@exp^0,c
  2992   000D9E  0E00               	movlw	0
  2993   000DA0  6E44               	movwf	___ftpack@sign^0,c
  2994   000DA2  EC81  F001         	call	___ftpack	;wreg free
  2995   000DA6  C040  F048         	movff	?___ftpack,?___lwtoft
  2996   000DAA  C041  F049         	movff	?___ftpack+1,?___lwtoft+1
  2997   000DAE  C042  F04A         	movff	?___ftpack+2,?___lwtoft+2
  2998   000DB2  0012               	return		;funcret
  2999   000DB4  FFFF               	dw	65535	; errata NOP
  3000   000DB6                     __end_of___lwtoft:
  3001                           	callstack 0
  3002                           
  3003 ;; *************** function ___ftpack *****************
  3004 ;; Defined at:
  3005 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\float.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  arg             3    7[COMRAM] unsigned um
  3008 ;;  exp             1   10[COMRAM] unsigned char 
  3009 ;;  sign            1   11[COMRAM] unsigned char 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;		None
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  3    7[COMRAM] float 
  3014 ;; Registers used:
  3015 ;;		wreg, status,2, status,0
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3021 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3023 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3024 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3025 ;;Total ram usage:        8 bytes
  3026 ;; Hardware stack levels used: 1
  3027 ;; Hardware stack levels required when called: 2
  3028 ;; This function calls:
  3029 ;;		Nothing
  3030 ;; This function is called by:
  3031 ;;		___lwtoft
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text26
  3036   000302                     __ptext26:
  3037                           	callstack 0
  3038   000302                     ___ftpack:
  3039                           	callstack 0
  3040   000302  FFFF               	dw	65535	; assembler added errata NOP
  3041                           
  3042                           ;incstack = 0
  3043   000304  5043               	movf	___ftpack@exp^0,w,c
  3044   000306  B4D8               	btfsc	status,2,c
  3045   000308  D005               	goto	u1130
  3046   00030A  5040               	movf	___ftpack@arg^0,w,c
  3047   00030C  1041               	iorwf	(___ftpack@arg+1)^0,w,c
  3048   00030E  1042               	iorwf	(___ftpack@arg+2)^0,w,c
  3049   000310  A4D8               	btfss	status,2,c
  3050   000312  D00E               	goto	l1868
  3051   000314                     u1130:
  3052   000314  FFFF               	dw	65535	; assembler added errata NOP
  3053   000316  0E00               	movlw	0
  3054   000318  6E40               	movwf	?___ftpack^0,c
  3055   00031A  0E00               	movlw	0
  3056   00031C  6E41               	movwf	(?___ftpack+1)^0,c
  3057   00031E  0E00               	movlw	0
  3058   000320  6E42               	movwf	(?___ftpack+2)^0,c
  3059   000322  D04E               	goto	l691
  3060   000324                     l1866:
  3061   000324  FFFF               	dw	65535	; assembler added errata NOP
  3062   000326  2A43               	incf	___ftpack@exp^0,f,c
  3063   000328  90D8               	bcf	status,0,c
  3064   00032A  3242               	rrcf	(___ftpack@arg+2)^0,f,c
  3065   00032C  3241               	rrcf	(___ftpack@arg+1)^0,f,c
  3066   00032E  3240               	rrcf	___ftpack@arg^0,f,c
  3067   000330                     l1868:
  3068   000330  FFFF               	dw	65535	; assembler added errata NOP
  3069   000332  0E00               	movlw	0
  3070   000334  1440               	andwf	___ftpack@arg^0,w,c
  3071   000336  6E45               	movwf	??___ftpack^0,c
  3072   000338  0E00               	movlw	0
  3073   00033A  1441               	andwf	(___ftpack@arg+1)^0,w,c
  3074   00033C  6E46               	movwf	(??___ftpack+1)^0,c
  3075   00033E  0EFE               	movlw	254
  3076   000340  1442               	andwf	(___ftpack@arg+2)^0,w,c
  3077   000342  6E47               	movwf	(??___ftpack+2)^0,c
  3078   000344  5045               	movf	??___ftpack^0,w,c
  3079   000346  1046               	iorwf	(??___ftpack+1)^0,w,c
  3080   000348  1047               	iorwf	(??___ftpack+2)^0,w,c
  3081   00034A  B4D8               	btfsc	status,2,c
  3082   00034C  D00D               	goto	l1874
  3083   00034E  D7EA               	goto	l1866
  3084   000350                     l1870:
  3085   000350  FFFF               	dw	65535	; assembler added errata NOP
  3086   000352  2A43               	incf	___ftpack@exp^0,f,c
  3087   000354  0E01               	movlw	1
  3088   000356  2640               	addwf	___ftpack@arg^0,f,c
  3089   000358  0E00               	movlw	0
  3090   00035A  2241               	addwfc	(___ftpack@arg+1)^0,f,c
  3091   00035C  0E00               	movlw	0
  3092   00035E  2242               	addwfc	(___ftpack@arg+2)^0,f,c
  3093   000360  90D8               	bcf	status,0,c
  3094   000362  3242               	rrcf	(___ftpack@arg+2)^0,f,c
  3095   000364  3241               	rrcf	(___ftpack@arg+1)^0,f,c
  3096   000366  3240               	rrcf	___ftpack@arg^0,f,c
  3097   000368                     l1874:
  3098   000368  FFFF               	dw	65535	; assembler added errata NOP
  3099   00036A  0E00               	movlw	0
  3100   00036C  1440               	andwf	___ftpack@arg^0,w,c
  3101   00036E  6E45               	movwf	??___ftpack^0,c
  3102   000370  0E00               	movlw	0
  3103   000372  1441               	andwf	(___ftpack@arg+1)^0,w,c
  3104   000374  6E46               	movwf	(??___ftpack+1)^0,c
  3105   000376  0EFF               	movlw	255
  3106   000378  1442               	andwf	(___ftpack@arg+2)^0,w,c
  3107   00037A  6E47               	movwf	(??___ftpack+2)^0,c
  3108   00037C  5045               	movf	??___ftpack^0,w,c
  3109   00037E  1046               	iorwf	(??___ftpack+1)^0,w,c
  3110   000380  1047               	iorwf	(??___ftpack+2)^0,w,c
  3111   000382  B4D8               	btfsc	status,2,c
  3112   000384  D007               	goto	l1878
  3113   000386  D7E4               	goto	l1870
  3114   000388                     l1876:
  3115   000388  FFFF               	dw	65535	; assembler added errata NOP
  3116   00038A  0643               	decf	___ftpack@exp^0,f,c
  3117   00038C  90D8               	bcf	status,0,c
  3118   00038E  3640               	rlcf	___ftpack@arg^0,f,c
  3119   000390  3641               	rlcf	(___ftpack@arg+1)^0,f,c
  3120   000392  3642               	rlcf	(___ftpack@arg+2)^0,f,c
  3121   000394                     l1878:
  3122   000394  FFFF               	dw	65535	; assembler added errata NOP
  3123   000396  BE41               	btfsc	(___ftpack@arg+1)^0,7,c
  3124   000398  D003               	goto	u1170
  3125   00039A  0E02               	movlw	2
  3126   00039C  6043               	cpfslt	___ftpack@exp^0,c
  3127   00039E  D7F4               	goto	l1876
  3128   0003A0                     u1170:
  3129   0003A0  FFFF               	dw	65535	; assembler added errata NOP
  3130   0003A2  A043               	btfss	___ftpack@exp^0,0,c
  3131   0003A4  9E41               	bcf	(___ftpack@arg+1)^0,7,c
  3132   0003A6  90D8               	bcf	status,0,c
  3133   0003A8  3243               	rrcf	___ftpack@exp^0,f,c
  3134   0003AA  5043               	movf	___ftpack@exp^0,w,c
  3135   0003AC  1242               	iorwf	(___ftpack@arg+2)^0,f,c
  3136   0003AE  5044               	movf	___ftpack@sign^0,w,c
  3137   0003B0  A4D8               	btfss	status,2,c
  3138   0003B2  8E42               	bsf	(___ftpack@arg+2)^0,7,c
  3139   0003B4  C040  F040         	movff	___ftpack@arg,?___ftpack
  3140   0003B8  C041  F041         	movff	___ftpack@arg+1,?___ftpack+1
  3141   0003BC  C042  F042         	movff	___ftpack@arg+2,?___ftpack+2
  3142   0003C0                     l691:
  3143   0003C0  FFFF               	dw	65535	; assembler added errata NOP
  3144   0003C2  0012               	return		;funcret
  3145   0003C4  FFFF               	dw	65535	; errata NOP
  3146   0003C6                     __end_of___ftpack:
  3147                           	callstack 0
  3148                           
  3149 ;; *************** function ___ftge *****************
  3150 ;; Defined at:
  3151 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftge.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  ff1             3   18[COMRAM] float 
  3154 ;;  ff2             3   21[COMRAM] float 
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;		None
  3157 ;; Return value:  Size  Location     Type
  3158 ;;		None               void
  3159 ;; Registers used:
  3160 ;;		wreg, status,2, status,0
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3166 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3168 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3169 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3170 ;;Total ram usage:        9 bytes
  3171 ;; Hardware stack levels used: 1
  3172 ;; Hardware stack levels required when called: 2
  3173 ;; This function calls:
  3174 ;;		Nothing
  3175 ;; This function is called by:
  3176 ;;		_SGL_isNight
  3177 ;;		_DIAGNOSIS_ActivateError
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text27
  3182   000690                     __ptext27:
  3183                           	callstack 0
  3184   000690                     ___ftge:
  3185                           	callstack 0
  3186   000690  FFFF               	dw	65535	; assembler added errata NOP
  3187                           
  3188                           ;incstack = 0
  3189   000692  AE4D               	btfss	(___ftge@ff1+2)^0,7,c
  3190   000694  D00F               	goto	l1922
  3191   000696  0E00               	movlw	0
  3192   000698  6E51               	movwf	??___ftge^0,c
  3193   00069A  0E00               	movlw	0
  3194   00069C  6E52               	movwf	(??___ftge+1)^0,c
  3195   00069E  0E80               	movlw	128
  3196   0006A0  6E53               	movwf	(??___ftge+2)^0,c
  3197   0006A2  504B               	movf	___ftge@ff1^0,w,c
  3198   0006A4  5C51               	subwf	??___ftge^0,w,c
  3199   0006A6  6E4B               	movwf	___ftge@ff1^0,c
  3200   0006A8  504C               	movf	(___ftge@ff1+1)^0,w,c
  3201   0006AA  5852               	subwfb	(??___ftge+1)^0,w,c
  3202   0006AC  6E4C               	movwf	(___ftge@ff1+1)^0,c
  3203   0006AE  504D               	movf	(___ftge@ff1+2)^0,w,c
  3204   0006B0  5853               	subwfb	(??___ftge+2)^0,w,c
  3205   0006B2  6E4D               	movwf	(___ftge@ff1+2)^0,c
  3206   0006B4                     l1922:
  3207   0006B4  FFFF               	dw	65535	; assembler added errata NOP
  3208   0006B6  AE50               	btfss	(___ftge@ff2+2)^0,7,c
  3209   0006B8  D00F               	goto	l1926
  3210   0006BA  0E00               	movlw	0
  3211   0006BC  6E51               	movwf	??___ftge^0,c
  3212   0006BE  0E00               	movlw	0
  3213   0006C0  6E52               	movwf	(??___ftge+1)^0,c
  3214   0006C2  0E80               	movlw	128
  3215   0006C4  6E53               	movwf	(??___ftge+2)^0,c
  3216   0006C6  504E               	movf	___ftge@ff2^0,w,c
  3217   0006C8  5C51               	subwf	??___ftge^0,w,c
  3218   0006CA  6E4E               	movwf	___ftge@ff2^0,c
  3219   0006CC  504F               	movf	(___ftge@ff2+1)^0,w,c
  3220   0006CE  5852               	subwfb	(??___ftge+1)^0,w,c
  3221   0006D0  6E4F               	movwf	(___ftge@ff2+1)^0,c
  3222   0006D2  5050               	movf	(___ftge@ff2+2)^0,w,c
  3223   0006D4  5853               	subwfb	(??___ftge+2)^0,w,c
  3224   0006D6  6E50               	movwf	(___ftge@ff2+2)^0,c
  3225   0006D8                     l1926:
  3226   0006D8  FFFF               	dw	65535	; assembler added errata NOP
  3227   0006DA  0E00               	movlw	0
  3228   0006DC  1A4B               	xorwf	___ftge@ff1^0,f,c
  3229   0006DE  0E00               	movlw	0
  3230   0006E0  1A4C               	xorwf	(___ftge@ff1+1)^0,f,c
  3231   0006E2  0E80               	movlw	128
  3232   0006E4  1A4D               	xorwf	(___ftge@ff1+2)^0,f,c
  3233   0006E6  0E00               	movlw	0
  3234   0006E8  1A4E               	xorwf	___ftge@ff2^0,f,c
  3235   0006EA  0E00               	movlw	0
  3236   0006EC  1A4F               	xorwf	(___ftge@ff2+1)^0,f,c
  3237   0006EE  0E80               	movlw	128
  3238   0006F0  1A50               	xorwf	(___ftge@ff2+2)^0,f,c
  3239   0006F2  504E               	movf	___ftge@ff2^0,w,c
  3240   0006F4  5C4B               	subwf	___ftge@ff1^0,w,c
  3241   0006F6  504F               	movf	(___ftge@ff2+1)^0,w,c
  3242   0006F8  584C               	subwfb	(___ftge@ff1+1)^0,w,c
  3243   0006FA  5050               	movf	(___ftge@ff2+2)^0,w,c
  3244   0006FC  584D               	subwfb	(___ftge@ff1+2)^0,w,c
  3245   0006FE  B0D8               	btfsc	status,0,c
  3246   000700  D002               	goto	l1932
  3247   000702  90D8               	bcf	status,0,c
  3248   000704  D002               	goto	l766
  3249   000706                     l1932:
  3250   000706  FFFF               	dw	65535	; assembler added errata NOP
  3251   000708  80D8               	bsf	status,0,c
  3252   00070A                     l766:
  3253   00070A  FFFF               	dw	65535	; assembler added errata NOP
  3254   00070C  0012               	return		;funcret
  3255   00070E  FFFF               	dw	65535	; errata NOP
  3256   000710                     __end_of___ftge:
  3257                           	callstack 0
  3258                           
  3259 ;; *************** function _IOC_vSetOutputPort *****************
  3260 ;; Defined at:
  3261 ;;		line 5 in file "ioc.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  u16ChannelSe    2   15[COMRAM] const enum E10327
  3264 ;;  u8Value         1   17[COMRAM] const unsigned char 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  u16ChannelMa    2   18[COMRAM] unsigned int 
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  1    wreg      void 
  3269 ;; Registers used:
  3270 ;;		wreg, status,2, status,0, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3276 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3277 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3279 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3280 ;;Total ram usage:        5 bytes
  3281 ;; Hardware stack levels used: 1
  3282 ;; Hardware stack levels required when called: 3
  3283 ;; This function calls:
  3284 ;;		_PCS_vSetOutputPortD
  3285 ;;		_PCS_vSetOutputPortE
  3286 ;; This function is called by:
  3287 ;;		_SGL_toggleAllHazardLights
  3288 ;;		_SGL_toggleSideHazardLights
  3289 ;;		_SGL_setAllHazardLights
  3290 ;;		_SGL_setSideHazardLights
  3291 ;;		_LIGHTS_BrakeInit
  3292 ;;		_LIGHTS_BrakeRun
  3293 ;;		_SGL_HeadLightPasiveState
  3294 ;;		_SGL_HeadLightActiveState
  3295 ;;		_DIAGNOSIS_ActivateError
  3296 ;;		_LIGHTS_DemoState1
  3297 ;;		_LIGHTS_DemoState2
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text28
  3302   000BE2                     __ptext28:
  3303                           	callstack 0
  3304   000BE2                     _IOC_vSetOutputPort:
  3305                           	callstack 0
  3306   000BE2  FFFF               	dw	65535	; assembler added errata NOP
  3307                           
  3308                           ;ioc.c: 7: T_U16 u16ChannelMask = (u16ChannelSelect&0xFF00);
  3309                           
  3310                           ;incstack = 0
  3311   000BE4  0E00               	movlw	0
  3312   000BE6  1448               	andwf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3313   000BE8  6E4B               	movwf	IOC_vSetOutputPort@u16ChannelMask^0,c
  3314   000BEA  0EFF               	movlw	255
  3315   000BEC  1449               	andwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,w,c
  3316   000BEE  6E4C               	movwf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,c
  3317                           
  3318                           ;ioc.c: 9: if(u16ChannelMask == IOC_PORTD)
  3319   000BF0  044C               	decf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,w,c
  3320   000BF2  104B               	iorwf	IOC_vSetOutputPort@u16ChannelMask^0,w,c
  3321   000BF4  A4D8               	btfss	status,2,c
  3322   000BF6  D006               	goto	l1898
  3323                           
  3324                           ;ioc.c: 10: {;ioc.c: 11: PCS_vSetOutputPortD(u16ChannelSelect, u8Value);
  3325   000BF8  C04A  F040         	movff	IOC_vSetOutputPort@u8Value,PCS_vSetOutputPortD@u8Value
  3326   000BFC  5048               	movf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3327   000BFE  ECC7  F003         	call	_PCS_vSetOutputPortD
  3328                           
  3329                           ;ioc.c: 12: }
  3330   000C02  D00B               	goto	l364
  3331   000C04                     l1898:
  3332   000C04  FFFF               	dw	65535	; assembler added errata NOP
  3333                           
  3334                           ;ioc.c: 13: else if(u16ChannelMask == IOC_PORTE)
  3335   000C06  0E02               	movlw	2
  3336   000C08  184C               	xorwf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,w,c
  3337   000C0A  104B               	iorwf	IOC_vSetOutputPort@u16ChannelMask^0,w,c
  3338   000C0C  A4D8               	btfss	status,2,c
  3339   000C0E  D005               	goto	l364
  3340                           
  3341                           ;ioc.c: 14: {;ioc.c: 15: PCS_vSetOutputPortE(u16ChannelSelect, u8Value);
  3342   000C10  C04A  F040         	movff	IOC_vSetOutputPort@u8Value,PCS_vSetOutputPortE@u8Value
  3343   000C14  5048               	movf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3344   000C16  EC88  F003         	call	_PCS_vSetOutputPortE
  3345   000C1A                     l364:
  3346   000C1A  FFFF               	dw	65535	; assembler added errata NOP
  3347   000C1C  0012               	return		;funcret
  3348   000C1E  FFFF               	dw	65535	; errata NOP
  3349   000C20                     __end_of_IOC_vSetOutputPort:
  3350                           	callstack 0
  3351                           
  3352 ;; *************** function _PCS_vSetOutputPortE *****************
  3353 ;; Defined at:
  3354 ;;		line 35 in file "pcs.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;  u8BitNumber     1    wreg     const unsigned char 
  3357 ;;  u8Value         1    7[COMRAM] const unsigned char 
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;  u8BitNumber     1   13[COMRAM] const unsigned char 
  3360 ;;  u8BitNumberV    1   14[COMRAM] unsigned char 
  3361 ;;  u8BitValue      1   12[COMRAM] unsigned char 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3371 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3372 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3373 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3374 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3375 ;;Total ram usage:        8 bytes
  3376 ;; Hardware stack levels used: 1
  3377 ;; Hardware stack levels required when called: 2
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_IOC_vSetOutputPort
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text29
  3386   000710                     __ptext29:
  3387                           	callstack 0
  3388   000710                     _PCS_vSetOutputPortE:
  3389                           	callstack 0
  3390   000710  FFFF               	dw	65535	; assembler added errata NOP
  3391                           
  3392                           ;incstack = 0
  3393                           ;PCS_vSetOutputPortE@u8BitNumber stored from wreg
  3394   000712  6E46               	movwf	PCS_vSetOutputPortE@u8BitNumber^0,c
  3395                           
  3396                           ;pcs.c: 37: T_U8 u8BitValue = u8Value>0 ? 1 : 0;
  3397   000714  5040               	movf	PCS_vSetOutputPortE@u8Value^0,w,c
  3398   000716  B4D8               	btfsc	status,2,c
  3399   000718  D002               	goto	u1030
  3400   00071A  0E01               	movlw	1
  3401   00071C  D002               	goto	u1040
  3402   00071E                     u1030:
  3403   00071E  FFFF               	dw	65535	; assembler added errata NOP
  3404   000720  0E00               	movlw	0
  3405   000722                     u1040:
  3406   000722  FFFF               	dw	65535	; assembler added errata NOP
  3407   000724  6E45               	movwf	PCS_vSetOutputPortE@u8BitValue^0,c
  3408                           
  3409                           ;pcs.c: 38: T_U8 u8BitNumberValue = u8BitNumber<=1 ? u8BitNumber : 1;
  3410   000726  0E01               	movlw	1
  3411   000728  6446               	cpfsgt	PCS_vSetOutputPortE@u8BitNumber^0,c
  3412   00072A  D005               	goto	l268
  3413   00072C  0E00               	movlw	0
  3414   00072E  6E44               	movwf	(_PCS_vSetOutputPortE$857+1)^0,c
  3415   000730  0E01               	movlw	1
  3416   000732  6E43               	movwf	_PCS_vSetOutputPortE$857^0,c
  3417   000734  D004               	goto	l270
  3418   000736                     l268:
  3419   000736  FFFF               	dw	65535	; assembler added errata NOP
  3420   000738  C046  F043         	movff	PCS_vSetOutputPortE@u8BitNumber,_PCS_vSetOutputPortE$857
  3421   00073C  6A44               	clrf	(_PCS_vSetOutputPortE$857+1)^0,c
  3422   00073E                     l270:
  3423   00073E  FFFF               	dw	65535	; assembler added errata NOP
  3424   000740  C043  F047         	movff	_PCS_vSetOutputPortE$857,PCS_vSetOutputPortE@u8BitNumberValue
  3425                           
  3426                           ;pcs.c: 40: if(1 == u8BitValue)
  3427   000744  0445               	decf	PCS_vSetOutputPortE@u8BitValue^0,w,c
  3428   000746  A4D8               	btfss	status,2,c
  3429   000748  D00F               	goto	l1848
  3430                           
  3431                           ;pcs.c: 41: {;pcs.c: 42: PORTE |= (0x01<<u8BitNumberValue);
  3432   00074A  C047  F041         	movff	PCS_vSetOutputPortE@u8BitNumberValue,??_PCS_vSetOutputPortE
  3433   00074E  0E01               	movlw	1
  3434   000750  6E42               	movwf	(??_PCS_vSetOutputPortE+1)^0,c
  3435   000752  2A41               	incf	??_PCS_vSetOutputPortE^0,f,c
  3436   000754  D003               	goto	u1074
  3437   000756                     u1075:
  3438   000756  FFFF               	dw	65535	; assembler added errata NOP
  3439   000758  90D8               	bcf	status,0,c
  3440   00075A  3642               	rlcf	(??_PCS_vSetOutputPortE+1)^0,f,c
  3441   00075C                     u1074:
  3442   00075C  FFFF               	dw	65535	; assembler added errata NOP
  3443   00075E  2E41               	decfsz	??_PCS_vSetOutputPortE^0,f,c
  3444   000760  D7FA               	goto	u1075
  3445   000762  5042               	movf	(??_PCS_vSetOutputPortE+1)^0,w,c
  3446   000764  1284               	iorwf	132,f,c	;volatile
  3447                           
  3448                           ;pcs.c: 43: }
  3449   000766  D010               	goto	l273
  3450   000768                     l1848:
  3451   000768  FFFF               	dw	65535	; assembler added errata NOP
  3452                           
  3453                           ;pcs.c: 44: else;pcs.c: 45: {;pcs.c: 46: PORTE &= ~(0x01<<u8BitNumberValue);
  3454   00076A  C047  F041         	movff	PCS_vSetOutputPortE@u8BitNumberValue,??_PCS_vSetOutputPortE
  3455   00076E  0E01               	movlw	1
  3456   000770  6E42               	movwf	(??_PCS_vSetOutputPortE+1)^0,c
  3457   000772  2A41               	incf	??_PCS_vSetOutputPortE^0,f,c
  3458   000774  D003               	goto	u1084
  3459   000776                     u1085:
  3460   000776  FFFF               	dw	65535	; assembler added errata NOP
  3461   000778  90D8               	bcf	status,0,c
  3462   00077A  3642               	rlcf	(??_PCS_vSetOutputPortE+1)^0,f,c
  3463   00077C                     u1084:
  3464   00077C  FFFF               	dw	65535	; assembler added errata NOP
  3465   00077E  2E41               	decfsz	??_PCS_vSetOutputPortE^0,f,c
  3466   000780  D7FA               	goto	u1085
  3467   000782  5042               	movf	(??_PCS_vSetOutputPortE+1)^0,w,c
  3468   000784  0AFF               	xorlw	255
  3469   000786  1684               	andwf	132,f,c	;volatile
  3470   000788                     l273:
  3471   000788  FFFF               	dw	65535	; assembler added errata NOP
  3472   00078A  0012               	return		;funcret
  3473   00078C  FFFF               	dw	65535	; errata NOP
  3474   00078E                     __end_of_PCS_vSetOutputPortE:
  3475                           	callstack 0
  3476                           
  3477 ;; *************** function _PCS_vSetOutputPortD *****************
  3478 ;; Defined at:
  3479 ;;		line 20 in file "pcs.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  u8BitNumber     1    wreg     const unsigned char 
  3482 ;;  u8Value         1    7[COMRAM] const unsigned char 
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;  u8BitNumber     1   13[COMRAM] const unsigned char 
  3485 ;;  u8BitNumberV    1   14[COMRAM] unsigned char 
  3486 ;;  u8BitValue      1   12[COMRAM] unsigned char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3496 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3497 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3498 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3499 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3500 ;;Total ram usage:        8 bytes
  3501 ;; Hardware stack levels used: 1
  3502 ;; Hardware stack levels required when called: 2
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_IOC_vSetOutputPort
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text30
  3511   00078E                     __ptext30:
  3512                           	callstack 0
  3513   00078E                     _PCS_vSetOutputPortD:
  3514                           	callstack 0
  3515   00078E  FFFF               	dw	65535	; assembler added errata NOP
  3516                           
  3517                           ;incstack = 0
  3518                           ;PCS_vSetOutputPortD@u8BitNumber stored from wreg
  3519   000790  6E46               	movwf	PCS_vSetOutputPortD@u8BitNumber^0,c
  3520                           
  3521                           ;pcs.c: 22: T_U8 u8BitValue = u8Value>0 ? 1 : 0;
  3522   000792  5040               	movf	PCS_vSetOutputPortD@u8Value^0,w,c
  3523   000794  B4D8               	btfsc	status,2,c
  3524   000796  D002               	goto	u970
  3525   000798  0E01               	movlw	1
  3526   00079A  D002               	goto	u980
  3527   00079C                     u970:
  3528   00079C  FFFF               	dw	65535	; assembler added errata NOP
  3529   00079E  0E00               	movlw	0
  3530   0007A0                     u980:
  3531   0007A0  FFFF               	dw	65535	; assembler added errata NOP
  3532   0007A2  6E45               	movwf	PCS_vSetOutputPortD@u8BitValue^0,c
  3533                           
  3534                           ;pcs.c: 23: T_U8 u8BitNumberValue = u8BitNumber<=7 ? u8BitNumber : 7;
  3535   0007A4  0E07               	movlw	7
  3536   0007A6  6446               	cpfsgt	PCS_vSetOutputPortD@u8BitNumber^0,c
  3537   0007A8  D005               	goto	l259
  3538   0007AA  0E00               	movlw	0
  3539   0007AC  6E44               	movwf	(_PCS_vSetOutputPortD$851+1)^0,c
  3540   0007AE  0E07               	movlw	7
  3541   0007B0  6E43               	movwf	_PCS_vSetOutputPortD$851^0,c
  3542   0007B2  D004               	goto	l261
  3543   0007B4                     l259:
  3544   0007B4  FFFF               	dw	65535	; assembler added errata NOP
  3545   0007B6  C046  F043         	movff	PCS_vSetOutputPortD@u8BitNumber,_PCS_vSetOutputPortD$851
  3546   0007BA  6A44               	clrf	(_PCS_vSetOutputPortD$851+1)^0,c
  3547   0007BC                     l261:
  3548   0007BC  FFFF               	dw	65535	; assembler added errata NOP
  3549   0007BE  C043  F047         	movff	_PCS_vSetOutputPortD$851,PCS_vSetOutputPortD@u8BitNumberValue
  3550                           
  3551                           ;pcs.c: 25: if(1 == u8BitValue)
  3552   0007C2  0445               	decf	PCS_vSetOutputPortD@u8BitValue^0,w,c
  3553   0007C4  A4D8               	btfss	status,2,c
  3554   0007C6  D00F               	goto	l1836
  3555                           
  3556                           ;pcs.c: 26: {;pcs.c: 27: PORTD |= (0x01<<u8BitNumberValue);
  3557   0007C8  C047  F041         	movff	PCS_vSetOutputPortD@u8BitNumberValue,??_PCS_vSetOutputPortD
  3558   0007CC  0E01               	movlw	1
  3559   0007CE  6E42               	movwf	(??_PCS_vSetOutputPortD+1)^0,c
  3560   0007D0  2A41               	incf	??_PCS_vSetOutputPortD^0,f,c
  3561   0007D2  D003               	goto	u1014
  3562   0007D4                     u1015:
  3563   0007D4  FFFF               	dw	65535	; assembler added errata NOP
  3564   0007D6  90D8               	bcf	status,0,c
  3565   0007D8  3642               	rlcf	(??_PCS_vSetOutputPortD+1)^0,f,c
  3566   0007DA                     u1014:
  3567   0007DA  FFFF               	dw	65535	; assembler added errata NOP
  3568   0007DC  2E41               	decfsz	??_PCS_vSetOutputPortD^0,f,c
  3569   0007DE  D7FA               	goto	u1015
  3570   0007E0  5042               	movf	(??_PCS_vSetOutputPortD+1)^0,w,c
  3571   0007E2  1283               	iorwf	131,f,c	;volatile
  3572                           
  3573                           ;pcs.c: 28: }
  3574   0007E4  D010               	goto	l264
  3575   0007E6                     l1836:
  3576   0007E6  FFFF               	dw	65535	; assembler added errata NOP
  3577                           
  3578                           ;pcs.c: 29: else;pcs.c: 30: {;pcs.c: 31: PORTD &= ~(0x01<<u8BitNumberValue);
  3579   0007E8  C047  F041         	movff	PCS_vSetOutputPortD@u8BitNumberValue,??_PCS_vSetOutputPortD
  3580   0007EC  0E01               	movlw	1
  3581   0007EE  6E42               	movwf	(??_PCS_vSetOutputPortD+1)^0,c
  3582   0007F0  2A41               	incf	??_PCS_vSetOutputPortD^0,f,c
  3583   0007F2  D003               	goto	u1024
  3584   0007F4                     u1025:
  3585   0007F4  FFFF               	dw	65535	; assembler added errata NOP
  3586   0007F6  90D8               	bcf	status,0,c
  3587   0007F8  3642               	rlcf	(??_PCS_vSetOutputPortD+1)^0,f,c
  3588   0007FA                     u1024:
  3589   0007FA  FFFF               	dw	65535	; assembler added errata NOP
  3590   0007FC  2E41               	decfsz	??_PCS_vSetOutputPortD^0,f,c
  3591   0007FE  D7FA               	goto	u1025
  3592   000800  5042               	movf	(??_PCS_vSetOutputPortD+1)^0,w,c
  3593   000802  0AFF               	xorlw	255
  3594   000804  1683               	andwf	131,f,c	;volatile
  3595   000806                     l264:
  3596   000806  FFFF               	dw	65535	; assembler added errata NOP
  3597   000808  0012               	return		;funcret
  3598   00080A  FFFF               	dw	65535	; errata NOP
  3599   00080C                     __end_of_PCS_vSetOutputPortD:
  3600                           	callstack 0
  3601                           
  3602 ;; *************** function _IOC_T16GetInputPort *****************
  3603 ;; Defined at:
  3604 ;;		line 19 in file "ioc.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  u16ChannelSe    2   17[COMRAM] const enum E10339
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  u16ChannelMa    2   21[COMRAM] unsigned int 
  3609 ;;  pinValue        2   19[COMRAM] unsigned int 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  2   17[COMRAM] unsigned int 
  3612 ;; Registers used:
  3613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3620 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3623 ;;Total ram usage:        6 bytes
  3624 ;; Hardware stack levels used: 1
  3625 ;; Hardware stack levels required when called: 3
  3626 ;; This function calls:
  3627 ;;		_ADC_u16ReadAdcValue
  3628 ;;		_PCS_T16GetInputPortC
  3629 ;; This function is called by:
  3630 ;;		_SGL_BlinkEventPoll
  3631 ;;		_LIGHTS_BrakeRun
  3632 ;;		_SGL_HeadLightEventPoll
  3633 ;;		_DIAGNOSIS_ActivateError
  3634 ;;		_LIGHTS_DemoEventPoll
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text31
  3639   000A6E                     __ptext31:
  3640                           	callstack 0
  3641   000A6E                     _IOC_T16GetInputPort:
  3642                           	callstack 0
  3643   000A6E  FFFF               	dw	65535	; assembler added errata NOP
  3644                           
  3645                           ;ioc.c: 21: T_U16 pinValue = 0;
  3646                           
  3647                           ;incstack = 0
  3648   000A70  0E00               	movlw	0
  3649   000A72  6E4D               	movwf	(IOC_T16GetInputPort@pinValue+1)^0,c
  3650   000A74  0E00               	movlw	0
  3651   000A76  6E4C               	movwf	IOC_T16GetInputPort@pinValue^0,c
  3652                           
  3653                           ;ioc.c: 22: T_U16 u16ChannelMask = (u16ChannelSelect&0xFF00);
  3654   000A78  0E00               	movlw	0
  3655   000A7A  144A               	andwf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3656   000A7C  6E4E               	movwf	IOC_T16GetInputPort@u16ChannelMask^0,c
  3657   000A7E  0EFF               	movlw	255
  3658   000A80  144B               	andwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,w,c
  3659   000A82  6E4F               	movwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,c
  3660                           
  3661                           ;ioc.c: 24: if(u16ChannelMask == IOC_PORTC)
  3662   000A84  504E               	movf	IOC_T16GetInputPort@u16ChannelMask^0,w,c
  3663   000A86  104F               	iorwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,w,c
  3664   000A88  A4D8               	btfss	status,2,c
  3665   000A8A  D008               	goto	l1910
  3666                           
  3667                           ;ioc.c: 25: {;ioc.c: 26: pinValue = PCS_T16GetInputPortC(u16ChannelSelect);
  3668   000A8C  504A               	movf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3669   000A8E  ECB2  F004         	call	_PCS_T16GetInputPortC
  3670   000A92  C040  F04C         	movff	?_PCS_T16GetInputPortC,IOC_T16GetInputPort@pinValue
  3671   000A96  C041  F04D         	movff	?_PCS_T16GetInputPortC+1,IOC_T16GetInputPort@pinValue+1
  3672                           
  3673                           ;ioc.c: 27: }
  3674   000A9A  D00D               	goto	l1914
  3675   000A9C                     l1910:
  3676   000A9C  FFFF               	dw	65535	; assembler added errata NOP
  3677                           
  3678                           ;ioc.c: 28: else if(u16ChannelMask == IOC_PORTA)
  3679   000A9E  0E03               	movlw	3
  3680   000AA0  184F               	xorwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,w,c
  3681   000AA2  104E               	iorwf	IOC_T16GetInputPort@u16ChannelMask^0,w,c
  3682   000AA4  A4D8               	btfss	status,2,c
  3683   000AA6  D007               	goto	l1914
  3684                           
  3685                           ;ioc.c: 29: {;ioc.c: 30: pinValue = ADC_u16ReadAdcValue(u16ChannelSelect);
  3686   000AA8  504A               	movf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3687   000AAA  EC10  F006         	call	_ADC_u16ReadAdcValue
  3688   000AAE  C040  F04C         	movff	?_ADC_u16ReadAdcValue,IOC_T16GetInputPort@pinValue
  3689   000AB2  C041  F04D         	movff	?_ADC_u16ReadAdcValue+1,IOC_T16GetInputPort@pinValue+1
  3690   000AB6                     l1914:
  3691   000AB6  FFFF               	dw	65535	; assembler added errata NOP
  3692                           
  3693                           ;ioc.c: 31: };ioc.c: 33: return pinValue;
  3694   000AB8  C04C  F04A         	movff	IOC_T16GetInputPort@pinValue,?_IOC_T16GetInputPort
  3695   000ABC  C04D  F04B         	movff	IOC_T16GetInputPort@pinValue+1,?_IOC_T16GetInputPort+1
  3696   000AC0  0012               	return		;funcret
  3697   000AC2  FFFF               	dw	65535	; errata NOP
  3698   000AC4                     __end_of_IOC_T16GetInputPort:
  3699                           	callstack 0
  3700                           
  3701 ;; *************** function _PCS_T16GetInputPortC *****************
  3702 ;; Defined at:
  3703 ;;		line 50 in file "pcs.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  u8BitNumber     1    wreg     const unsigned char 
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;  u8BitNumber     1   15[COMRAM] const unsigned char 
  3708 ;;  u8BitNumberV    1   16[COMRAM] unsigned char 
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  2    7[COMRAM] unsigned int 
  3711 ;; Registers used:
  3712 ;;		wreg, status,2, status,0
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3719 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3720 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3721 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;Total ram usage:       10 bytes
  3723 ;; Hardware stack levels used: 1
  3724 ;; Hardware stack levels required when called: 2
  3725 ;; This function calls:
  3726 ;;		Nothing
  3727 ;; This function is called by:
  3728 ;;		_IOC_T16GetInputPort
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text32
  3733   000964                     __ptext32:
  3734                           	callstack 0
  3735   000964                     _PCS_T16GetInputPortC:
  3736                           	callstack 0
  3737   000964  FFFF               	dw	65535	; assembler added errata NOP
  3738                           
  3739                           ;incstack = 0
  3740                           ;PCS_T16GetInputPortC@u8BitNumber stored from wreg
  3741   000966  6E48               	movwf	PCS_T16GetInputPortC@u8BitNumber^0,c
  3742                           
  3743                           ;pcs.c: 52: T_U8 u8BitNumberValue = u8BitNumber<=4 ? u8BitNumber : 4;
  3744   000968  0E04               	movlw	4
  3745   00096A  6448               	cpfsgt	PCS_T16GetInputPortC@u8BitNumber^0,c
  3746   00096C  D005               	goto	l277
  3747   00096E  0E00               	movlw	0
  3748   000970  6E47               	movwf	(_PCS_T16GetInputPortC$861+1)^0,c
  3749   000972  0E04               	movlw	4
  3750   000974  6E46               	movwf	_PCS_T16GetInputPortC$861^0,c
  3751   000976  D004               	goto	l279
  3752   000978                     l277:
  3753   000978  FFFF               	dw	65535	; assembler added errata NOP
  3754   00097A  C048  F046         	movff	PCS_T16GetInputPortC@u8BitNumber,_PCS_T16GetInputPortC$861
  3755   00097E  6A47               	clrf	(_PCS_T16GetInputPortC$861+1)^0,c
  3756   000980                     l279:
  3757   000980  FFFF               	dw	65535	; assembler added errata NOP
  3758   000982  C046  F049         	movff	_PCS_T16GetInputPortC$861,PCS_T16GetInputPortC@u8BitNumberValue
  3759                           
  3760                           ;pcs.c: 53: return (PORTC & 0x01<<u8BitNumberValue)>>u8BitNumberValue;
  3761   000986  C049  F042         	movff	PCS_T16GetInputPortC@u8BitNumberValue,??_PCS_T16GetInputPortC
  3762   00098A  C049  F043         	movff	PCS_T16GetInputPortC@u8BitNumberValue,??_PCS_T16GetInputPortC+1
  3763   00098E  0E01               	movlw	1
  3764   000990  6E44               	movwf	(??_PCS_T16GetInputPortC+2)^0,c
  3765   000992  2A43               	incf	(??_PCS_T16GetInputPortC+1)^0,f,c
  3766   000994  D003               	goto	u1104
  3767   000996                     u1105:
  3768   000996  FFFF               	dw	65535	; assembler added errata NOP
  3769   000998  90D8               	bcf	status,0,c
  3770   00099A  3644               	rlcf	(??_PCS_T16GetInputPortC+2)^0,f,c
  3771   00099C                     u1104:
  3772   00099C  FFFF               	dw	65535	; assembler added errata NOP
  3773   00099E  2E43               	decfsz	(??_PCS_T16GetInputPortC+1)^0,f,c
  3774   0009A0  D7FA               	goto	u1105
  3775   0009A2  5044               	movf	(??_PCS_T16GetInputPortC+2)^0,w,c
  3776   0009A4  1482               	andwf	130,w,c	;volatile
  3777   0009A6  6E45               	movwf	(??_PCS_T16GetInputPortC+3)^0,c
  3778   0009A8  2A42               	incf	??_PCS_T16GetInputPortC^0,f,c
  3779   0009AA  D003               	goto	u1114
  3780   0009AC                     u1115:
  3781   0009AC  FFFF               	dw	65535	; assembler added errata NOP
  3782   0009AE  90D8               	bcf	status,0,c
  3783   0009B0  3245               	rrcf	(??_PCS_T16GetInputPortC+3)^0,f,c
  3784   0009B2                     u1114:
  3785   0009B2  FFFF               	dw	65535	; assembler added errata NOP
  3786   0009B4  2E42               	decfsz	??_PCS_T16GetInputPortC^0,f,c
  3787   0009B6  D7FA               	goto	u1115
  3788   0009B8  5045               	movf	(??_PCS_T16GetInputPortC+3)^0,w,c
  3789   0009BA  6E40               	movwf	?_PCS_T16GetInputPortC^0,c
  3790   0009BC  6A41               	clrf	(?_PCS_T16GetInputPortC+1)^0,c
  3791   0009BE  0012               	return		;funcret
  3792   0009C0  FFFF               	dw	65535	; errata NOP
  3793   0009C2                     __end_of_PCS_T16GetInputPortC:
  3794                           	callstack 0
  3795                           
  3796 ;; *************** function _ADC_u16ReadAdcValue *****************
  3797 ;; Defined at:
  3798 ;;		line 48 in file "adc.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;  U8Channel       1    wreg     const unsigned char 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  U8Channel       1   12[COMRAM] const unsigned char 
  3803 ;;  U8ChannelVal    1   11[COMRAM] unsigned char 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  2    7[COMRAM] unsigned int 
  3806 ;; Registers used:
  3807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3814 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3816 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3817 ;;Total ram usage:        6 bytes
  3818 ;; Hardware stack levels used: 1
  3819 ;; Hardware stack levels required when called: 2
  3820 ;; This function calls:
  3821 ;;		Nothing
  3822 ;; This function is called by:
  3823 ;;		_IOC_T16GetInputPort
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text33
  3828   000C20                     __ptext33:
  3829                           	callstack 0
  3830   000C20                     _ADC_u16ReadAdcValue:
  3831                           	callstack 0
  3832   000C20  FFFF               	dw	65535	; assembler added errata NOP
  3833                           
  3834                           ;incstack = 0
  3835                           ;ADC_u16ReadAdcValue@U8Channel stored from wreg
  3836   000C22  6E45               	movwf	ADC_u16ReadAdcValue@U8Channel^0,c
  3837                           
  3838                           ;adc.c: 50: T_U8 U8ChannelValue = U8Channel<=1 ? U8Channel : 1;
  3839   000C24  0E01               	movlw	1
  3840   000C26  6445               	cpfsgt	ADC_u16ReadAdcValue@U8Channel^0,c
  3841   000C28  D005               	goto	l209
  3842   000C2A  0E00               	movlw	0
  3843   000C2C  6E43               	movwf	(_ADC_u16ReadAdcValue$519+1)^0,c
  3844   000C2E  0E01               	movlw	1
  3845   000C30  6E42               	movwf	_ADC_u16ReadAdcValue$519^0,c
  3846   000C32  D004               	goto	l211
  3847   000C34                     l209:
  3848   000C34  FFFF               	dw	65535	; assembler added errata NOP
  3849   000C36  C045  F042         	movff	ADC_u16ReadAdcValue@U8Channel,_ADC_u16ReadAdcValue$519
  3850   000C3A  6A43               	clrf	(_ADC_u16ReadAdcValue$519+1)^0,c
  3851   000C3C                     l211:
  3852   000C3C  FFFF               	dw	65535	; assembler added errata NOP
  3853   000C3E  C042  F044         	movff	_ADC_u16ReadAdcValue$519,ADC_u16ReadAdcValue@U8ChannelValue
  3854                           
  3855                           ;adc.c: 51: return au16AdcReadValue[U8ChannelValue];
  3856   000C42  5044               	movf	ADC_u16ReadAdcValue@U8ChannelValue^0,w,c
  3857   000C44  0D02               	mullw	2
  3858   000C46  0E60               	movlw	low _au16AdcReadValue
  3859   000C48  24F3               	addwf	243,w,c
  3860   000C4A  6ED9               	movwf	fsr2l,c
  3861   000C4C  0E00               	movlw	high _au16AdcReadValue
  3862   000C4E  20F4               	addwfc	prodh,w,c
  3863   000C50  6EDA               	movwf	fsr2h,c
  3864   000C52  CFDE F040          	movff	postinc2,?_ADC_u16ReadAdcValue
  3865   000C56  CFDD F041          	movff	postdec2,?_ADC_u16ReadAdcValue+1
  3866   000C5A  0012               	return		;funcret
  3867   000C5C  FFFF               	dw	65535	; errata NOP
  3868   000C5E                     __end_of_ADC_u16ReadAdcValue:
  3869                           	callstack 0
  3870                           
  3871 ;; *************** function _TASK_vTask100ms *****************
  3872 ;; Defined at:
  3873 ;;		line 27 in file "tasks.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;		None
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;		None
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  1    wreg      void 
  3880 ;; Registers used:
  3881 ;;		None
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;Total ram usage:        0 bytes
  3892 ;; Hardware stack levels used: 1
  3893 ;; Hardware stack levels required when called: 2
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_SCHED_vStartScheduler
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text34
  3902   000E66                     __ptext34:
  3903                           	callstack 0
  3904   000E66                     _TASK_vTask100ms:
  3905                           	callstack 0
  3906   000E66  FFFF               	dw	65535	; assembler added errata NOP
  3907                           
  3908                           ;incstack = 0
  3909   000E68  0012               	return		;funcret
  3910   000E6A  FFFF               	dw	65535	; errata NOP
  3911   000E6C                     __end_of_TASK_vTask100ms:
  3912                           	callstack 0
  3913                           
  3914 ;; *************** function _SCHED_vInitSystem *****************
  3915 ;; Defined at:
  3916 ;;		line 13 in file "sched.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;		None
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;		None
  3921 ;; Return value:  Size  Location     Type
  3922 ;;                  1    wreg      void 
  3923 ;; Registers used:
  3924 ;;		wreg, status,2, cstack
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/0
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3934 ;;Total ram usage:        0 bytes
  3935 ;; Hardware stack levels used: 1
  3936 ;; Hardware stack levels required when called: 3
  3937 ;; This function calls:
  3938 ;;		_ADC_vInit
  3939 ;;		_INT_vInit
  3940 ;;		_PCS_vInit
  3941 ;;		_TIM_vInit
  3942 ;; This function is called by:
  3943 ;;		_main
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text35
  3948   000DE8                     __ptext35:
  3949                           	callstack 0
  3950   000DE8                     _SCHED_vInitSystem:
  3951                           	callstack 0
  3952   000DE8  FFFF               	dw	65535	; assembler added errata NOP
  3953                           
  3954                           ;sched.c: 15: PCS_vInit();
  3955                           
  3956                           ;incstack = 0
  3957   000DEA  ECDB  F006         	call	_PCS_vInit	;wreg free
  3958                           
  3959                           ;sched.c: 16: INT_vInit();
  3960   000DEE  EC0A  F007         	call	_INT_vInit	;wreg free
  3961                           
  3962                           ;sched.c: 17: ADC_vInit();
  3963   000DF2  ECB0  F005         	call	_ADC_vInit	;wreg free
  3964                           
  3965                           ;sched.c: 18: TIM_vInit();
  3966   000DF6  EC83  F006         	call	_TIM_vInit	;wreg free
  3967   000DFA  0012               	return		;funcret
  3968   000DFC  FFFF               	dw	65535	; errata NOP
  3969   000DFE                     __end_of_SCHED_vInitSystem:
  3970                           	callstack 0
  3971                           
  3972 ;; *************** function _TIM_vInit *****************
  3973 ;; Defined at:
  3974 ;;		line 3 in file "tim.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  1    wreg      void 
  3981 ;; Registers used:
  3982 ;;		wreg, status,2
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3992 ;;Total ram usage:        0 bytes
  3993 ;; Hardware stack levels used: 1
  3994 ;; Hardware stack levels required when called: 2
  3995 ;; This function calls:
  3996 ;;		Nothing
  3997 ;; This function is called by:
  3998 ;;		_SCHED_vInitSystem
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text36
  4003   000D06                     __ptext36:
  4004                           	callstack 0
  4005   000D06                     _TIM_vInit:
  4006                           	callstack 0
  4007   000D06  FFFF               	dw	65535	; assembler added errata NOP
  4008                           
  4009                           ;tim.c: 5: T2CONbits.TMR2ON = 0b0;
  4010                           
  4011                           ;incstack = 0
  4012   000D08  94CA               	bcf	202,2,c	;volatile
  4013                           
  4014                           ;tim.c: 6: TMR2 = 0x00;
  4015   000D0A  0E00               	movlw	0
  4016   000D0C  6ECC               	movwf	204,c	;volatile
  4017                           
  4018                           ;tim.c: 7: T2CON = 0x00;
  4019   000D0E  0E00               	movlw	0
  4020   000D10  6ECA               	movwf	202,c	;volatile
  4021                           
  4022                           ;tim.c: 8: PR2 = 0x00;
  4023   000D12  0E00               	movlw	0
  4024   000D14  6ECB               	movwf	203,c	;volatile
  4025                           
  4026                           ;tim.c: 10: T2CONbits.TOUTPS = 0b0100;
  4027   000D16  50CA               	movf	202,w,c	;volatile
  4028   000D18  0B87               	andlw	-121
  4029   000D1A  0920               	iorlw	32
  4030   000D1C  6ECA               	movwf	202,c	;volatile
  4031                           
  4032                           ;tim.c: 11: T2CONbits.T2CKPS = 0b01;
  4033   000D1E  50CA               	movf	202,w,c	;volatile
  4034   000D20  0BFC               	andlw	-4
  4035   000D22  0901               	iorlw	1
  4036   000D24  6ECA               	movwf	202,c	;volatile
  4037                           
  4038                           ;tim.c: 12: PR2 = 125;
  4039   000D26  0E7D               	movlw	125
  4040   000D28  6ECB               	movwf	203,c	;volatile
  4041                           
  4042                           ;tim.c: 14: PIR1bits.TMR2IF = 0b0;
  4043   000D2A  929E               	bcf	158,1,c	;volatile
  4044                           
  4045                           ;tim.c: 15: IPR1bits.TMR2IP = 0b1;
  4046   000D2C  829F               	bsf	159,1,c	;volatile
  4047                           
  4048                           ;tim.c: 16: PIE1bits.TMR2IE = 0b1;
  4049   000D2E  829D               	bsf	157,1,c	;volatile
  4050                           
  4051                           ;tim.c: 17: INTCONbits.PEIE = 1;
  4052   000D30  8CF2               	bsf	242,6,c	;volatile
  4053                           
  4054                           ;tim.c: 18: INTCONbits.GIE = 1;
  4055   000D32  8EF2               	bsf	242,7,c	;volatile
  4056                           
  4057                           ;tim.c: 20: T2CONbits.TMR2ON = 0b1;
  4058   000D34  84CA               	bsf	202,2,c	;volatile
  4059   000D36  0012               	return		;funcret
  4060   000D38  FFFF               	dw	65535	; errata NOP
  4061   000D3A                     __end_of_TIM_vInit:
  4062                           	callstack 0
  4063                           
  4064 ;; *************** function _PCS_vInit *****************
  4065 ;; Defined at:
  4066 ;;		line 3 in file "pcs.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;		None
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;		None
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  1    wreg      void 
  4073 ;; Registers used:
  4074 ;;		wreg, status,2
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;Total ram usage:        0 bytes
  4085 ;; Hardware stack levels used: 1
  4086 ;; Hardware stack levels required when called: 2
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_SCHED_vInitSystem
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           	psect	text37
  4095   000DB6                     __ptext37:
  4096                           	callstack 0
  4097   000DB6                     _PCS_vInit:
  4098                           	callstack 0
  4099   000DB6  FFFF               	dw	65535	; assembler added errata NOP
  4100                           
  4101                           ;pcs.c: 5: TRISAbits.RA0 = 1;
  4102                           
  4103                           ;incstack = 0
  4104   000DB8  8092               	bsf	146,0,c	;volatile
  4105                           
  4106                           ;pcs.c: 6: TRISAbits.RA1 = 1;
  4107   000DBA  8292               	bsf	146,1,c	;volatile
  4108                           
  4109                           ;pcs.c: 8: TRISCbits.RC0 = 1;
  4110   000DBC  8094               	bsf	148,0,c	;volatile
  4111                           
  4112                           ;pcs.c: 9: TRISCbits.RC1 = 1;
  4113   000DBE  8294               	bsf	148,1,c	;volatile
  4114                           
  4115                           ;pcs.c: 10: TRISCbits.RC2 = 1;
  4116   000DC0  8494               	bsf	148,2,c	;volatile
  4117                           
  4118                           ;pcs.c: 11: TRISCbits.RC3 = 1;
  4119   000DC2  8694               	bsf	148,3,c	;volatile
  4120                           
  4121                           ;pcs.c: 12: TRISCbits.RC4 = 1;
  4122   000DC4  8894               	bsf	148,4,c	;volatile
  4123                           
  4124                           ;pcs.c: 14: TRISD = 0x00;
  4125   000DC6  0E00               	movlw	0
  4126   000DC8  6E95               	movwf	149,c	;volatile
  4127                           
  4128                           ;pcs.c: 16: TRISEbits.RE0 = 0;
  4129   000DCA  9096               	bcf	150,0,c	;volatile
  4130                           
  4131                           ;pcs.c: 17: TRISEbits.RE1 = 0;
  4132   000DCC  9296               	bcf	150,1,c	;volatile
  4133   000DCE  0012               	return		;funcret
  4134   000DD0  FFFF               	dw	65535	; errata NOP
  4135   000DD2                     __end_of_PCS_vInit:
  4136                           	callstack 0
  4137                           
  4138 ;; *************** function _INT_vInit *****************
  4139 ;; Defined at:
  4140 ;;		line 6 in file "int.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;		None
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;		None
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  1    wreg      void 
  4147 ;; Registers used:
  4148 ;;		None
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;Total ram usage:        0 bytes
  4159 ;; Hardware stack levels used: 1
  4160 ;; Hardware stack levels required when called: 2
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_SCHED_vInitSystem
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text38
  4169   000E14                     __ptext38:
  4170                           	callstack 0
  4171   000E14                     _INT_vInit:
  4172                           	callstack 0
  4173   000E14  FFFF               	dw	65535	; assembler added errata NOP
  4174                           
  4175                           ;int.c: 9: PIR1bits.ADIF = 0;
  4176                           
  4177                           ;incstack = 0
  4178   000E16  9C9E               	bcf	158,6,c	;volatile
  4179                           
  4180                           ;int.c: 10: PIE1bits.ADIE = 1;
  4181   000E18  8C9D               	bsf	157,6,c	;volatile
  4182                           
  4183                           ;int.c: 13: PIR1bits.TMR2IF = 0b0;
  4184   000E1A  929E               	bcf	158,1,c	;volatile
  4185                           
  4186                           ;int.c: 14: IPR1bits.TMR2IP = 0b1;
  4187   000E1C  829F               	bsf	159,1,c	;volatile
  4188                           
  4189                           ;int.c: 15: PIE1bits.TMR2IE = 0b1;
  4190   000E1E  829D               	bsf	157,1,c	;volatile
  4191                           
  4192                           ;int.c: 18: INTCONbits.PEIE = 1;
  4193   000E20  8CF2               	bsf	242,6,c	;volatile
  4194                           
  4195                           ;int.c: 19: INTCONbits.GIE = 1;
  4196   000E22  8EF2               	bsf	242,7,c	;volatile
  4197   000E24  0012               	return		;funcret
  4198   000E26  FFFF               	dw	65535	; errata NOP
  4199   000E28                     __end_of_INT_vInit:
  4200                           	callstack 0
  4201                           
  4202 ;; *************** function _ADC_vInit *****************
  4203 ;; Defined at:
  4204 ;;		line 9 in file "adc.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		wreg, status,2
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;Total ram usage:        0 bytes
  4223 ;; Hardware stack levels used: 1
  4224 ;; Hardware stack levels required when called: 2
  4225 ;; This function calls:
  4226 ;;		Nothing
  4227 ;; This function is called by:
  4228 ;;		_SCHED_vInitSystem
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text39
  4233   000B60                     __ptext39:
  4234                           	callstack 0
  4235   000B60                     _ADC_vInit:
  4236                           	callstack 0
  4237   000B60  FFFF               	dw	65535	; assembler added errata NOP
  4238                           
  4239                           ;adc.c: 11: ADRESH = 0x00;
  4240                           
  4241                           ;incstack = 0
  4242   000B62  0E00               	movlw	0
  4243   000B64  6EC4               	movwf	196,c	;volatile
  4244                           
  4245                           ;adc.c: 12: ADRESL = 0x00;
  4246   000B66  0E00               	movlw	0
  4247   000B68  6EC3               	movwf	195,c	;volatile
  4248                           
  4249                           ;adc.c: 14: ADCON0bits.CHS = 0b0000;
  4250   000B6A  0EC3               	movlw	-61
  4251   000B6C  16C2               	andwf	194,f,c	;volatile
  4252                           
  4253                           ;adc.c: 16: ADCON1bits.VCFG = 0b00;
  4254   000B6E  0ECF               	movlw	-49
  4255   000B70  16C1               	andwf	193,f,c	;volatile
  4256                           
  4257                           ;adc.c: 17: ADCON1bits.PCFG = 0b1101;
  4258   000B72  50C1               	movf	193,w,c	;volatile
  4259   000B74  0BF0               	andlw	-16
  4260   000B76  090D               	iorlw	13
  4261   000B78  6EC1               	movwf	193,c	;volatile
  4262                           
  4263                           ;adc.c: 19: ADCON2bits.ADFM = 1;
  4264   000B7A  8EC0               	bsf	192,7,c	;volatile
  4265                           
  4266                           ;adc.c: 20: ADCON2bits.ACQT = 0b100;
  4267   000B7C  50C0               	movf	192,w,c	;volatile
  4268   000B7E  0BC7               	andlw	-57
  4269   000B80  0920               	iorlw	32
  4270   000B82  6EC0               	movwf	192,c	;volatile
  4271                           
  4272                           ;adc.c: 21: ADCON2bits.ADCS = 0b001;
  4273   000B84  50C0               	movf	192,w,c	;volatile
  4274   000B86  0BF8               	andlw	-8
  4275   000B88  0901               	iorlw	1
  4276   000B8A  6EC0               	movwf	192,c	;volatile
  4277                           
  4278                           ;adc.c: 23: PIR1bits.ADIF = 0;
  4279   000B8C  9C9E               	bcf	158,6,c	;volatile
  4280                           
  4281                           ;adc.c: 24: PIE1bits.ADIE = 1;
  4282   000B8E  8C9D               	bsf	157,6,c	;volatile
  4283                           
  4284                           ;adc.c: 25: INTCONbits.PEIE = 1;
  4285   000B90  8CF2               	bsf	242,6,c	;volatile
  4286                           
  4287                           ;adc.c: 26: INTCONbits.GIE = 1;
  4288   000B92  8EF2               	bsf	242,7,c	;volatile
  4289                           
  4290                           ;adc.c: 28: ADCON0bits.ADON = 1;
  4291   000B94  80C2               	bsf	194,0,c	;volatile
  4292                           
  4293                           ;adc.c: 29: _delay((unsigned long)((40)*(10000000UL/4000000.0)));
  4294   000B96  0E19               	movlw	25
  4295   000B98                     u2207:
  4296   000B98  FFFF               	dw	65535	; errata NOP
  4297   000B9A  2EE8               	decfsz	wreg,f,c
  4298   000B9C  D7FD               	bra	u2207
  4299                           
  4300                           ;adc.c: 30: ADCON0bits.GO_nDONE = 1;
  4301   000B9E  82C2               	bsf	194,1,c	;volatile
  4302   000BA0  0012               	return		;funcret
  4303   000BA2  FFFF               	dw	65535	; errata NOP
  4304   000BA4                     __end_of_ADC_vInit:
  4305                           	callstack 0
  4306                           
  4307 ;; *************** function _INT_vInterruptHandler *****************
  4308 ;; Defined at:
  4309 ;;		line 22 in file "int.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;		None
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;		None
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      void 
  4316 ;; Registers used:
  4317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4325 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;Total ram usage:        4 bytes
  4328 ;; Hardware stack levels used: 1
  4329 ;; Hardware stack levels required when called: 1
  4330 ;; This function calls:
  4331 ;;		_ADC_vConversionCompleted
  4332 ;;		_SCHED_vTickFunctionCall
  4333 ;; This function is called by:
  4334 ;;		Interrupt level 2
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	intcode
  4339   000008                     __pintcode:
  4340                           	callstack 0
  4341   000008                     _INT_vInterruptHandler:
  4342                           	callstack 0
  4343   000008  FFFF               	dw	65535	; assembler added errata NOP
  4344                           
  4345                           ;incstack = 0
  4346   00000A  8258               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4347   00000C  CFD9 F03C          	movff	fsr2l,??_INT_vInterruptHandler
  4348   000010  CFDA F03D          	movff	fsr2h,??_INT_vInterruptHandler+1
  4349   000014  CFF3 F03E          	movff	prodl,??_INT_vInterruptHandler+2
  4350   000018  CFF4 F03F          	movff	prodh,??_INT_vInterruptHandler+3
  4351                           
  4352                           ;int.c: 24: if(PIR1bits.ADIF && ADCON0bits.ADON)
  4353   00001C  BC9E               	btfsc	158,6,c	;volatile
  4354   00001E  A0C2               	btfss	194,0,c	;volatile
  4355   000020  D002               	goto	i2l2390
  4356                           
  4357                           ;int.c: 25: {;int.c: 26: ADC_vConversionCompleted();
  4358   000022  EC7F  F004         	call	_ADC_vConversionCompleted	;wreg free
  4359   000026                     i2l2390:
  4360   000026  FFFF               	dw	65535	; assembler added errata NOP
  4361                           
  4362                           ;int.c: 27: };int.c: 29: if(PIR1bits.TMR2IF && T2CONbits.TMR2ON)
  4363   000028  B29E               	btfsc	158,1,c	;volatile
  4364   00002A  A4CA               	btfss	202,2,c	;volatile
  4365   00002C  D003               	goto	i2l238
  4366                           
  4367                           ;int.c: 30: {;int.c: 31: SCHED_vTickFunctionCall();
  4368   00002E  ECFF  F006         	call	_SCHED_vTickFunctionCall	;wreg free
  4369                           
  4370                           ;int.c: 32: PIR1bits.TMR2IF = 0b0;
  4371   000032  929E               	bcf	158,1,c	;volatile
  4372   000034                     i2l238:
  4373   000034  FFFF               	dw	65535	; assembler added errata NOP
  4374   000036  C03F  FFF4         	movff	??_INT_vInterruptHandler+3,prodh
  4375   00003A  C03E  FFF3         	movff	??_INT_vInterruptHandler+2,prodl
  4376   00003E  C03D  FFDA         	movff	??_INT_vInterruptHandler+1,fsr2h
  4377   000042  C03C  FFD9         	movff	??_INT_vInterruptHandler,fsr2l
  4378   000046  9258               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4379   000048  0011               	retfie		f
  4380   00004A  FFFF               	dw	65535	; errata NOP
  4381   00004C                     __end_of_INT_vInterruptHandler:
  4382                           	callstack 0
  4383                           
  4384 ;; *************** function _SCHED_vTickFunctionCall *****************
  4385 ;; Defined at:
  4386 ;;		line 21 in file "sched.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;		None
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  1    wreg      void 
  4393 ;; Registers used:
  4394 ;;		wreg, status,2, status,0
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;Total ram usage:        0 bytes
  4405 ;; Hardware stack levels used: 1
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_INT_vInterruptHandler
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text41
  4414   000DFE                     __ptext41:
  4415                           	callstack 0
  4416   000DFE                     _SCHED_vTickFunctionCall:
  4417                           	callstack 0
  4418   000DFE  FFFF               	dw	65535	; assembler added errata NOP
  4419                           
  4420                           ;sched.c: 23: ++sched_gTick10ms;
  4421                           
  4422                           ;incstack = 0
  4423   000E00  2A31               	incf	_sched_gTick10ms^0,f,c
  4424                           
  4425                           ;sched.c: 24: ++sched_gTick100ms;
  4426   000E02  2A30               	incf	_sched_gTick100ms^0,f,c
  4427                           
  4428                           ;sched.c: 25: ++sched_gTick1s;
  4429   000E04  4A20               	infsnz	_sched_gTick1s^0,f,c
  4430   000E06  2A21               	incf	(_sched_gTick1s+1)^0,f,c
  4431                           
  4432                           ;sched.c: 26: sched_bTicked = 1;;
  4433   000E08  0E00               	movlw	0
  4434   000E0A  6E1F               	movwf	(_sched_bTicked+1)^0,c
  4435   000E0C  0E01               	movlw	1
  4436   000E0E  6E1E               	movwf	_sched_bTicked^0,c
  4437   000E10  0012               	return		;funcret
  4438   000E12  FFFF               	dw	65535	; errata NOP
  4439   000E14                     __end_of_SCHED_vTickFunctionCall:
  4440                           	callstack 0
  4441                           
  4442 ;; *************** function _ADC_vConversionCompleted *****************
  4443 ;; Defined at:
  4444 ;;		line 40 in file "adc.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;		None
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;		None
  4449 ;; Return value:  Size  Location     Type
  4450 ;;                  1    wreg      void 
  4451 ;; Registers used:
  4452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4460 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4462 ;;Total ram usage:        3 bytes
  4463 ;; Hardware stack levels used: 1
  4464 ;; This function calls:
  4465 ;;		Nothing
  4466 ;; This function is called by:
  4467 ;;		_INT_vInterruptHandler
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text42
  4472   0008FE                     __ptext42:
  4473                           	callstack 0
  4474   0008FE                     _ADC_vConversionCompleted:
  4475                           	callstack 0
  4476   0008FE  FFFF               	dw	65535	; assembler added errata NOP
  4477                           
  4478                           ;adc.c: 42: au16AdcReadValue[ADCON0bits.CHS0] = (ADRESH << 8) | ADRESL;
  4479                           
  4480                           ;incstack = 0
  4481   000900  50C3               	movf	195,w,c	;volatile
  4482   000902  CFC4 F039          	movff	4036,??_ADC_vConversionCompleted	;volatile
  4483   000906  6A3A               	clrf	(??_ADC_vConversionCompleted+1)^0,c
  4484   000908  C039  F03A         	movff	??_ADC_vConversionCompleted,??_ADC_vConversionCompleted+1
  4485   00090C  6A39               	clrf	??_ADC_vConversionCompleted^0,c
  4486   00090E  1239               	iorwf	??_ADC_vConversionCompleted^0,f,c
  4487   000910  0E00               	movlw	0
  4488   000912  123A               	iorwf	(??_ADC_vConversionCompleted+1)^0,f,c
  4489   000914  A4C2               	btfss	194,2,c	;volatile
  4490   000916  D003               	goto	i2u172_40
  4491   000918  6A3B               	clrf	(??_ADC_vConversionCompleted+2)^0,c
  4492   00091A  2A3B               	incf	(??_ADC_vConversionCompleted+2)^0,f,c
  4493   00091C  D002               	goto	i2u172_48
  4494   00091E                     i2u172_40:
  4495   00091E  FFFF               	dw	65535	; assembler added errata NOP
  4496   000920  6A3B               	clrf	(??_ADC_vConversionCompleted+2)^0,c
  4497   000922                     i2u172_48:
  4498   000922  FFFF               	dw	65535	; assembler added errata NOP
  4499   000924  503B               	movf	(??_ADC_vConversionCompleted+2)^0,w,c
  4500   000926  0D02               	mullw	2
  4501   000928  0E60               	movlw	low _au16AdcReadValue
  4502   00092A  24F3               	addwf	243,w,c
  4503   00092C  6ED9               	movwf	fsr2l,c
  4504   00092E  0E00               	movlw	high _au16AdcReadValue
  4505   000930  20F4               	addwfc	prodh,w,c
  4506   000932  6EDA               	movwf	fsr2h,c
  4507   000934  C039  FFDE         	movff	??_ADC_vConversionCompleted,postinc2
  4508   000938  C03A  FFDD         	movff	??_ADC_vConversionCompleted+1,postdec2
  4509                           
  4510                           ;adc.c: 43: ADCON0bits.CHS0 = !ADCON0bits.CHS0;
  4511   00093C  B4C2               	btfsc	194,2,c	;volatile
  4512   00093E  D003               	goto	i2u173_40
  4513   000940  6A39               	clrf	??_ADC_vConversionCompleted^0,c
  4514   000942  2A39               	incf	??_ADC_vConversionCompleted^0,f,c
  4515   000944  D002               	goto	i2u174_48
  4516   000946                     i2u173_40:
  4517   000946  FFFF               	dw	65535	; assembler added errata NOP
  4518   000948  6A39               	clrf	??_ADC_vConversionCompleted^0,c
  4519   00094A                     i2u174_48:
  4520   00094A  FFFF               	dw	65535	; assembler added errata NOP
  4521   00094C  4639               	rlncf	??_ADC_vConversionCompleted^0,f,c
  4522   00094E  4639               	rlncf	??_ADC_vConversionCompleted^0,f,c
  4523   000950  50C2               	movf	194,w,c	;volatile
  4524   000952  1839               	xorwf	??_ADC_vConversionCompleted^0,w,c
  4525   000954  0BFB               	andlw	-5
  4526   000956  1839               	xorwf	??_ADC_vConversionCompleted^0,w,c
  4527   000958  6EC2               	movwf	194,c	;volatile
  4528                           
  4529                           ;adc.c: 44: PIR1bits.ADIF = 0;
  4530   00095A  9C9E               	bcf	158,6,c	;volatile
  4531                           
  4532                           ;adc.c: 45: ADCON0bits.GO_nDONE = 1;
  4533   00095C  82C2               	bsf	194,1,c	;volatile
  4534   00095E  0012               	return		;funcret
  4535   000960  FFFF               	dw	65535	; errata NOP
  4536   000962                     __end_of_ADC_vConversionCompleted:
  4537                           	callstack 0
  4538   000962  FFFF               	dw	65535	; assembler added errata NOP
  4539                           
  4540                           	psect	text43
  4541   000000                     __ptext43:
  4542                           	callstack 0
  4543                           
  4544                           	psect	rparam
  4545   000000                     
  4546                           	psect	temp
  4547   000058                     btemp:
  4548                           	callstack 0
  4549   000058                     	ds	1
  4550   000000                     int$flags	set	btemp
  4551   000000                     wtemp8	set	btemp+1
  4552   000000                     ttemp5	set	btemp+1
  4553   000000                     ttemp6	set	btemp+4
  4554   000000                     ttemp7	set	btemp+8
  4555                           
  4556                           	psect	idloc
  4557                           
  4558                           ;Config register IDLOC0 @ 0x200000
  4559                           ;	unspecified, using default values
  4560   200000                     	org	2097152
  4561   200000  FF                 	db	255
  4562                           
  4563                           ;Config register IDLOC1 @ 0x200001
  4564                           ;	unspecified, using default values
  4565   200001                     	org	2097153
  4566   200001  FF                 	db	255
  4567                           
  4568                           ;Config register IDLOC2 @ 0x200002
  4569                           ;	unspecified, using default values
  4570   200002                     	org	2097154
  4571   200002  FF                 	db	255
  4572                           
  4573                           ;Config register IDLOC3 @ 0x200003
  4574                           ;	unspecified, using default values
  4575   200003                     	org	2097155
  4576   200003  FF                 	db	255
  4577                           
  4578                           ;Config register IDLOC4 @ 0x200004
  4579                           ;	unspecified, using default values
  4580   200004                     	org	2097156
  4581   200004  FF                 	db	255
  4582                           
  4583                           ;Config register IDLOC5 @ 0x200005
  4584                           ;	unspecified, using default values
  4585   200005                     	org	2097157
  4586   200005  FF                 	db	255
  4587                           
  4588                           ;Config register IDLOC6 @ 0x200006
  4589                           ;	unspecified, using default values
  4590   200006                     	org	2097158
  4591   200006  FF                 	db	255
  4592                           
  4593                           ;Config register IDLOC7 @ 0x200007
  4594                           ;	unspecified, using default values
  4595   200007                     	org	2097159
  4596   200007  FF                 	db	255
  4597                           
  4598                           	psect	config
  4599                           
  4600                           ; Padding undefined space
  4601   300000                     	org	3145728
  4602   300000  FF                 	db	255
  4603                           
  4604                           ;Config register CONFIG1H @ 0x300001
  4605                           ;	unspecified, using default values
  4606                           ;	Oscillator
  4607                           ;	OSC = 0xF, unprogrammed default
  4608                           ;	Osc. Switch Enable
  4609                           ;	OSCS = 0x1, unprogrammed default
  4610   300001                     	org	3145729
  4611   300001  2F                 	db	47
  4612                           
  4613                           ;Config register CONFIG2L @ 0x300002
  4614                           ;	unspecified, using default values
  4615                           ;	Power Up Timer
  4616                           ;	PWRT = 0x1, unprogrammed default
  4617                           ;	Brown Out Detect
  4618                           ;	BOR = 0x1, unprogrammed default
  4619                           ;	Brown Out Voltage
  4620                           ;	BORV = 0x3, unprogrammed default
  4621   300002                     	org	3145730
  4622   300002  0F                 	db	15
  4623                           
  4624                           ;Config register CONFIG2H @ 0x300003
  4625                           ;	unspecified, using default values
  4626                           ;	Watchdog Timer
  4627                           ;	WDT = 0x1, unprogrammed default
  4628                           ;	Watchdog Postscaler
  4629                           ;	WDTPS = 0xF, unprogrammed default
  4630   300003                     	org	3145731
  4631   300003  1F                 	db	31
  4632                           
  4633                           ;Config register CONFIG3L @ 0x300004
  4634                           ;	unspecified, using default values
  4635   300004                     	org	3145732
  4636   300004  83                 	db	131
  4637                           
  4638                           ;Config register CONFIG3H @ 0x300005
  4639                           ;	unspecified, using default values
  4640                           ;	CCP2 Mux
  4641                           ;	CCP2MX = 0x1, unprogrammed default
  4642                           ;	MCLR enable
  4643                           ;	MCLRE = 0x1, unprogrammed default
  4644   300005                     	org	3145733
  4645   300005  83                 	db	131
  4646                           
  4647                           ;Config register CONFIG4L @ 0x300006
  4648                           ;	unspecified, using default values
  4649                           ;	Stack Overflow Reset
  4650                           ;	STVR = 0x1, unprogrammed default
  4651                           ;	Low Voltage Program
  4652                           ;	LVP = 0x1, unprogrammed default
  4653                           ;	Background Debugger Enable bit
  4654                           ;	DEBUG = 0x1, unprogrammed default
  4655   300006                     	org	3145734
  4656   300006  85                 	db	133
  4657                           
  4658                           ; Padding undefined space
  4659   300007                     	org	3145735
  4660   300007  FF                 	db	255
  4661                           
  4662                           ;Config register CONFIG5L @ 0x300008
  4663                           ;	unspecified, using default values
  4664                           ;	Code Protect 000800-0003FFF
  4665                           ;	CP0 = 0x1, unprogrammed default
  4666                           ;	Code Protect 0004000-007FFF
  4667                           ;	CP1 = 0x1, unprogrammed default
  4668                           ;	Code Protect 008000-00BFFF
  4669                           ;	CP2 = 0x1, unprogrammed default
  4670   300008                     	org	3145736
  4671   300008  0F                 	db	15
  4672                           
  4673                           ;Config register CONFIG5H @ 0x300009
  4674                           ;	unspecified, using default values
  4675                           ;	Code Protect Boot
  4676                           ;	CPB = 0x1, unprogrammed default
  4677                           ;	Data EE Read Protect
  4678                           ;	CPD = 0x1, unprogrammed default
  4679   300009                     	org	3145737
  4680   300009  C0                 	db	192
  4681                           
  4682                           ;Config register CONFIG6L @ 0x30000A
  4683                           ;	unspecified, using default values
  4684                           ;	Table Write Protect 00800-003FFF
  4685                           ;	WRT0 = 0x1, unprogrammed default
  4686                           ;	Table Write Protect 004000-007FFF
  4687                           ;	WRT1 = 0x1, unprogrammed default
  4688                           ;	Table Write Protect 08000-0BFFF
  4689                           ;	WRT2 = 0x1, unprogrammed default
  4690   30000A                     	org	3145738
  4691   30000A  0F                 	db	15
  4692                           
  4693                           ;Config register CONFIG6H @ 0x30000B
  4694                           ;	unspecified, using default values
  4695                           ;	Config. Write Protect
  4696                           ;	WRTC = 0x1, unprogrammed default
  4697                           ;	Table Write Protect Boot
  4698                           ;	WRTB = 0x1, unprogrammed default
  4699                           ;	Data EE Write Protect
  4700                           ;	WRTD = 0x1, unprogrammed default
  4701   30000B                     	org	3145739
  4702   30000B  E0                 	db	224
  4703                           
  4704                           ;Config register CONFIG7L @ 0x30000C
  4705                           ;	unspecified, using default values
  4706                           ;	Table Read Protect 00800-003FFF
  4707                           ;	EBTR0 = 0x1, unprogrammed default
  4708                           ;	Table Read Protect 004000-07FFF
  4709                           ;	EBTR1 = 0x1, unprogrammed default
  4710                           ;	Table Read Protect 08000-0BFFF
  4711                           ;	EBTR2 = 0x1, unprogrammed default
  4712   30000C                     	org	3145740
  4713   30000C  0F                 	db	15
  4714                           
  4715                           ;Config register CONFIG7H @ 0x30000D
  4716                           ;	unspecified, using default values
  4717                           ;	Table Read Protect Boot
  4718                           ;	EBTRB = 0x1, unprogrammed default
  4719   30000D                     	org	3145741
  4720   30000D  40                 	db	64
  4721                           tosu	equ	0xFFF
  4722                           tosh	equ	0xFFE
  4723                           tosl	equ	0xFFD
  4724                           stkptr	equ	0xFFC
  4725                           pclatu	equ	0xFFB
  4726                           pclath	equ	0xFFA
  4727                           pcl	equ	0xFF9
  4728                           tblptru	equ	0xFF8
  4729                           tblptrh	equ	0xFF7
  4730                           tblptrl	equ	0xFF6
  4731                           tablat	equ	0xFF5
  4732                           prodh	equ	0xFF4
  4733                           prodl	equ	0xFF3
  4734                           indf0	equ	0xFEF
  4735                           postinc0	equ	0xFEE
  4736                           postdec0	equ	0xFED
  4737                           preinc0	equ	0xFEC
  4738                           plusw0	equ	0xFEB
  4739                           fsr0h	equ	0xFEA
  4740                           fsr0l	equ	0xFE9
  4741                           wreg	equ	0xFE8
  4742                           indf1	equ	0xFE7
  4743                           postinc1	equ	0xFE6
  4744                           postdec1	equ	0xFE5
  4745                           preinc1	equ	0xFE4
  4746                           plusw1	equ	0xFE3
  4747                           fsr1h	equ	0xFE2
  4748                           fsr1l	equ	0xFE1
  4749                           bsr	equ	0xFE0
  4750                           indf2	equ	0xFDF
  4751                           postinc2	equ	0xFDE
  4752                           postdec2	equ	0xFDD
  4753                           preinc2	equ	0xFDC
  4754                           plusw2	equ	0xFDB
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      87
    BANK0           160      2       6
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    S195s_HeadLightStateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightEventPoll(), 

    headLightSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightEventPoll(), 

    S195s_HeadLightStateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightActiveState(), SGL_HeadLightPasiveState(), 

    headLightSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightActiveState(), SGL_HeadLightPasiveState(), 

    SGL_toggleSideHazardLights@toggle	PTR unsigned char  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState@toggleLights(COMRAM[1]), SGL_BlinkSwitchOnState@toggleLights(COMRAM[1]), 

    SGL_toggleAllHazardLights@toggle	PTR unsigned char  size(2) Largest target is 1
		 -> SGL_BlinkPasiveState@toggleLights(COMRAM[1]), 

    S83s_blinkStateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkEventPoll(), 

    blinkerSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkEventPoll(), 

    S83s_blinkStateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState(), SGL_BlinkSwitchOnState(), SGL_BlinkPasiveState(), 

    blinkerSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState(), SGL_BlinkSwitchOnState(), SGL_BlinkPasiveState(), 

    S26s_stateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoEventPoll(), 

    demoSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoEventPoll(), 

    S26s_stateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoState2(), LIGHTS_DemoState1(), 

    demoSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoState2(), LIGHTS_DemoState1(), 


Critical Paths under _main in COMRAM

    _LIGHTS_BrakeInit->_IOC_vSetOutputPort
    _SGL_BlinkSwitchOnState->_DIAGNOSIS_ActivateError
    _SGL_setSideHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkSwitchOffState->_DIAGNOSIS_ActivateError
    _SGL_toggleSideHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkPasiveState->_DIAGNOSIS_ActivateError
    _SGL_toggleAllHazardLights->_IOC_vSetOutputPort
    _SGL_setAllHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkEventPoll->_IOC_T16GetInputPort
    _LIGHTS_BrakeRun->_DIAGNOSIS_ActivateError
    _SGL_HeadLightPasiveState->_SGL_isNight
    _SGL_isNight->___ftge
    _SGL_HeadLightEventPoll->_IOC_T16GetInputPort
    _SGL_HeadLightActiveState->_DIAGNOSIS_ActivateError
    _DIAGNOSIS_ActivateError->___ftge
    ___lwtoft->___ftpack
    ___ftge->___lwtoft
    _IOC_vSetOutputPort->_PCS_vSetOutputPortD
    _IOC_vSetOutputPort->_PCS_vSetOutputPortE
    _IOC_T16GetInputPort->_PCS_T16GetInputPortC

Critical Paths under _INT_vInterruptHandler in COMRAM

    _INT_vInterruptHandler->_ADC_vConversionCompleted

Critical Paths under _main in BANK0

    _SGL_BlinkersRun->_SGL_BlinkSwitchOffState

Critical Paths under _INT_vInterruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT_vInterruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT_vInterruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT_vInterruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT_vInterruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT_vInterruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT_vInterruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT_vInterruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INT_vInterruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INT_vInterruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INT_vInterruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INT_vInterruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INT_vInterruptHandler in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  131189
                  _SCHED_vInitSystem
              _SCHED_vStartScheduler
 ---------------------------------------------------------------------------------
 (1) _SCHED_vStartScheduler                                0     0      0  131189
                    _TASK_vTask100ms
                     _TASK_vTask10ms
                      _TASK_vTask1ms
                       _TASK_vTask1s
                  _TASK_vTaskAppInit
 ---------------------------------------------------------------------------------
 (2) _TASK_vTaskAppInit                                    0     0      0    6703
                   _LIGHTS_BrakeInit
                _LIGHTS_HeadLampInit
                   _SGL_BlinkersInit
 ---------------------------------------------------------------------------------
 (3) _SGL_BlinkersInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_HeadLampInit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_BrakeInit                                     0     0      0    6703
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask1s                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask1ms                                        0     0      0   95275
                    _LIGHTS_BrakeRun
                    _SGL_BlinkersRun
 ---------------------------------------------------------------------------------
 (3) _SGL_BlinkersRun                                      0     0      0   76381
                 _SGL_BlinkEventPoll *
               _SGL_BlinkPasiveState *
            _SGL_BlinkSwitchOffState *
             _SGL_BlinkSwitchOnState *
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkSwitchOnState                               0     0      0   32084
            _DIAGNOSIS_ActivateError
             _SGL_setAllHazardLights
            _SGL_setSideHazardLights
         _SGL_toggleSideHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_setSideHazardLights                              2     1      1    6889
                                             20 COMRAM     2     1      1
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkSwitchOffState                              2     2      0   18404
                                              0 BANK0      2     2      0
            _DIAGNOSIS_ActivateError
         _SGL_toggleSideHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_toggleSideHazardLights                           3     0      3    7161
                                             20 COMRAM     3     0      3
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkPasiveState                                 0     0      0   24945
            _DIAGNOSIS_ActivateError
             _SGL_setAllHazardLights
          _SGL_toggleAllHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_toggleAllHazardLights                            2     0      2    6911
                                             20 COMRAM     2     0      2
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (5) _SGL_setAllHazardLights                               1     1      0    6791
                                             20 COMRAM     1     1      0
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkEventPoll                                   0     0      0     948
                _IOC_T16GetInputPort
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_BrakeRun                                      0     0      0   18894
            _DIAGNOSIS_ActivateError
                _IOC_T16GetInputPort
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask10ms                                       0     0      0   29211
                 _LIGHTS_HeadLampRun
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_HeadLampRun                                   0     0      0   29211
           _SGL_HeadLightActiveState *
             _SGL_HeadLightEventPoll *
           _SGL_HeadLightPasiveState *
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightPasiveState                             0     0      0   10317
                 _IOC_vSetOutputPort
                        _SGL_isNight
 ---------------------------------------------------------------------------------
 (5) _SGL_isNight                                          2     2      0    3614
                                             27 COMRAM     2     2      0
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightEventPoll                               0     0      0     948
                _IOC_T16GetInputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightActiveState                             0     0      0   17946
            _DIAGNOSIS_ActivateError
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (5) _DIAGNOSIS_ActivateError                              2     2      0   11243
                                             27 COMRAM     2     2      0
                _IOC_T16GetInputPort
                 _IOC_vSetOutputPort
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2977
                                             15 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2727
                                              7 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     592
                                             18 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) _IOC_vSetOutputPort                                   5     2      3    6703
                                             15 COMRAM     5     2      3
                _PCS_vSetOutputPortD
                _PCS_vSetOutputPortE
 ---------------------------------------------------------------------------------
 (5) _PCS_vSetOutputPortE                                  8     7      1     234
                                              7 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (5) _PCS_vSetOutputPortD                                  8     7      1     234
                                              7 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (6) _IOC_T16GetInputPort                                  6     4      2     948
                                             17 COMRAM     6     4      2
                _ADC_u16ReadAdcValue
               _PCS_T16GetInputPortC
 ---------------------------------------------------------------------------------
 (7) _PCS_T16GetInputPortC                                10     8      2     113
                                              7 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (7) _ADC_u16ReadAdcValue                                  6     4      2      91
                                              7 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask100ms                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SCHED_vInitSystem                                    0     0      0       0
                          _ADC_vInit
                          _INT_vInit
                          _PCS_vInit
                          _TIM_vInit
 ---------------------------------------------------------------------------------
 (2) _TIM_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PCS_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INT_vInterruptHandler                                4     4      0       0
                                              3 COMRAM     4     4      0
           _ADC_vConversionCompleted
            _SCHED_vTickFunctionCall
 ---------------------------------------------------------------------------------
 (9) _SCHED_vTickFunctionCall                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _ADC_vConversionCompleted                             3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SCHED_vInitSystem
     _ADC_vInit
     _INT_vInit
     _PCS_vInit
     _TIM_vInit
   _SCHED_vStartScheduler
     _TASK_vTask100ms
     _TASK_vTask10ms
       _LIGHTS_HeadLampRun
         _SGL_HeadLightActiveState *
           _DIAGNOSIS_ActivateError
             _IOC_T16GetInputPort
               _ADC_u16ReadAdcValue
               _PCS_T16GetInputPortC
             _IOC_vSetOutputPort
               _PCS_vSetOutputPortD
               _PCS_vSetOutputPortE
             ___ftge
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
           _IOC_vSetOutputPort
         _SGL_HeadLightEventPoll *
           _IOC_T16GetInputPort
         _SGL_HeadLightPasiveState *
           _IOC_vSetOutputPort
           _SGL_isNight
             ___ftge
             ___lwtoft
     _TASK_vTask1ms
       _LIGHTS_BrakeRun
         _DIAGNOSIS_ActivateError
         _IOC_T16GetInputPort
         _IOC_vSetOutputPort
       _SGL_BlinkersRun
         _SGL_BlinkEventPoll *
           _IOC_T16GetInputPort
         _SGL_BlinkPasiveState *
           _DIAGNOSIS_ActivateError
           _SGL_setAllHazardLights
             _IOC_vSetOutputPort
           _SGL_toggleAllHazardLights
             _IOC_vSetOutputPort
         _SGL_BlinkSwitchOffState *
           _DIAGNOSIS_ActivateError
           _SGL_toggleSideHazardLights
             _IOC_vSetOutputPort
         _SGL_BlinkSwitchOnState *
           _DIAGNOSIS_ActivateError
           _SGL_setAllHazardLights
           _SGL_setSideHazardLights
             _IOC_vSetOutputPort
           _SGL_toggleSideHazardLights
     _TASK_vTask1s
     _TASK_vTaskAppInit
       _LIGHTS_BrakeInit
         _IOC_vSetOutputPort
       _LIGHTS_HeadLampInit
       _SGL_BlinkersInit

 _INT_vInterruptHandler (ROOT)
   _ADC_vConversionCompleted
   _SCHED_vTickFunctionCall

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      39        0.0%
EEDATA             400      0       0       0        0.0%
BITBIGSFRllll      282      0       0      38        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2       6       5        3.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1D      57       1       92.6%
BITBIGSFRhlhh       25      0       0      32        0.0%
BITBIGSFRlh         20      0       0      34        0.0%
BITBIGSFRlllh        D      0       0      37        0.0%
BITBIGSFRhh          D      0       0      31        0.0%
BITBIGSFRllhh        6      0       0      35        0.0%
BITBIGSFRhll         5      0       0      33        0.0%
BITBIGSFRllhl        1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D       6        0.0%
DATA                 0      0      5D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Dec 11 18:33:28 2022

                                                  ?_SGL_BlinkSwitchOnState 0039  
                                                 ?_SGL_BlinkSwitchOffState 0039  
                                         SGL_BlinkSwitchOnState@firstEntry 0056  
                                                                       l59 0B12  
                                                                       l77 0222  
                                                                       l95 0142  
                                                     ?_LIGHTS_HeadLampInit 0039  
                                                                      l211 0C3C  
                                                                      l115 02FC  
                                                                      l209 0C34  
                                                                      l155 0604  
                                                                      l163 04F4  
                                                                      l261 07BC  
                                                                      l270 073E  
                                                                      l264 0806  
                                                                      l416 068A  
                                                                      l168 0464  
                                                                      l273 0788  
                                                                      l259 07B4  
                                                                      l268 0736  
                                                                      l364 0C1A  
                                                                      l277 0978  
                                                                      l279 0980  
                                                                      l691 03C0  
                                                                      l766 070A  
                                                                      _PR2 000FCB  
                                                                      u970 079C  
                                                                      u980 07A0  
                                                                      prod 000FF3  
                                                                      tosl 000FFD  
                                                                      wreg 000FE8  
                                                                     l2200 04CC  
                                                                     l2216 0410  
                                                                     l2420 0184  
                                                                     l2270 0BDA  
                                                                     l2430 01B2  
                                                                     l2512 0106  
                                                                     l2432 01BA  
                                                                     l2408 0160  
                                                                     l2194 049C  
                                                                     l2444 01DE  
                                                                     l2620 08A6  
                                                                     l1910 0A9C  
                                                                     l2198 04BA  
                                                                     l2542 024A  
                                                                     l2472 0070  
                                                                     l2560 02B8  
                                                                     l2632 08CC  
                                                                     l1914 0AB6  
                                                                     l1922 06B4  
                                                                     l2482 0092  
                                                                     l1836 07E6  
                                                                     l1932 0706  
                                                                     l2492 00C4  
                                                                     l2572 02E4  
                                                                     l2556 0298  
                                                                     l1926 06D8  
                                                                     l1870 0350  
                                                                     l1950 0566  
                                                                     l2494 00CA  
                                                                     l2638 08DE  
                                                                     l1848 0768  
                                                                     l1874 0368  
                                                                     l1866 0324  
                                                                     l1876 0388  
                                                                     l1868 0330  
                                                                     l1972 0678  
                                                                     l1948 0534  
                                                                     l1878 0394  
                                                                     l1958 0AF0  
                                                                     l1898 0C04  
                                                                     l1988 05C8  
                                                                     l1998 0600  
                                                  ?_SGL_HeadLightEventPoll 0039  
                                                                     u1014 07DA  
                                                                     u1030 071E  
                                                                     u1015 07D4  
                                                                     u1104 099C  
                                                                     u1024 07FA  
                                                                     u1040 0722  
                                                                     u1105 0996  
                                                                     u1025 07F4  
                                                                     u1114 09B2  
                                                                     u1130 0314  
                                                                     u1115 09AC  
                                                                     u1310 0638  
                                                                     u2110 02F2  
                                                                     u1074 075C  
                                                                     u1170 03A0  
                                                                     u1075 0756  
                                                                     u1084 077C  
                                                                     u1085 0776  
                                                                     u2207 0B98  
                                                                     u2138 09D0  
                                                                     u2139 09E8  
                                                                     u2158 09FA  
                                                                     u2159 0A12  
                                                                     u1718 0A50  
                                                                     u1719 0A68  
                                                                     u1960 01EC  
                                                                     u1698 0A26  
                                                                     u1699 0A3E  
                                                                     _TMR2 000FCC  
                                                 ??_SGL_setAllHazardLights 004D  
                                                                     _main 0E3A  
                                                             ___ftpack@arg 0040  
                                                             ___ftpack@exp 0043  
                                                                     fsr2h 000FDA  
                                                                     indf2 000FDF  
                                                                     fsr2l 000FD9  
                                                                     btemp 0058  
                                           PCS_vSetOutputPortD@u8BitNumber 0046  
                                                                     prodh 000FF4  
                                                                     prodl 000FF3  
                                                                     start 004C  
                                                    ?_PCS_T16GetInputPortC 0040  
                                           __end_of_SGL_BlinkSwitchOnState 0148  
                                                          _LIGHTS_BrakeRun 0BA4  
                                                             ___param_bank 000000  
                                                    _INT_vInterruptHandler 0008  
                                         __end_of_SGL_HeadLightPasiveState 04FA  
                                                    ??_LIGHTS_HeadLampInit 0040  
                                          __end_of_SCHED_vTickFunctionCall 0E14  
                                                                    ?_main 0039  
                                                       _IOC_vSetOutputPort 0BE2  
                                                                    _T2CON 000FCA  
                                                                    i2l238 0034  
                                                                    _PORTC 000F82  
                                                                    _PORTD 000F83  
                                                                    _PORTE 000F84  
                                                                    _TRISD 000F95  
                                                         ?_SGL_BlinkersRun 0039  
                                                      ?_IOC_vSetOutputPort 0048  
                                           __end_of_SGL_HeadLightEventPoll 0D8E  
                                                            ___ftpack@sign 0044  
                                                                    pclath 000FFA  
                                                                    tablat 000FF5  
                                                                    ttemp5 0059  
                                                                    ttemp6 005C  
                                                                    ttemp7 0060  
                                                                    status 000FD8  
                                                        __end_of_ADC_vInit 0BA4  
                                                                    wtemp8 0059  
                                           PCS_vSetOutputPortE@u8BitNumber 0046  
                                          __end_of_SGL_BlinkSwitchOffState 0302  
                                                         _LIGHTS_BrakeInit 0DD2  
                                                          __initialization 0C5E  
                                                     ??_IOC_vSetOutputPort 004B  
                                                             __end_of_main 0E48  
                                            __end_of_SCHED_vStartScheduler 08FE  
                                                                   ??_main 0056  
                                                            __activetblptr 000002  
                                      PCS_vSetOutputPortD@u8BitNumberValue 0047  
                                                    __end_of_TASK_vTask1ms 0E56  
                                                                   _ADRESH 000FC4  
                                                                   _ADRESL 000FC3  
                                      SGL_BlinkSwitchOffState@toggleLights 0036  
                                                         __end_of___ftpack 03C6  
                                                                   i2l2390 0026  
                                                         __end_of___lwtoft 0DB6  
                                                  __end_of_LIGHTS_BrakeRun 0BE2  
                                                   ??_PCS_T16GetInputPortC 0042  
                                                        __end_of_INT_vInit 0E28  
                                                        __end_of_PCS_vInit 0DD2  
                                               __end_of_LIGHTS_HeadLampRun 0A6E  
                                                   ?_INT_vInterruptHandler 0039  
                                                        ?_SGL_BlinkersInit 0039  
                                                                   ___ftge 0690  
                                       IOC_vSetOutputPort@u16ChannelSelect 0048  
                                                                   _demoSM 0016  
                                             ??_SGL_toggleSideHazardLights 0050  
                                                       ??_SGL_BlinkersInit 0040  
                                                                   clear_0 0C86  
                                                                   isa$std 000001  
                                                 _SGL_HeadLightPasiveState 046A  
                                                        __end_of_TIM_vInit 0D3A  
                                            SGL_BlinkSwitchOffState@cycles 0034  
                                                             __pdataCOMRAM 0056  
                                                ?_ADC_vConversionCompleted 0039  
                                      IOC_T16GetInputPort@u16ChannelSelect 004A  
                                                             ?_SGL_isNight 0039  
                                                                   tblptrh 000FF7  
                                                                   tblptrl 000FF6  
                                                                   tblptru 000FF8  
                                               ??_SGL_HeadLightActiveState 0056  
                                              SGL_setSideHazardLights@side 004D  
                                              __end_of_IOC_T16GetInputPort 0AC4  
                                                        _SCHED_vInitSystem 0DE8  
                                                               __accesstop 0060  
                                                  __end_of__initialization 0C8C  
                                                        _TASK_vTaskAppInit 0E28  
                                              __end_of_PCS_vSetOutputPortD 080C  
                                              __end_of_PCS_vSetOutputPortE 078E  
                                                               ___ftge@ff1 004B  
                                                               ___ftge@ff2 004E  
                                                        _LIGHTS_DemoState1 000000  
                                                        _LIGHTS_DemoState2 000000  
                                                       ?_SCHED_vInitSystem 0039  
                                                            ___rparam_used 000001  
                                                       ?_TASK_vTaskAppInit 0039  
                                                           __pcstackCOMRAM 0039  
                                                      ??_SCHED_vInitSystem 0040  
                                                           _TASK_vTask10ms 0E56  
                                                      ??_TASK_vTaskAppInit 004D  
                                                   _SGL_setAllHazardLights 0B18  
                                                               ___lwtoft@c 0048  
                                                  _SGL_setSideHazardLights 0AC4  
                                       DIAGNOSIS_ActivateError@sensorValue 0054  
                                             SGL_isNight@currentLightLevel 0054  
                                                        ??_TASK_vTask100ms 0040  
                                                __end_of_SCHED_vInitSystem 0DFE  
                                                __end_of_TASK_vTaskAppInit 0E3A  
                                                               __pbssBANK0 0060  
                                                         ?_LIGHTS_BrakeRun 0039  
                                         SGL_BlinkPasiveState@toggleLights 0038  
                                      PCS_vSetOutputPortE@u8BitNumberValue 0047  
                                                   __end_of_TASK_vTask10ms 0E60  
                                                                  ?___ftge 004B  
                                                   LIGHTS_BrakeRun@counter 0033  
                                                 ?_DIAGNOSIS_ActivateError 0039  
                                                                ?___ftpack 0040  
                                                            ?_TASK_vTask1s 0039  
                                                                ?___lwtoft 0048  
                                                 __end_of_LIGHTS_BrakeInit 0DE8  
                                               __end_of_SGL_BlinkEventPoll 0D06  
                                              __end_of_LIGHTS_HeadLampInit 0D64  
                                                                  __Hparam 0000  
                                                                  __Lparam 0000  
                                                                _ADC_vInit 0B60  
                                                          ?_TASK_vTask10ms 0039  
                                       __end_of_SGL_toggleSideHazardLights 0582  
                                               _SGL_toggleSideHazardLights 04FA  
                                         IOC_vSetOutputPort@u16ChannelMask 004B  
                                                ??_SGL_setSideHazardLights 004E  
                                                           ??_TASK_vTask1s 0040  
                                                                  __pcinit 0C5E  
                                                               ??___ftpack 0045  
                                                                  __ramtop 1000  
                                                                  __ptext0 0E3A  
                                                                  __ptext1 0888  
                                                                  __ptext2 0E28  
                                                                  __ptext3 0C9A  
                                                                  __ptext4 0D3A  
                                                                  __ptext5 0DD2  
                                                                  __ptext6 0E60  
                                                                  __ptext7 0E48  
                                                                  __ptext8 09C2  
                                                                  __ptext9 0148  
                                                               ??___lwtoft 004B  
                                                  _PCS_vSetOutputPortD$851 0043  
                                                  _PCS_vSetOutputPortE$857 0043  
                                                                _T2CONbits 000FCA  
                                                        _g_lightStateFrana 0024  
                                           SGL_BlinkSwitchOffState@counter 0028  
                                                     end_of_initialization 0C8C  
                                                            _sched_bTicked 001E  
                                                            _sched_gTick1s 0020  
                                                  _SCHED_vTickFunctionCall 0DFE  
                                                            __Lmediumconst 0000  
                                                  ??_INT_vInterruptHandler 003C  
                                                               ?_ADC_vInit 0039  
                                       SGL_BlinkSwitchOnState@toggleLights 0037  
                                               ??_SGL_HeadLightPasiveState 0056  
                                         __end_of_ADC_vConversionCompleted 0962  
                                          __end_of_DIAGNOSIS_ActivateError 0690  
                                                      _ADC_u16ReadAdcValue 0C20  
                                                                  postdec2 000FDD  
                                               ?_SGL_toggleAllHazardLights 004D  
                                                                _INT_vInit 0E14  
                                                                  postinc0 000FEE  
                                                                  postinc2 000FDE  
                                           SGL_BlinkPasiveState@firstEntry 0057  
                                                                _PCS_vInit 0DB6  
                                             SGL_setSideHazardLights@value 004E  
                                                       _LIGHTS_HeadLampRun 0A18  
                                                    _SCHED_vStartScheduler 0888  
                                                  _SGL_BlinkSwitchOffState 0228  
                                                                _TRISAbits 000F92  
                                                                _TRISCbits 000F94  
                                                                _TRISEbits 000F96  
                                                                _TIM_vInit 0D06  
                                                     ?_ADC_u16ReadAdcValue 0040  
                                                      ?_LIGHTS_HeadLampRun 0039  
                                                 ??_SGL_BlinkSwitchOnState 0056  
                                                  _ADC_u16ReadAdcValue$519 0042  
                                                  ?_SGL_setAllHazardLights 0039  
                                                               ?_INT_vInit 0039  
                                                     ??_LIGHTS_HeadLampRun 0056  
                                        __end_of_SGL_toggleAllHazardLights 0888  
                                          SGL_toggleAllHazardLights@toggle 004D  
                                                           __end_of___ftge 0710  
                                                               ?_PCS_vInit 0039  
                                                          _TASK_vTask100ms 0E66  
                                                            __pidataCOMRAM 0E6C  
                                                 ??_SGL_HeadLightEventPoll 0050  
                                              SGL_BlinkPasiveState@counter 002C  
                                                      start_initialization 0C5E  
                                                    ??_ADC_u16ReadAdcValue 0042  
                                                               ?_TIM_vInit 0039  
                                                     SGL_isNight@prevState 0032  
                                             __end_of_SGL_BlinkPasiveState 0228  
                                                ??_SCHED_vTickFunctionCall 0039  
                                                         _sched_gTick100ms 0030  
                                                     __end_of_TASK_vTask1s 0E66  
                                           __end_of_SGL_setAllHazardLights 0B60  
                                                              ??_ADC_vInit 0040  
                                                ?_SGL_HeadLightActiveState 0039  
                                                                 ??___ftge 0051  
                                                        ??_SGL_BlinkersRun 0056  
                                                 _ADC_vConversionCompleted 08FE  
                                                ??_SGL_BlinkSwitchOffState 0064  
                                                   ?_SCHED_vStartScheduler 0039  
                                               PCS_vSetOutputPortD@u8Value 0040  
                                                              __pbssCOMRAM 0001  
                                               PCS_vSetOutputPortE@u8Value 0040  
                                     PCS_T16GetInputPortC@u8BitNumberValue 0049  
                                                            __pcstackBANK0 0064  
                                                        ?_LIGHTS_BrakeInit 0039  
                                                            _TASK_vTask1ms 0E48  
                                              IOC_T16GetInputPort@pinValue 004C  
                                                              _headLightSM 000D  
                                                       ??_LIGHTS_BrakeInit 004D  
                                                         ??_TASK_vTask10ms 0056  
                                                  __end_of_TASK_vTask100ms 0E6C  
                                                       _SGL_BlinkEventPoll 0CD0  
                                                                __pintcode 0008  
                                                                _blinkerSM 0001  
                                                              ??_INT_vInit 0040  
                                              ?_SGL_toggleSideHazardLights 004D  
                                                              ??_PCS_vInit 0040  
                                                      ?_SGL_BlinkEventPoll 0039  
                                               SGL_BlinkSwitchOnState@side 0035  
                                                         _SGL_BlinkersInit 0C9A  
                                                              ??_TIM_vInit 0040  
                                                           ?_TASK_vTask1ms 0039  
                                                     ??_SGL_BlinkEventPoll 0050  
                                                                 _IPR1bits 000F9F  
                                                                 _PIE1bits 000F9D  
                                            __end_of_INT_vInterruptHandler 004C  
                                                                 i2u172_40 091E  
                                                                 i2u173_40 0946  
                                                                 i2u172_48 0922  
                                                                 i2u174_48 094A  
                                                                 _PIR1bits 000F9E  
                                            PCS_vSetOutputPortD@u8BitValue 0045  
                                          PCS_T16GetInputPortC@u8BitNumber 0048  
                                              ??_SGL_toggleAllHazardLights 004F  
                                                     _SGL_BlinkPasiveState 0148  
                                        ADC_u16ReadAdcValue@U8ChannelValue 0044  
                                                   _SGL_BlinkSwitchOnState 0050  
                                                               _ADCON0bits 000FC2  
                                                               _ADCON1bits 000FC1  
                                                               _ADCON2bits 000FC0  
                                                            ??_SGL_isNight 0054  
                                           SGL_toggleSideHazardLights@side 004F  
                                            PCS_vSetOutputPortE@u8BitValue 0045  
                                                   _SGL_HeadLightEventPoll 0D64  
                                             ADC_u16ReadAdcValue@U8Channel 0045  
                                                          _sched_gTick10ms 0031  
                                               __end_of_IOC_vSetOutputPort 0C20  
                                                                 __Hrparam 0000  
                                                         ?_TASK_vTask100ms 0039  
                                                                 __Lrparam 0000  
                                                 ?_SGL_setSideHazardLights 004D  
                                                    ?_SGL_BlinkPasiveState 0039  
                                              SGL_BlinkSwitchOffState@side 0026  
                                        IOC_T16GetInputPort@u16ChannelMask 004E  
                                                                 ___ftpack 0302  
                                                             _TASK_vTask1s 0E60  
                                                                 ___lwtoft 0D8E  
                                                        ??_LIGHTS_BrakeRun 0056  
                                             __end_of_PCS_T16GetInputPortC 09C2  
                                                          ??_TASK_vTask1ms 0056  
                                                ?_SGL_HeadLightPasiveState 0039  
                                                      _IOC_T16GetInputPort 0A6E  
                                                                 __ptext10 0228  
                                                  _DIAGNOSIS_ActivateError 060A  
                                                                 __ptext11 0050  
                                                                 __ptext20 03C6  
                                                                 __ptext12 0AC4  
                                                                 __ptext21 046A  
                                                                 __ptext13 04FA  
                                                                 __ptext30 078E  
                                                                 __ptext22 0582  
                                                                 __ptext14 080C  
                                                                 __ptext31 0A6E  
                                                                 __ptext23 0D64  
                                                                 __ptext15 0B18  
                                                                 __ptext32 0964  
                                                                 __ptext24 060A  
                                                                 __ptext16 0CD0  
                                                                 __ptext41 0DFE  
                                                                 __ptext33 0C20  
                                                                 __ptext25 0D8E  
                                                                 __ptext17 0BA4  
                                                                 __ptext42 08FE  
                                                                 __ptext34 0E66  
                                                                 __ptext26 0302  
                                                                 __ptext18 0E56  
                                                                 __ptext43 0000  
                                                                 __ptext35 0DE8  
                                                                 __ptext27 0690  
                                                                 __ptext19 0A18  
                                                                 __ptext36 0D06  
                                                                 __ptext28 0BE2  
                                                                 __ptext37 0DB6  
                                                                 __ptext29 0710  
                                                                 __ptext38 0E14  
                                                                 __ptext39 0B60  
                                                _SGL_toggleAllHazardLights 080C  
                                         SGL_toggleSideHazardLights@toggle 004D  
                                         __end_of_SGL_HeadLightActiveState 046A  
                                                      _PCS_vSetOutputPortD 078E  
                                                      _PCS_vSetOutputPortE 0710  
                                                      __end_of_SGL_isNight 060A  
                                                          _SGL_BlinkersRun 09C2  
                                               ??_ADC_vConversionCompleted 0039  
                                                     ?_IOC_T16GetInputPort 004A  
                                                                 isa$xinst 000000  
                                                     ?_PCS_vSetOutputPortD 0040  
                                                     ?_PCS_vSetOutputPortE 0040  
                                                                 int$flags 0058  
                                                  ??_SCHED_vStartScheduler 0056  
                                            SGL_BlinkSwitchOnState@counter 002A  
                                                       _g_lightStateLumini 0022  
                                              __end_of_ADC_u16ReadAdcValue 0C5E  
                                                         _g_sglStareSemnal 002E  
                                                               _INTCONbits 000FF2  
                                                                 intlevel2 0E6E  
                                          __end_of_SGL_setSideHazardLights 0B18  
                                                IOC_vSetOutputPort@u8Value 004A  
                                                    ??_IOC_T16GetInputPort 004C  
                                                 __end_of_SGL_BlinkersInit 0CD0  
                                                   ??_SGL_BlinkPasiveState 0056  
                                                    ??_PCS_vSetOutputPortD 0041  
                                                    ??_PCS_vSetOutputPortE 0041  
                                                         _au16AdcReadValue 0060  
                                              SGL_setAllHazardLights@value 004D  
                                                ??_DIAGNOSIS_ActivateError 0054  
                                                 ?_SCHED_vTickFunctionCall 0039  
                                                              _SGL_isNight 0582  
                                                  __end_of_SGL_BlinkersRun 0A18  
                                                      _LIGHTS_HeadLampInit 0D3A  
                                                 _PCS_T16GetInputPortC$861 0046  
                                                 _SGL_HeadLightActiveState 03C6  
                                                     _PCS_T16GetInputPortC 0964  
                                                     _LIGHTS_DemoEventPoll 000000  
