

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 15 18:31:25 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F6585
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    62                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    63   000000                     
    64                           ; Version 2.40
    65                           ; Generated 04/07/2022 GMT
    66                           ; 
    67                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution. Publication is not required when
    81                           ;        this file is used in an embedded application.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F6585 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99   000000                     
   100                           	psect	idataCOMRAM
   101   001EB6                     __pidataCOMRAM:
   102                           	callstack 0
   103                           
   104                           ;initializer for SGL_BlinkSwitchOnState@firstEntry
   105   001EB6  01                 	db	1
   106                           
   107                           ;initializer for SGL_BlinkPasiveState@firstEntry
   108   001EB7  01                 	db	1
   109   000000                     _PR2	set	4043
   110   000000                     _TMR2	set	4044
   111   000000                     _T2CON	set	4042
   112   000000                     _SPBRGH	set	3967
   113   000000                     _PORTC	set	3970
   114   000000                     _PORTD	set	3971
   115   000000                     _TRISAbits	set	3986
   116   000000                     _PIE1bits	set	3997
   117   000000                     _PIR1bits	set	3998
   118   000000                     _ADCON2bits	set	4032
   119   000000                     _ADCON1bits	set	4033
   120   000000                     _ADCON0bits	set	4034
   121   000000                     _ADRESL	set	4035
   122   000000                     _ADRESH	set	4036
   123   000000                     _T2CONbits	set	4042
   124   000000                     _INTCONbits	set	4082
   125   000000                     _RCSTAbits	set	4011
   126   000000                     _TXSTAbits	set	4012
   127   000000                     _SPBRG	set	4015
   128   000000                     _IPR1bits	set	3999
   129   000000                     _TRISCbits	set	3988
   130   000000                     _TRISEbits	set	3990
   131   000000                     _TRISD	set	3989
   132   000000                     _PORTE	set	3972
   133   000000                     _TXREG	set	4013
   134                           
   135                           	psect	smallconst
   136   001000                     __psmallconst:
   137                           	callstack 0
   138   001000  00                 	db	0
   139   001001                     STR_1:
   140   001001  49                 	db	73	;'I'
   141   001002  6E                 	db	110	;'n'
   142   001003  69                 	db	105	;'i'
   143   001004  74                 	db	116	;'t'
   144   001005  20                 	db	32
   145   001006  73                 	db	115	;'s'
   146   001007  79                 	db	121	;'y'
   147   001008  73                 	db	115	;'s'
   148   001009  74                 	db	116	;'t'
   149   00100A  65                 	db	101	;'e'
   150   00100B  6D                 	db	109	;'m'
   151   00100C  20                 	db	32
   152   00100D  6C                 	db	108	;'l'
   153   00100E  75                 	db	117	;'u'
   154   00100F  6D                 	db	109	;'m'
   155   001010  69                 	db	105	;'i'
   156   001011  6E                 	db	110	;'n'
   157   001012  69                 	db	105	;'i'
   158   001013  21                 	db	33
   159   001014  0A                 	db	10
   160   001015  0D                 	db	13
   161   001016  00                 	db	0
   162   001017  00                 	db	0	; dummy byte at the end
   163   000000                     
   164                           ; #config settings
   165                           
   166                           	psect	cinit
   167   001D1C                     __pcinit:
   168                           	callstack 0
   169   001D1C                     start_initialization:
   170                           	callstack 0
   171   001D1C                     __initialization:
   172                           	callstack 0
   173                           
   174                           ; Initialize objects allocated to COMRAM (2 bytes)
   175                           ; load TBLPTR registers with __pidataCOMRAM
   176   001D1C  0EB6               	movlw	low __pidataCOMRAM
   177   001D1E  6EF6               	movwf	tblptrl,c
   178   001D20  0E1E               	movlw	high __pidataCOMRAM
   179   001D22  6EF7               	movwf	tblptrh,c
   180   001D24  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   181   001D26  6EF8               	movwf	tblptru,c
   182   001D28  0009               	tblrd		*+	;fetch initializer
   183   001D2A  CFF5 F054          	movff	tablat,__pdataCOMRAM
   184   001D2E  0009               	tblrd		*+	;fetch initializer
   185   001D30  CFF5 F055          	movff	tablat,__pdataCOMRAM+1
   186                           
   187                           ; Clear objects allocated to COMRAM (52 bytes)
   188   001D34  EE00  F001         	lfsr	0,__pbssCOMRAM
   189   001D38  0E34               	movlw	52
   190   001D3A                     clear_0:
   191   001D3A  6AEE               	clrf	postinc0,c
   192   001D3C  06E8               	decf	wreg,f,c
   193   001D3E  E1FD               	bnz	clear_0
   194   001D40                     end_of_initialization:
   195                           	callstack 0
   196   001D40                     __end_of__initialization:
   197                           	callstack 0
   198   001D40  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   199   001D42  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   200   001D44  0E00               	movlw	low (__Lmediumconst shr (0+16))
   201   001D46  6EF8               	movwf	tblptru,c
   202   001D48  0100               	movlb	0
   203   001D4A  EFE5  F00E         	goto	_main	;jump to C main() function
   204                           
   205                           	psect	bssCOMRAM
   206   000001                     __pbssCOMRAM:
   207                           	callstack 0
   208   000001                     _blinkerSM:
   209                           	callstack 0
   210   000001                     	ds	12
   211   00000D                     _headLightSM:
   212                           	callstack 0
   213   00000D                     	ds	9
   214   000016                     _au16AdcReadValue:
   215                           	callstack 0
   216   000016                     	ds	4
   217   00001A                     _sched_bTicked:
   218                           	callstack 0
   219   00001A                     	ds	2
   220   00001C                     _sched_gTick1s:
   221                           	callstack 0
   222   00001C                     	ds	2
   223   00001E                     _g_lightStateLumini:
   224                           	callstack 0
   225   00001E                     	ds	2
   226   000020                     _g_lightStateFrana:
   227                           	callstack 0
   228   000020                     	ds	2
   229   000022                     SGL_BlinkSwitchOffState@side:
   230                           	callstack 0
   231   000022                     	ds	2
   232   000024                     SGL_BlinkSwitchOffState@counter:
   233                           	callstack 0
   234   000024                     	ds	2
   235   000026                     SGL_BlinkSwitchOnState@counter:
   236                           	callstack 0
   237   000026                     	ds	2
   238   000028                     SGL_BlinkPasiveState@counter:
   239                           	callstack 0
   240   000028                     	ds	2
   241   00002A                     _g_sglStareSemnal:
   242                           	callstack 0
   243   00002A                     	ds	2
   244   00002C                     _sched_gTick100ms:
   245                           	callstack 0
   246   00002C                     	ds	1
   247   00002D                     _sched_gTick10ms:
   248                           	callstack 0
   249   00002D                     	ds	1
   250   00002E                     SGL_isNight@prevState:
   251                           	callstack 0
   252   00002E                     	ds	1
   253   00002F                     LIGHTS_BrakeRun@counter:
   254                           	callstack 0
   255   00002F                     	ds	1
   256   000030                     SGL_BlinkSwitchOffState@cycles:
   257                           	callstack 0
   258   000030                     	ds	1
   259   000031                     SGL_BlinkSwitchOnState@side:
   260                           	callstack 0
   261   000031                     	ds	1
   262   000032                     SGL_BlinkSwitchOffState@toggleLights:
   263                           	callstack 0
   264   000032                     	ds	1
   265   000033                     SGL_BlinkSwitchOnState@toggleLights:
   266                           	callstack 0
   267   000033                     	ds	1
   268   000034                     SGL_BlinkPasiveState@toggleLights:
   269                           	callstack 0
   270   000034                     	ds	1
   271                           
   272                           	psect	dataCOMRAM
   273   000054                     __pdataCOMRAM:
   274                           	callstack 0
   275   000054                     SGL_BlinkSwitchOnState@firstEntry:
   276                           	callstack 0
   277   000054                     	ds	1
   278   000055                     SGL_BlinkPasiveState@firstEntry:
   279                           	callstack 0
   280   000055                     	ds	1
   281                           
   282                           	psect	cstackCOMRAM
   283   000035                     __pcstackCOMRAM:
   284                           	callstack 0
   285   000035                     ??_ADC_vConversionCompleted:
   286   000035                     
   287                           ; 1 bytes @ 0x0
   288   000035                     	ds	3
   289   000038                     ??_INT_vInterruptHandler:
   290                           
   291                           ; 1 bytes @ 0x3
   292   000038                     	ds	4
   293   00003C                     ?_ADC_u16ReadAdcValue:
   294                           	callstack 0
   295   00003C                     ?_PCS_T16GetInputPortC:
   296                           	callstack 0
   297   00003C                     ?___ftpack:
   298                           	callstack 0
   299   00003C                     PCS_vSetOutputPortD@u8Value:
   300                           	callstack 0
   301   00003C                     PCS_vSetOutputPortE@u8Value:
   302                           	callstack 0
   303   00003C                     RS232_vSendDataByte@u8DataByte:
   304                           	callstack 0
   305   00003C                     ___ftpack@arg:
   306                           	callstack 0
   307                           
   308                           ; 3 bytes @ 0x7
   309   00003C                     	ds	1
   310   00003D                     ??_PCS_vSetOutputPortD:
   311   00003D                     ??_PCS_vSetOutputPortE:
   312   00003D                     RS232_vSendMessage@u8Message:
   313                           	callstack 0
   314                           
   315                           ; 2 bytes @ 0x8
   316   00003D                     	ds	1
   317   00003E                     ??_PCS_T16GetInputPortC:
   318   00003E                     _ADC_u16ReadAdcValue$501:
   319                           	callstack 0
   320                           
   321                           ; 2 bytes @ 0x9
   322   00003E                     	ds	1
   323   00003F                     ??_RS232_vSendMessage:
   324   00003F                     ___ftpack@exp:
   325                           	callstack 0
   326   00003F                     _PCS_vSetOutputPortD$833:
   327                           	callstack 0
   328   00003F                     _PCS_vSetOutputPortE$839:
   329                           	callstack 0
   330                           
   331                           ; 2 bytes @ 0xA
   332   00003F                     	ds	1
   333   000040                     ADC_u16ReadAdcValue@U8ChannelValue:
   334                           	callstack 0
   335   000040                     ___ftpack@sign:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0xB
   339   000040                     	ds	1
   340   000041                     ??___ftpack:
   341   000041                     ADC_u16ReadAdcValue@U8Channel:
   342                           	callstack 0
   343   000041                     PCS_vSetOutputPortD@u8BitValue:
   344                           	callstack 0
   345   000041                     PCS_vSetOutputPortE@u8BitValue:
   346                           	callstack 0
   347   000041                     RS232_vSendMessage@u8Count:
   348                           	callstack 0
   349                           
   350                           ; 1 bytes @ 0xC
   351   000041                     	ds	1
   352   000042                     PCS_vSetOutputPortD@u8BitNumber:
   353                           	callstack 0
   354   000042                     PCS_vSetOutputPortE@u8BitNumber:
   355                           	callstack 0
   356   000042                     _PCS_T16GetInputPortC$843:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0xD
   360   000042                     	ds	1
   361   000043                     PCS_vSetOutputPortD@u8BitNumberValue:
   362                           	callstack 0
   363   000043                     PCS_vSetOutputPortE@u8BitNumberValue:
   364                           	callstack 0
   365                           
   366                           ; 1 bytes @ 0xE
   367   000043                     	ds	1
   368   000044                     ?___lwtoft:
   369                           	callstack 0
   370   000044                     PCS_T16GetInputPortC@u8BitNumber:
   371                           	callstack 0
   372   000044                     IOC_vSetOutputPort@u16ChannelSelect:
   373                           	callstack 0
   374   000044                     ___lwtoft@c:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0xF
   378   000044                     	ds	1
   379   000045                     PCS_T16GetInputPortC@u8BitNumberValue:
   380                           	callstack 0
   381                           
   382                           ; 1 bytes @ 0x10
   383   000045                     	ds	1
   384   000046                     ?_IOC_T16GetInputPort:
   385                           	callstack 0
   386   000046                     IOC_vSetOutputPort@u8Value:
   387                           	callstack 0
   388   000046                     IOC_T16GetInputPort@u16ChannelSelect:
   389                           	callstack 0
   390                           
   391                           ; 2 bytes @ 0x11
   392   000046                     	ds	1
   393   000047                     IOC_vSetOutputPort@u16ChannelMask:
   394                           	callstack 0
   395   000047                     ___ftge@ff1:
   396                           	callstack 0
   397                           
   398                           ; 3 bytes @ 0x12
   399   000047                     	ds	1
   400   000048                     IOC_T16GetInputPort@pinValue:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x13
   404   000048                     	ds	1
   405   000049                     SGL_setAllHazardLights@value:
   406                           	callstack 0
   407   000049                     SGL_setSideHazardLights@side:
   408                           	callstack 0
   409   000049                     SGL_toggleAllHazardLights@toggle:
   410                           	callstack 0
   411   000049                     SGL_toggleSideHazardLights@toggle:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x14
   415   000049                     	ds	1
   416   00004A                     SGL_setSideHazardLights@value:
   417                           	callstack 0
   418   00004A                     IOC_T16GetInputPort@u16ChannelMask:
   419                           	callstack 0
   420   00004A                     ___ftge@ff2:
   421                           	callstack 0
   422                           
   423                           ; 3 bytes @ 0x15
   424   00004A                     	ds	1
   425   00004B                     SGL_toggleSideHazardLights@side:
   426                           	callstack 0
   427                           
   428                           ; 1 bytes @ 0x16
   429   00004B                     	ds	1
   430   00004C                     
   431                           ; 1 bytes @ 0x17
   432   00004C                     	ds	1
   433   00004D                     ??___ftge:
   434                           
   435                           ; 1 bytes @ 0x18
   436   00004D                     	ds	3
   437   000050                     SGL_isNight@currentLightLevel:
   438                           	callstack 0
   439   000050                     DIAGNOSIS_ActivateError@sensorValue:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0x1B
   443   000050                     	ds	2
   444   000052                     ??_SGL_BlinkSwitchOffState:
   445   000052                     
   446                           ; 1 bytes @ 0x1D
   447   000052                     	ds	2
   448   000054                     
   449                           ; 1 bytes @ 0x1F
   450 ;;
   451 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   452 ;;
   453 ;; *************** function _main *****************
   454 ;; Defined at:
   455 ;;		line 9 in file "main.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;		None
   458 ;; Auto vars:     Size  Location     Type
   459 ;;		None
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   473 ;;Total ram usage:        0 bytes
   474 ;; Hardware stack levels required when called: 9
   475 ;; This function calls:
   476 ;;		_RS232_vInit
   477 ;;		_RS232_vSendMessage
   478 ;;		_SCHED_vInitSystem
   479 ;;		_SCHED_vStartScheduler
   480 ;; This function is called by:
   481 ;;		Startup code after reset
   482 ;; This function uses a non-reentrant model
   483 ;;
   484                           
   485                           	psect	text0
   486   001DCA                     __ptext0:
   487                           	callstack 0
   488   001DCA                     _main:
   489                           	callstack 0
   490   001DCA  FFFF               	dw	65535	; assembler added errata NOP
   491                           
   492                           ;main.c: 11: RS232_vInit();
   493                           
   494                           ;incstack = 0
   495   001DCC  EC2D  F00F         	call	_RS232_vInit	;wreg free
   496                           
   497                           ;main.c: 12: RS232_vSendMessage("Init system lumini!\n\r");
   498   001DD0  0E01               	movlw	low STR_1
   499   001DD2  6E3D               	movwf	RS232_vSendMessage@u8Message^0,c
   500   001DD4  0E10               	movlw	high STR_1
   501   001DD6  6E3E               	movwf	(RS232_vSendMessage@u8Message+1)^0,c
   502   001DD8  ECC2  F00C         	call	_RS232_vSendMessage	;wreg free
   503                           
   504                           ;main.c: 13: SCHED_vInitSystem();
   505   001DDC  EC0D  F00F         	call	_SCHED_vInitSystem	;wreg free
   506                           
   507                           ;main.c: 14: SCHED_vStartScheduler();
   508   001DE0  EC26  F00C         	call	_SCHED_vStartScheduler	;wreg free
   509   001DE4  EF26  F000         	goto	start
   510   001DE8                     __end_of_main:
   511                           	callstack 0
   512                           
   513 ;; *************** function _SCHED_vStartScheduler *****************
   514 ;; Defined at:
   515 ;;		line 29 in file "sched.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;		None
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   533 ;;Total ram usage:        0 bytes
   534 ;; Hardware stack levels used: 1
   535 ;; Hardware stack levels required when called: 8
   536 ;; This function calls:
   537 ;;		_TASK_vTask100ms
   538 ;;		_TASK_vTask10ms
   539 ;;		_TASK_vTask1ms
   540 ;;		_TASK_vTask1s
   541 ;;		_TASK_vTaskAppInit
   542 ;; This function is called by:
   543 ;;		_main
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           	psect	text1
   548   00184C                     __ptext1:
   549                           	callstack 0
   550   00184C                     _SCHED_vStartScheduler:
   551                           	callstack 0
   552   00184C  FFFF               	dw	65535	; assembler added errata NOP
   553                           
   554                           ;sched.c: 31: sched_gTick10ms = 0;
   555                           
   556                           ;incstack = 0
   557   00184E  0E00               	movlw	0
   558   001850  6E2D               	movwf	_sched_gTick10ms^0,c
   559                           
   560                           ;sched.c: 32: sched_gTick100ms = 0;
   561   001852  0E00               	movlw	0
   562   001854  6E2C               	movwf	_sched_gTick100ms^0,c
   563                           
   564                           ;sched.c: 33: sched_gTick1s = 0;
   565   001856  0E00               	movlw	0
   566   001858  6E1D               	movwf	(_sched_gTick1s+1)^0,c
   567   00185A  0E00               	movlw	0
   568   00185C  6E1C               	movwf	_sched_gTick1s^0,c
   569                           
   570                           ;sched.c: 34: sched_bTicked = 0;;
   571   00185E  0E00               	movlw	0
   572   001860  6E1B               	movwf	(_sched_bTicked+1)^0,c
   573   001862  0E00               	movlw	0
   574   001864  6E1A               	movwf	_sched_bTicked^0,c
   575                           
   576                           ;sched.c: 36: TASK_vTaskAppInit();
   577   001866  EC37  F00F         	call	_TASK_vTaskAppInit	;wreg free
   578   00186A                     l2286:
   579   00186A  FFFF               	dw	65535	; assembler added errata NOP
   580                           
   581                           ;sched.c: 39: {;sched.c: 40: if(sched_bTicked)
   582   00186C  501A               	movf	_sched_bTicked^0,w,c
   583   00186E  101B               	iorwf	(_sched_bTicked+1)^0,w,c
   584   001870  B4D8               	btfsc	status,2,c
   585   001872  D7FB               	goto	l2286
   586                           
   587                           ;sched.c: 41: {;sched.c: 42: sched_bTicked = 0;;
   588   001874  0E00               	movlw	0
   589   001876  6E1B               	movwf	(_sched_bTicked+1)^0,c
   590   001878  0E00               	movlw	0
   591   00187A  6E1A               	movwf	_sched_bTicked^0,c
   592                           
   593                           ;sched.c: 43: TASK_vTask1ms();
   594   00187C  EC49  F00F         	call	_TASK_vTask1ms	;wreg free
   595                           
   596                           ;sched.c: 45: if(sched_gTick10ms == 10)
   597   001880  0E0A               	movlw	10
   598   001882  182D               	xorwf	_sched_gTick10ms^0,w,c
   599   001884  A4D8               	btfss	status,2,c
   600   001886  D004               	goto	l2298
   601                           
   602                           ;sched.c: 46: {;sched.c: 47: sched_gTick10ms = 0;
   603   001888  0E00               	movlw	0
   604   00188A  6E2D               	movwf	_sched_gTick10ms^0,c
   605                           
   606                           ;sched.c: 48: TASK_vTask10ms();
   607   00188C  EC50  F00F         	call	_TASK_vTask10ms	;wreg free
   608   001890                     l2298:
   609   001890  FFFF               	dw	65535	; assembler added errata NOP
   610                           
   611                           ;sched.c: 49: };sched.c: 50: if(sched_gTick100ms == 100)
   612   001892  0E64               	movlw	100
   613   001894  182C               	xorwf	_sched_gTick100ms^0,w,c
   614   001896  A4D8               	btfss	status,2,c
   615   001898  D004               	goto	l2304
   616                           
   617                           ;sched.c: 51: {;sched.c: 52: sched_gTick100ms = 0;
   618   00189A  0E00               	movlw	0
   619   00189C  6E2C               	movwf	_sched_gTick100ms^0,c
   620                           
   621                           ;sched.c: 53: TASK_vTask100ms();
   622   00189E  EC58  F00F         	call	_TASK_vTask100ms	;wreg free
   623   0018A2                     l2304:
   624   0018A2  FFFF               	dw	65535	; assembler added errata NOP
   625                           
   626                           ;sched.c: 54: };sched.c: 55: if(sched_gTick1s == 1000)
   627   0018A4  0EE8               	movlw	232
   628   0018A6  181C               	xorwf	_sched_gTick1s^0,w,c
   629   0018A8  E1E0               	bnz	l2286
   630   0018AA  0E03               	movlw	3
   631   0018AC  181D               	xorwf	(_sched_gTick1s+1)^0,w,c
   632   0018AE  A4D8               	btfss	status,2,c
   633   0018B0  D7DC               	goto	l2286
   634                           
   635                           ;sched.c: 56: {;sched.c: 57: sched_gTick1s = 0;
   636   0018B2  0E00               	movlw	0
   637   0018B4  6E1D               	movwf	(_sched_gTick1s+1)^0,c
   638   0018B6  0E00               	movlw	0
   639   0018B8  6E1C               	movwf	_sched_gTick1s^0,c
   640                           
   641                           ;sched.c: 58: TASK_vTask1s();
   642   0018BA  EC55  F00F         	call	_TASK_vTask1s	;wreg free
   643   0018BE  D7D5               	goto	l2286
   644   0018C0  FFFF               	dw	65535	; errata NOP
   645   0018C2                     __end_of_SCHED_vStartScheduler:
   646                           	callstack 0
   647                           
   648 ;; *************** function _TASK_vTaskAppInit *****************
   649 ;; Defined at:
   650 ;;		line 6 in file "tasks.c"
   651 ;; Parameters:    Size  Location     Type
   652 ;;		None
   653 ;; Auto vars:     Size  Location     Type
   654 ;;		None
   655 ;; Return value:  Size  Location     Type
   656 ;;                  1    wreg      void 
   657 ;; Registers used:
   658 ;;		wreg, status,2, status,0, cstack
   659 ;; Tracked objects:
   660 ;;		On entry : 0/0
   661 ;;		On exit  : 0/0
   662 ;;		Unchanged: 0/0
   663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   668 ;;Total ram usage:        0 bytes
   669 ;; Hardware stack levels used: 1
   670 ;; Hardware stack levels required when called: 5
   671 ;; This function calls:
   672 ;;		_LIGHTS_BrakeInit
   673 ;;		_LIGHTS_HeadLampInit
   674 ;;		_SGL_BlinkersInit
   675 ;; This function is called by:
   676 ;;		_SCHED_vStartScheduler
   677 ;; This function uses a non-reentrant model
   678 ;;
   679                           
   680                           	psect	text2
   681   001E6E                     __ptext2:
   682                           	callstack 0
   683   001E6E                     _TASK_vTaskAppInit:
   684                           	callstack 0
   685   001E6E  FFFF               	dw	65535	; assembler added errata NOP
   686                           
   687                           ;tasks.c: 8: SGL_BlinkersInit();
   688                           
   689                           ;incstack = 0
   690   001E70  EC3E  F00E         	call	_SGL_BlinkersInit	;wreg free
   691                           
   692                           ;tasks.c: 9: LIGHTS_BrakeInit();
   693   001E74  EC02  F00F         	call	_LIGHTS_BrakeInit	;wreg free
   694                           
   695                           ;tasks.c: 10: LIGHTS_HeadLampInit();
   696   001E78  ECA7  F00E         	call	_LIGHTS_HeadLampInit	;wreg free
   697   001E7C  0012               	return		;funcret
   698   001E7E  FFFF               	dw	65535	; errata NOP
   699   001E80                     __end_of_TASK_vTaskAppInit:
   700                           	callstack 0
   701                           
   702 ;; *************** function _SGL_BlinkersInit *****************
   703 ;; Defined at:
   704 ;;		line 243 in file "sgl.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;		None
   707 ;; Auto vars:     Size  Location     Type
   708 ;;		None
   709 ;; Return value:  Size  Location     Type
   710 ;;                  1    wreg      void 
   711 ;; Registers used:
   712 ;;		wreg, status,2, status,0
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   722 ;;Total ram usage:        0 bytes
   723 ;; Hardware stack levels used: 1
   724 ;; Hardware stack levels required when called: 2
   725 ;; This function calls:
   726 ;;		Nothing
   727 ;; This function is called by:
   728 ;;		_TASK_vTaskAppInit
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           	psect	text3
   733   001C7C                     __ptext3:
   734                           	callstack 0
   735   001C7C                     _SGL_BlinkersInit:
   736                           	callstack 0
   737   001C7C  FFFF               	dw	65535	; assembler added errata NOP
   738                           
   739                           ;sgl.c: 245: blinkerSM._currentState = SGL_BlinkPasiveState;
   740                           
   741                           ;incstack = 0
   742   001C7E  0E10               	movlw	low _SGL_BlinkPasiveState
   743   001C80  6E01               	movwf	_blinkerSM^0,c
   744   001C82  0E11               	movlw	high _SGL_BlinkPasiveState
   745   001C84  6E02               	movwf	(_blinkerSM+1)^0,c
   746                           
   747                           ;sgl.c: 246: blinkerSM._pollEvents = SGL_BlinkEventPoll;
   748   001C86  0EB2               	movlw	low _SGL_BlinkEventPoll
   749   001C88  6E03               	movwf	(_blinkerSM+2)^0,c
   750   001C8A  0E1C               	movlw	high _SGL_BlinkEventPoll
   751   001C8C  6E04               	movwf	(_blinkerSM+3)^0,c
   752                           
   753                           ;sgl.c: 247: blinkerSM.avarie = 0;
   754   001C8E  0E00               	movlw	0
   755   001C90  6E07               	movwf	(_blinkerSM+6)^0,c
   756                           
   757                           ;sgl.c: 248: blinkerSM.firstEntry = 1;
   758   001C92  0E00               	movlw	0
   759   001C94  6E06               	movwf	(_blinkerSM+5)^0,c
   760   001C96  0E01               	movlw	1
   761   001C98  6E05               	movwf	(_blinkerSM+4)^0,c
   762                           
   763                           ;sgl.c: 249: blinkerSM.leftSwitch = 0;
   764   001C9A  0E00               	movlw	0
   765   001C9C  6E08               	movwf	(_blinkerSM+7)^0,c
   766                           
   767                           ;sgl.c: 250: blinkerSM.rightSwitch = 0;
   768   001C9E  0E00               	movlw	0
   769   001CA0  6E09               	movwf	(_blinkerSM+8)^0,c
   770                           
   771                           ;sgl.c: 251: blinkerSM.lastSide = 0;
   772   001CA2  0E00               	movlw	0
   773   001CA4  6E0A               	movwf	(_blinkerSM+9)^0,c
   774                           
   775                           ;sgl.c: 252: blinkerSM.lastToggle = 0;
   776   001CA6  0E00               	movlw	0
   777   001CA8  6E0B               	movwf	(_blinkerSM+10)^0,c
   778                           
   779                           ;sgl.c: 253: blinkerSM.carryCounter = 0;
   780   001CAA  0E00               	movlw	0
   781   001CAC  6E0C               	movwf	(_blinkerSM+11)^0,c
   782   001CAE  0012               	return		;funcret
   783   001CB0  FFFF               	dw	65535	; errata NOP
   784   001CB2                     __end_of_SGL_BlinkersInit:
   785                           	callstack 0
   786                           
   787 ;; *************** function _LIGHTS_HeadLampInit *****************
   788 ;; Defined at:
   789 ;;		line 120 in file "lights.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, status,2, status,0
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   807 ;;Total ram usage:        0 bytes
   808 ;; Hardware stack levels used: 1
   809 ;; Hardware stack levels required when called: 2
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_TASK_vTaskAppInit
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text4
   818   001D4E                     __ptext4:
   819                           	callstack 0
   820   001D4E                     _LIGHTS_HeadLampInit:
   821                           	callstack 0
   822   001D4E  FFFF               	dw	65535	; assembler added errata NOP
   823                           
   824                           ;lights.c: 122: headLightSM._currentState = SGL_HeadLightPasiveState;
   825                           
   826                           ;incstack = 0
   827   001D50  0E2E               	movlw	low _SGL_HeadLightPasiveState
   828   001D52  6E0D               	movwf	_headLightSM^0,c
   829   001D54  0E14               	movlw	high _SGL_HeadLightPasiveState
   830   001D56  6E0E               	movwf	(_headLightSM+1)^0,c
   831                           
   832                           ;lights.c: 123: headLightSM._pollEvents = SGL_HeadLightEventPoll;
   833   001D58  0E78               	movlw	low _SGL_HeadLightEventPoll
   834   001D5A  6E0F               	movwf	(_headLightSM+2)^0,c
   835   001D5C  0E1D               	movlw	high _SGL_HeadLightEventPoll
   836   001D5E  6E10               	movwf	(_headLightSM+3)^0,c
   837                           
   838                           ;lights.c: 124: headLightSM.firstEntry = 1;
   839   001D60  0E00               	movlw	0
   840   001D62  6E12               	movwf	(_headLightSM+5)^0,c
   841   001D64  0E01               	movlw	1
   842   001D66  6E11               	movwf	(_headLightSM+4)^0,c
   843                           
   844                           ;lights.c: 125: headLightSM.faruri = 0;
   845   001D68  0E00               	movlw	0
   846   001D6A  6E13               	movwf	(_headLightSM+6)^0,c
   847                           
   848                           ;lights.c: 126: headLightSM.lightLevel = 0;
   849   001D6C  0E00               	movlw	0
   850   001D6E  6E15               	movwf	(_headLightSM+8)^0,c
   851   001D70  0E00               	movlw	0
   852   001D72  6E14               	movwf	(_headLightSM+7)^0,c
   853   001D74  0012               	return		;funcret
   854   001D76  FFFF               	dw	65535	; errata NOP
   855   001D78                     __end_of_LIGHTS_HeadLampInit:
   856                           	callstack 0
   857                           
   858 ;; *************** function _LIGHTS_BrakeInit *****************
   859 ;; Defined at:
   860 ;;		line 6 in file "lights.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg, status,2, status,0, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   878 ;;Total ram usage:        0 bytes
   879 ;; Hardware stack levels used: 1
   880 ;; Hardware stack levels required when called: 4
   881 ;; This function calls:
   882 ;;		_IOC_vSetOutputPort
   883 ;; This function is called by:
   884 ;;		_TASK_vTaskAppInit
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           	psect	text5
   889   001E04                     __ptext5:
   890                           	callstack 0
   891   001E04                     _LIGHTS_BrakeInit:
   892                           	callstack 0
   893   001E04  FFFF               	dw	65535	; assembler added errata NOP
   894                           
   895                           ;lights.c: 8: IOC_vSetOutputPort(IOC_LSF, 0);
   896                           
   897                           ;incstack = 0
   898   001E06  0E01               	movlw	1
   899   001E08  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
   900   001E0A  0E05               	movlw	5
   901   001E0C  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
   902   001E0E  0E00               	movlw	0
   903   001E10  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
   904   001E12  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
   905   001E16  0012               	return		;funcret
   906   001E18  FFFF               	dw	65535	; errata NOP
   907   001E1A                     __end_of_LIGHTS_BrakeInit:
   908                           	callstack 0
   909                           
   910 ;; *************** function _TASK_vTask1s *****************
   911 ;; Defined at:
   912 ;;		line 31 in file "tasks.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		None
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   930 ;;Total ram usage:        0 bytes
   931 ;; Hardware stack levels used: 1
   932 ;; Hardware stack levels required when called: 2
   933 ;; This function calls:
   934 ;;		Nothing
   935 ;; This function is called by:
   936 ;;		_SCHED_vStartScheduler
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           	psect	text6
   941   001EAA                     __ptext6:
   942                           	callstack 0
   943   001EAA                     _TASK_vTask1s:
   944                           	callstack 0
   945   001EAA  FFFF               	dw	65535	; assembler added errata NOP
   946                           
   947                           ;incstack = 0
   948   001EAC  0012               	return		;funcret
   949   001EAE  FFFF               	dw	65535	; errata NOP
   950   001EB0                     __end_of_TASK_vTask1s:
   951                           	callstack 0
   952                           
   953 ;; *************** function _TASK_vTask1ms *****************
   954 ;; Defined at:
   955 ;;		line 15 in file "tasks.c"
   956 ;; Parameters:    Size  Location     Type
   957 ;;		None
   958 ;; Auto vars:     Size  Location     Type
   959 ;;		None
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      void 
   962 ;; Registers used:
   963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   973 ;;Total ram usage:        0 bytes
   974 ;; Hardware stack levels used: 1
   975 ;; Hardware stack levels required when called: 7
   976 ;; This function calls:
   977 ;;		_LIGHTS_BrakeRun
   978 ;;		_SGL_BlinkersRun
   979 ;; This function is called by:
   980 ;;		_SCHED_vStartScheduler
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           	psect	text7
   985   001E92                     __ptext7:
   986                           	callstack 0
   987   001E92                     _TASK_vTask1ms:
   988                           	callstack 0
   989   001E92  FFFF               	dw	65535	; assembler added errata NOP
   990                           
   991                           ;tasks.c: 17: SGL_BlinkersRun();
   992                           
   993                           ;incstack = 0
   994   001E94  ECF0  F00C         	call	_SGL_BlinkersRun	;wreg free
   995                           
   996                           ;tasks.c: 18: LIGHTS_BrakeRun();
   997   001E98  ECE1  F00D         	call	_LIGHTS_BrakeRun	;wreg free
   998   001E9C  0012               	return		;funcret
   999   001E9E  FFFF               	dw	65535	; errata NOP
  1000   001EA0                     __end_of_TASK_vTask1ms:
  1001                           	callstack 0
  1002                           
  1003 ;; *************** function _SGL_BlinkersRun *****************
  1004 ;; Defined at:
  1005 ;;		line 256 in file "sgl.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;		None
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;		None
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  1    wreg      void 
  1012 ;; Registers used:
  1013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1023 ;;Total ram usage:        0 bytes
  1024 ;; Hardware stack levels used: 1
  1025 ;; Hardware stack levels required when called: 6
  1026 ;; This function calls:
  1027 ;;		_SGL_BlinkEventPoll
  1028 ;;		_SGL_BlinkPasiveState
  1029 ;;		_SGL_BlinkSwitchOffState
  1030 ;;		_SGL_BlinkSwitchOnState
  1031 ;; This function is called by:
  1032 ;;		_TASK_vTask1ms
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           	psect	text8
  1037   0019E0                     __ptext8:
  1038                           	callstack 0
  1039   0019E0                     _SGL_BlinkersRun:
  1040                           	callstack 0
  1041   0019E0  FFFF               	dw	65535	; assembler added errata NOP
  1042                           
  1043                           ;sgl.c: 258: if(0 != blinkerSM._currentState)
  1044                           
  1045                           ;incstack = 0
  1046   0019E2  5001               	movf	_blinkerSM^0,w,c
  1047   0019E4  1002               	iorwf	(_blinkerSM+1)^0,w,c
  1048   0019E6  B4D8               	btfsc	status,2,c
  1049   0019E8  D00E               	goto	u1589
  1050                           
  1051                           ;sgl.c: 259: {;sgl.c: 260: (*blinkerSM._currentState)();
  1052   0019EA  D801               	call	u1588
  1053   0019EC  D00C               	goto	u1589
  1054   0019EE                     u1588:
  1055   0019EE  FFFF               	dw	65535	; assembler added errata NOP
  1056   0019F0  0005               	push	
  1057   0019F2  6EFA               	movwf	pclath,c
  1058   0019F4  5001               	movf	_blinkerSM^0,w,c
  1059   0019F6  6EFD               	movwf	tosl,c
  1060   0019F8  5002               	movf	(_blinkerSM+1)^0,w,c
  1061   0019FA  6EFE               	movwf	tosh,c
  1062   0019FC  50F8               	movf	tblptru,w,c
  1063   0019FE  6EFF               	movwf	tosu,c
  1064   001A00  50FA               	movf	pclath,w,c
  1065   001A02  0012               	return		;indir
  1066   001A04  FFFF               	dw	65535	; errata NOP
  1067   001A06                     u1589:
  1068   001A06  FFFF               	dw	65535	; assembler added errata NOP
  1069                           
  1070                           ;sgl.c: 261: };sgl.c: 262: if(0 != blinkerSM._pollEvents)
  1071   001A08  5003               	movf	(_blinkerSM+2)^0,w,c
  1072   001A0A  1004               	iorwf	(_blinkerSM+3)^0,w,c
  1073   001A0C  B4D8               	btfsc	status,2,c
  1074   001A0E  D010               	goto	u1609
  1075                           
  1076                           ;sgl.c: 263: {;sgl.c: 264: (*blinkerSM._pollEvents)();
  1077   001A10  EE20  F003         	lfsr	2,_blinkerSM+2
  1078   001A14  D801               	call	u1608
  1079   001A16  D00C               	goto	u1609
  1080   001A18                     u1608:
  1081   001A18  FFFF               	dw	65535	; assembler added errata NOP
  1082   001A1A  0005               	push	
  1083   001A1C  6EFA               	movwf	pclath,c
  1084   001A1E  50DE               	movf	postinc2,w,c
  1085   001A20  6EFD               	movwf	tosl,c
  1086   001A22  50DE               	movf	postinc2,w,c
  1087   001A24  6EFE               	movwf	tosh,c
  1088   001A26  50F8               	movf	tblptru,w,c
  1089   001A28  6EFF               	movwf	tosu,c
  1090   001A2A  50FA               	movf	pclath,w,c
  1091   001A2C  0012               	return		;indir
  1092   001A2E  FFFF               	dw	65535	; errata NOP
  1093   001A30                     u1609:
  1094   001A30  FFFF               	dw	65535	; assembler added errata NOP
  1095   001A32  0012               	return		;funcret
  1096   001A34  FFFF               	dw	65535	; errata NOP
  1097   001A36                     __end_of_SGL_BlinkersRun:
  1098                           	callstack 0
  1099                           
  1100 ;; *************** function _SGL_BlinkPasiveState *****************
  1101 ;; Defined at:
  1102 ;;		line 66 in file "sgl.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;		None
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;		None
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1120 ;;Total ram usage:        0 bytes
  1121 ;; Hardware stack levels used: 1
  1122 ;; Hardware stack levels required when called: 5
  1123 ;; This function calls:
  1124 ;;		_DIAGNOSIS_ActivateError
  1125 ;;		_SGL_setAllHazardLights
  1126 ;;		_SGL_toggleAllHazardLights
  1127 ;; This function is called by:
  1128 ;;		_SGL_BlinkSwitchOnState
  1129 ;;		_SGL_BlinkSwitchOffState
  1130 ;;		_SGL_BlinkersInit
  1131 ;;		_SGL_BlinkersRun
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           	psect	text9
  1136   001110                     __ptext9:
  1137                           	callstack 0
  1138   001110                     _SGL_BlinkPasiveState:
  1139                           	callstack 0
  1140   001110  FFFF               	dw	65535	; assembler added errata NOP
  1141                           
  1142                           ;sgl.c: 68: static T_U16 counter = 0;;sgl.c: 69: static T_U8 firstEntry = 1;;sgl.c: 70: 
      +                          static T_U8 toggleLights = 0;;sgl.c: 73: if(blinkerSM.firstEntry == 1)
  1143                           
  1144                           ;incstack = 0
  1145   001112  0405               	decf	(_blinkerSM+4)^0,w,c
  1146   001114  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1147   001116  A4D8               	btfss	status,2,c
  1148   001118  D007               	goto	l1984
  1149                           
  1150                           ;sgl.c: 74: {;sgl.c: 75: SGL_setAllHazardLights(0);
  1151   00111A  0E00               	movlw	0
  1152   00111C  EC9B  F00D         	call	_SGL_setAllHazardLights
  1153                           
  1154                           ;sgl.c: 76: blinkerSM.firstEntry = 0;
  1155   001120  0E00               	movlw	0
  1156   001122  6E06               	movwf	(_blinkerSM+5)^0,c
  1157   001124  0E00               	movlw	0
  1158   001126  6E05               	movwf	(_blinkerSM+4)^0,c
  1159   001128                     l1984:
  1160   001128  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ;sgl.c: 77: };sgl.c: 80: if(1 == blinkerSM.avarie)
  1163   00112A  0407               	decf	(_blinkerSM+6)^0,w,c
  1164   00112C  A4D8               	btfss	status,2,c
  1165   00112E  D029               	goto	l2008
  1166                           
  1167                           ;sgl.c: 81: {;sgl.c: 82: if(1 == firstEntry)
  1168   001130  0455               	decf	SGL_BlinkPasiveState@firstEntry^0,w,c
  1169   001132  A4D8               	btfss	status,2,c
  1170   001134  D00B               	goto	l1996
  1171                           
  1172                           ;sgl.c: 83: {;sgl.c: 84: SGL_setAllHazardLights(1);
  1173   001136  0E01               	movlw	1
  1174   001138  EC9B  F00D         	call	_SGL_setAllHazardLights
  1175                           
  1176                           ;sgl.c: 85: g_sglStareSemnal = 1;
  1177   00113C  0E00               	movlw	0
  1178   00113E  6E2B               	movwf	(_g_sglStareSemnal+1)^0,c
  1179   001140  0E01               	movlw	1
  1180   001142  6E2A               	movwf	_g_sglStareSemnal^0,c
  1181                           
  1182                           ;sgl.c: 86: DIAGNOSIS_ActivateError();
  1183   001144  ECE7  F00A         	call	_DIAGNOSIS_ActivateError	;wreg free
  1184                           
  1185                           ;sgl.c: 87: firstEntry = 0;
  1186   001148  0E00               	movlw	0
  1187   00114A  6E55               	movwf	SGL_BlinkPasiveState@firstEntry^0,c
  1188   00114C                     l1996:
  1189   00114C  FFFF               	dw	65535	; assembler added errata NOP
  1190                           
  1191                           ;sgl.c: 88: };sgl.c: 89: if(500 == counter)
  1192   00114E  0EF4               	movlw	244
  1193   001150  1828               	xorwf	SGL_BlinkPasiveState@counter^0,w,c
  1194   001152  E113               	bnz	l2006
  1195   001154  0429               	decf	(SGL_BlinkPasiveState@counter+1)^0,w,c
  1196   001156  A4D8               	btfss	status,2,c
  1197   001158  D010               	goto	l2006
  1198                           
  1199                           ;sgl.c: 90: {;sgl.c: 91: g_sglStareSemnal = toggleLights;
  1200   00115A  C034  F02A         	movff	SGL_BlinkPasiveState@toggleLights,_g_sglStareSemnal
  1201   00115E  6A2B               	clrf	(_g_sglStareSemnal+1)^0,c
  1202                           
  1203                           ;sgl.c: 92: SGL_toggleAllHazardLights(&toggleLights);
  1204   001160  0E34               	movlw	low SGL_BlinkPasiveState@toggleLights
  1205   001162  6E49               	movwf	SGL_toggleAllHazardLights@toggle^0,c
  1206   001164  0E00               	movlw	high SGL_BlinkPasiveState@toggleLights
  1207   001166  6E4A               	movwf	(SGL_toggleAllHazardLights@toggle+1)^0,c
  1208   001168  ECE8  F00B         	call	_SGL_toggleAllHazardLights	;wreg free
  1209                           
  1210                           ;sgl.c: 93: DIAGNOSIS_ActivateError();
  1211   00116C  ECE7  F00A         	call	_DIAGNOSIS_ActivateError	;wreg free
  1212                           
  1213                           ;sgl.c: 94: counter = 0;
  1214   001170  0E00               	movlw	0
  1215   001172  6E29               	movwf	(SGL_BlinkPasiveState@counter+1)^0,c
  1216   001174  0E00               	movlw	0
  1217   001176  6E28               	movwf	SGL_BlinkPasiveState@counter^0,c
  1218                           
  1219                           ;sgl.c: 95: }
  1220   001178  D016               	goto	l2020
  1221   00117A                     l2006:
  1222   00117A  FFFF               	dw	65535	; assembler added errata NOP
  1223                           
  1224                           ;sgl.c: 96: else;sgl.c: 97: {;sgl.c: 98: counter++;
  1225   00117C  4A28               	infsnz	SGL_BlinkPasiveState@counter^0,f,c
  1226   00117E  2A29               	incf	(SGL_BlinkPasiveState@counter+1)^0,f,c
  1227   001180  D012               	goto	l2020
  1228   001182                     l2008:
  1229   001182  FFFF               	dw	65535	; assembler added errata NOP
  1230                           
  1231                           ;sgl.c: 101: else;sgl.c: 102: {;sgl.c: 103: g_sglStareSemnal = 0;
  1232   001184  0E00               	movlw	0
  1233   001186  6E2B               	movwf	(_g_sglStareSemnal+1)^0,c
  1234   001188  0E00               	movlw	0
  1235   00118A  6E2A               	movwf	_g_sglStareSemnal^0,c
  1236                           
  1237                           ;sgl.c: 104: SGL_setAllHazardLights(0);
  1238   00118C  0E00               	movlw	0
  1239   00118E  EC9B  F00D         	call	_SGL_setAllHazardLights
  1240                           
  1241                           ;sgl.c: 105: DIAGNOSIS_ActivateError();
  1242   001192  ECE7  F00A         	call	_DIAGNOSIS_ActivateError	;wreg free
  1243                           
  1244                           ;sgl.c: 106: counter = 0;
  1245   001196  0E00               	movlw	0
  1246   001198  6E29               	movwf	(SGL_BlinkPasiveState@counter+1)^0,c
  1247   00119A  0E00               	movlw	0
  1248   00119C  6E28               	movwf	SGL_BlinkPasiveState@counter^0,c
  1249                           
  1250                           ;sgl.c: 107: firstEntry = 1;
  1251   00119E  0E01               	movlw	1
  1252   0011A0  6E55               	movwf	SGL_BlinkPasiveState@firstEntry^0,c
  1253                           
  1254                           ;sgl.c: 108: toggleLights = 0;
  1255   0011A2  0E00               	movlw	0
  1256   0011A4  6E34               	movwf	SGL_BlinkPasiveState@toggleLights^0,c
  1257   0011A6                     l2020:
  1258   0011A6  FFFF               	dw	65535	; assembler added errata NOP
  1259                           
  1260                           ;sgl.c: 109: };sgl.c: 112: if( ((1 == blinkerSM.leftSwitch) || (1 == blinkerSM.rightSwit
      +                          ch)) && 0 == blinkerSM.avarie )
  1261   0011A8  0408               	decf	(_blinkerSM+7)^0,w,c
  1262   0011AA  B4D8               	btfsc	status,2,c
  1263   0011AC  D003               	goto	u1360
  1264   0011AE  0409               	decf	(_blinkerSM+8)^0,w,c
  1265   0011B0  A4D8               	btfss	status,2,c
  1266   0011B2  D01B               	goto	l48
  1267   0011B4                     u1360:
  1268   0011B4  FFFF               	dw	65535	; assembler added errata NOP
  1269   0011B6  5007               	movf	(_blinkerSM+6)^0,w,c
  1270   0011B8  A4D8               	btfss	status,2,c
  1271   0011BA  D017               	goto	l48
  1272                           
  1273                           ;sgl.c: 113: {;sgl.c: 114: blinkerSM._currentState = SGL_BlinkSwitchOnState;
  1274   0011BC  0E18               	movlw	low _SGL_BlinkSwitchOnState
  1275   0011BE  6E01               	movwf	_blinkerSM^0,c
  1276   0011C0  0E10               	movlw	high _SGL_BlinkSwitchOnState
  1277   0011C2  6E02               	movwf	(_blinkerSM+1)^0,c
  1278                           
  1279                           ;sgl.c: 115: blinkerSM.firstEntry = 1;
  1280   0011C4  0E00               	movlw	0
  1281   0011C6  6E06               	movwf	(_blinkerSM+5)^0,c
  1282   0011C8  0E01               	movlw	1
  1283   0011CA  6E05               	movwf	(_blinkerSM+4)^0,c
  1284                           
  1285                           ;sgl.c: 116: counter = 0;
  1286   0011CC  0E00               	movlw	0
  1287   0011CE  6E29               	movwf	(SGL_BlinkPasiveState@counter+1)^0,c
  1288   0011D0  0E00               	movlw	0
  1289   0011D2  6E28               	movwf	SGL_BlinkPasiveState@counter^0,c
  1290                           
  1291                           ;sgl.c: 117: toggleLights = 0;
  1292   0011D4  0E00               	movlw	0
  1293   0011D6  6E34               	movwf	SGL_BlinkPasiveState@toggleLights^0,c
  1294                           
  1295                           ;sgl.c: 118: g_sglStareSemnal = 0;
  1296   0011D8  0E00               	movlw	0
  1297   0011DA  6E2B               	movwf	(_g_sglStareSemnal+1)^0,c
  1298   0011DC  0E00               	movlw	0
  1299   0011DE  6E2A               	movwf	_g_sglStareSemnal^0,c
  1300                           
  1301                           ;sgl.c: 119: SGL_setAllHazardLights(0);
  1302   0011E0  0E00               	movlw	0
  1303   0011E2  EC9B  F00D         	call	_SGL_setAllHazardLights
  1304                           
  1305                           ;sgl.c: 120: DIAGNOSIS_ActivateError();
  1306   0011E6  ECE7  F00A         	call	_DIAGNOSIS_ActivateError	;wreg free
  1307   0011EA                     l48:
  1308   0011EA  FFFF               	dw	65535	; assembler added errata NOP
  1309   0011EC  0012               	return		;funcret
  1310   0011EE  FFFF               	dw	65535	; errata NOP
  1311   0011F0                     __end_of_SGL_BlinkPasiveState:
  1312                           	callstack 0
  1313                           
  1314 ;; *************** function _SGL_BlinkSwitchOffState *****************
  1315 ;; Defined at:
  1316 ;;		line 185 in file "sgl.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1332 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1333 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1334 ;;Total ram usage:        2 bytes
  1335 ;; Hardware stack levels used: 1
  1336 ;; Hardware stack levels required when called: 5
  1337 ;; This function calls:
  1338 ;;		_DIAGNOSIS_ActivateError
  1339 ;;		_SGL_toggleSideHazardLights
  1340 ;; This function is called by:
  1341 ;;		_SGL_BlinkSwitchOnState
  1342 ;;		_SGL_BlinkersRun
  1343 ;; This function uses a non-reentrant model
  1344 ;;
  1345                           
  1346                           	psect	text10
  1347   0011F0                     __ptext10:
  1348                           	callstack 0
  1349   0011F0                     _SGL_BlinkSwitchOffState:
  1350                           	callstack 0
  1351   0011F0  FFFF               	dw	65535	; assembler added errata NOP
  1352                           
  1353                           ;sgl.c: 187: static T_U16 counter = 0;;sgl.c: 188: static T_U16 side = 0;;sgl.c: 189: st
      +                          atic T_U8 toggleLights = 0;;sgl.c: 190: static T_U8 cycles = 0;;sgl.c: 193: if(blinkerSM
      +                          .firstEntry == 1)
  1354                           
  1355                           ;incstack = 0
  1356   0011F2  0405               	decf	(_blinkerSM+4)^0,w,c
  1357   0011F4  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1358   0011F6  A4D8               	btfss	status,2,c
  1359   0011F8  D00C               	goto	l2118
  1360                           
  1361                           ;sgl.c: 194: {;sgl.c: 195: blinkerSM.firstEntry = 0;
  1362   0011FA  0E00               	movlw	0
  1363   0011FC  6E06               	movwf	(_blinkerSM+5)^0,c
  1364   0011FE  0E00               	movlw	0
  1365   001200  6E05               	movwf	(_blinkerSM+4)^0,c
  1366                           
  1367                           ;sgl.c: 196: toggleLights = blinkerSM.lastToggle;
  1368   001202  C00B  F032         	movff	_blinkerSM+10,SGL_BlinkSwitchOffState@toggleLights
  1369                           
  1370                           ;sgl.c: 197: side = blinkerSM.lastSide;
  1371   001206  C00A  F022         	movff	_blinkerSM+9,SGL_BlinkSwitchOffState@side
  1372   00120A  6A23               	clrf	(SGL_BlinkSwitchOffState@side+1)^0,c
  1373                           
  1374                           ;sgl.c: 198: counter = blinkerSM.carryCounter;
  1375   00120C  C00C  F024         	movff	_blinkerSM+11,SGL_BlinkSwitchOffState@counter
  1376   001210  6A25               	clrf	(SGL_BlinkSwitchOffState@counter+1)^0,c
  1377   001212                     l2118:
  1378   001212  FFFF               	dw	65535	; assembler added errata NOP
  1379                           
  1380                           ;sgl.c: 199: };sgl.c: 202: if(500 == counter && (5 != (cycles+blinkerSM.lastToggle)))
  1381   001214  0EF4               	movlw	244
  1382   001216  1824               	xorwf	SGL_BlinkSwitchOffState@counter^0,w,c
  1383   001218  E122               	bnz	l2132
  1384   00121A  0425               	decf	(SGL_BlinkSwitchOffState@counter+1)^0,w,c
  1385   00121C  A4D8               	btfss	status,2,c
  1386   00121E  D01F               	goto	l2132
  1387   001220  500B               	movf	(_blinkerSM+10)^0,w,c
  1388   001222  C030  F052         	movff	SGL_BlinkSwitchOffState@cycles,??_SGL_BlinkSwitchOffState
  1389   001226  6A53               	clrf	(??_SGL_BlinkSwitchOffState+1)^0,c
  1390   001228  2652               	addwf	??_SGL_BlinkSwitchOffState^0,f,c
  1391   00122A  0E00               	movlw	0
  1392   00122C  2253               	addwfc	(??_SGL_BlinkSwitchOffState+1)^0,f,c
  1393   00122E  0E05               	movlw	5
  1394   001230  1852               	xorwf	??_SGL_BlinkSwitchOffState^0,w,c
  1395   001232  1053               	iorwf	(??_SGL_BlinkSwitchOffState+1)^0,w,c
  1396   001234  B4D8               	btfsc	status,2,c
  1397   001236  D013               	goto	l2132
  1398                           
  1399                           ;sgl.c: 203: {;sgl.c: 204: g_sglStareSemnal = toggleLights;
  1400   001238  C032  F02A         	movff	SGL_BlinkSwitchOffState@toggleLights,_g_sglStareSemnal
  1401   00123C  6A2B               	clrf	(_g_sglStareSemnal+1)^0,c
  1402                           
  1403                           ;sgl.c: 205: SGL_toggleSideHazardLights(&toggleLights, side);
  1404   00123E  0E32               	movlw	low SGL_BlinkSwitchOffState@toggleLights
  1405   001240  6E49               	movwf	SGL_toggleSideHazardLights@toggle^0,c
  1406   001242  0E00               	movlw	high SGL_BlinkSwitchOffState@toggleLights
  1407   001244  6E4A               	movwf	(SGL_toggleSideHazardLights@toggle+1)^0,c
  1408   001246  C022  F04B         	movff	SGL_BlinkSwitchOffState@side,SGL_toggleSideHazardLights@side
  1409   00124A  EC5F  F00A         	call	_SGL_toggleSideHazardLights	;wreg free
  1410                           
  1411                           ;sgl.c: 206: DIAGNOSIS_ActivateError();
  1412   00124E  ECE7  F00A         	call	_DIAGNOSIS_ActivateError	;wreg free
  1413                           
  1414                           ;sgl.c: 207: cycles++;
  1415   001252  2A30               	incf	SGL_BlinkSwitchOffState@cycles^0,f,c
  1416                           
  1417                           ;sgl.c: 208: counter = 0;
  1418   001254  0E00               	movlw	0
  1419   001256  6E25               	movwf	(SGL_BlinkSwitchOffState@counter+1)^0,c
  1420   001258  0E00               	movlw	0
  1421   00125A  6E24               	movwf	SGL_BlinkSwitchOffState@counter^0,c
  1422                           
  1423                           ;sgl.c: 209: }
  1424   00125C  D00F               	goto	l2136
  1425   00125E                     l2132:
  1426   00125E  FFFF               	dw	65535	; assembler added errata NOP
  1427                           
  1428                           ;sgl.c: 210: else;sgl.c: 211: {;sgl.c: 212: if((5 != (cycles+blinkerSM.lastToggle)))
  1429   001260  500B               	movf	(_blinkerSM+10)^0,w,c
  1430   001262  C030  F052         	movff	SGL_BlinkSwitchOffState@cycles,??_SGL_BlinkSwitchOffState
  1431   001266  6A53               	clrf	(??_SGL_BlinkSwitchOffState+1)^0,c
  1432   001268  2652               	addwf	??_SGL_BlinkSwitchOffState^0,f,c
  1433   00126A  0E00               	movlw	0
  1434   00126C  2253               	addwfc	(??_SGL_BlinkSwitchOffState+1)^0,f,c
  1435   00126E  0E05               	movlw	5
  1436   001270  1852               	xorwf	??_SGL_BlinkSwitchOffState^0,w,c
  1437   001272  1053               	iorwf	(??_SGL_BlinkSwitchOffState+1)^0,w,c
  1438   001274  B4D8               	btfsc	status,2,c
  1439   001276  D002               	goto	l2136
  1440                           
  1441                           ;sgl.c: 213: {;sgl.c: 214: counter++;
  1442   001278  4A24               	infsnz	SGL_BlinkSwitchOffState@counter^0,f,c
  1443   00127A  2A25               	incf	(SGL_BlinkSwitchOffState@counter+1)^0,f,c
  1444   00127C                     l2136:
  1445   00127C  FFFF               	dw	65535	; assembler added errata NOP
  1446                           
  1447                           ;sgl.c: 215: };sgl.c: 216: };sgl.c: 219: if( 1 == blinkerSM.avarie )
  1448   00127E  0407               	decf	(_blinkerSM+6)^0,w,c
  1449   001280  A4D8               	btfss	status,2,c
  1450   001282  D012               	goto	l2148
  1451                           
  1452                           ;sgl.c: 220: {;sgl.c: 221: blinkerSM._currentState = SGL_BlinkPasiveState;
  1453   001284  0E10               	movlw	low _SGL_BlinkPasiveState
  1454   001286  6E01               	movwf	_blinkerSM^0,c
  1455   001288  0E11               	movlw	high _SGL_BlinkPasiveState
  1456   00128A  FFFF               	dw	65535	; assembler added errata NOP
  1457   00128C  6E02               	movwf	(_blinkerSM+1)^0,c
  1458                           
  1459                           ;sgl.c: 222: blinkerSM.firstEntry = 1;
  1460   00128E  0E00               	movlw	0
  1461   001290  6E06               	movwf	(_blinkerSM+5)^0,c
  1462   001292  0E01               	movlw	1
  1463   001294  6E05               	movwf	(_blinkerSM+4)^0,c
  1464                           
  1465                           ;sgl.c: 223: blinkerSM.carryCounter = counter;
  1466   001296  C024  F00C         	movff	SGL_BlinkSwitchOffState@counter,_blinkerSM+11
  1467                           
  1468                           ;sgl.c: 224: cycles = 0;
  1469   00129A  0E00               	movlw	0
  1470   00129C  6E30               	movwf	SGL_BlinkSwitchOffState@cycles^0,c
  1471                           
  1472                           ;sgl.c: 225: counter = 0;
  1473   00129E  0E00               	movlw	0
  1474   0012A0  6E25               	movwf	(SGL_BlinkSwitchOffState@counter+1)^0,c
  1475   0012A2  0E00               	movlw	0
  1476   0012A4  6E24               	movwf	SGL_BlinkSwitchOffState@counter^0,c
  1477                           
  1478                           ;sgl.c: 226: } else if( (1 == blinkerSM.leftSwitch) || (1 == blinkerSM.rightSwitch) )
  1479   0012A6  D00C               	goto	l86
  1480   0012A8                     l2148:
  1481   0012A8  FFFF               	dw	65535	; assembler added errata NOP
  1482   0012AA  0408               	decf	(_blinkerSM+7)^0,w,c
  1483   0012AC  B4D8               	btfsc	status,2,c
  1484   0012AE  D003               	goto	u1510
  1485   0012B0  0409               	decf	(_blinkerSM+8)^0,w,c
  1486   0012B2  A4D8               	btfss	status,2,c
  1487   0012B4  D005               	goto	l86
  1488   0012B6                     u1510:
  1489   0012B6  FFFF               	dw	65535	; assembler added errata NOP
  1490                           
  1491                           ;sgl.c: 227: {;sgl.c: 228: blinkerSM._currentState = SGL_BlinkSwitchOnState;
  1492   0012B8  0E18               	movlw	low _SGL_BlinkSwitchOnState
  1493   0012BA  6E01               	movwf	_blinkerSM^0,c
  1494   0012BC  0E10               	movlw	high _SGL_BlinkSwitchOnState
  1495   0012BE  D7E5               	goto	L1
  1496   0012C0                     l86:
  1497   0012C0  FFFF               	dw	65535	; assembler added errata NOP
  1498   0012C2  0012               	return		;funcret
  1499   0012C4  FFFF               	dw	65535	; errata NOP
  1500   0012C6                     __end_of_SGL_BlinkSwitchOffState:
  1501                           	callstack 0
  1502                           
  1503 ;; *************** function _SGL_BlinkSwitchOnState *****************
  1504 ;; Defined at:
  1505 ;;		line 124 in file "sgl.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1523 ;;Total ram usage:        0 bytes
  1524 ;; Hardware stack levels used: 1
  1525 ;; Hardware stack levels required when called: 5
  1526 ;; This function calls:
  1527 ;;		_DIAGNOSIS_ActivateError
  1528 ;;		_SGL_setAllHazardLights
  1529 ;;		_SGL_setSideHazardLights
  1530 ;;		_SGL_toggleSideHazardLights
  1531 ;; This function is called by:
  1532 ;;		_SGL_BlinkPasiveState
  1533 ;;		_SGL_BlinkSwitchOffState
  1534 ;;		_SGL_BlinkersRun
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text11
  1539   001018                     __ptext11:
  1540                           	callstack 0
  1541   001018                     _SGL_BlinkSwitchOnState:
  1542                           	callstack 0
  1543   001018  FFFF               	dw	65535	; assembler added errata NOP
  1544                           
  1545                           ;sgl.c: 126: static T_U8 side = 0;;sgl.c: 127: static T_U16 counter = 0;;sgl.c: 128: sta
      +                          tic T_U8 firstEntry = 1;;sgl.c: 129: static T_U8 toggleLights = 0;;sgl.c: 132: if(blinke
      +                          rSM.firstEntry == 1)
  1546                           
  1547                           ;incstack = 0
  1548   00101A  0405               	decf	(_blinkerSM+4)^0,w,c
  1549   00101C  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1550   00101E  A4D8               	btfss	status,2,c
  1551   001020  D00B               	goto	l2048
  1552                           
  1553                           ;sgl.c: 133: {;sgl.c: 135: side = blinkerSM.rightSwitch;
  1554   001022  C009  F031         	movff	_blinkerSM+8,SGL_BlinkSwitchOnState@side
  1555                           
  1556                           ;sgl.c: 136: blinkerSM.lastSide = side;
  1557   001026  C031  F00A         	movff	SGL_BlinkSwitchOnState@side,_blinkerSM+9
  1558                           
  1559                           ;sgl.c: 137: blinkerSM.firstEntry = 0;
  1560   00102A  0E00               	movlw	0
  1561   00102C  6E06               	movwf	(_blinkerSM+5)^0,c
  1562   00102E  0E00               	movlw	0
  1563   001030  6E05               	movwf	(_blinkerSM+4)^0,c
  1564                           
  1565                           ;sgl.c: 138: counter = blinkerSM.carryCounter;
  1566   001032  C00C  F026         	movff	_blinkerSM+11,SGL_BlinkSwitchOnState@counter
  1567   001036  6A27               	clrf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1568   001038                     l2048:
  1569   001038  FFFF               	dw	65535	; assembler added errata NOP
  1570                           
  1571                           ;sgl.c: 139: };sgl.c: 142: if(1 == firstEntry)
  1572   00103A  0454               	decf	SGL_BlinkSwitchOnState@firstEntry^0,w,c
  1573   00103C  A4D8               	btfss	status,2,c
  1574   00103E  D00D               	goto	l2058
  1575                           
  1576                           ;sgl.c: 143: {;sgl.c: 144: g_sglStareSemnal = 1;
  1577   001040  0E00               	movlw	0
  1578   001042  6E2B               	movwf	(_g_sglStareSemnal+1)^0,c
  1579   001044  0E01               	movlw	1
  1580   001046  6E2A               	movwf	_g_sglStareSemnal^0,c
  1581                           
  1582                           ;sgl.c: 145: SGL_setSideHazardLights(1, side);
  1583   001048  C031  F049         	movff	SGL_BlinkSwitchOnState@side,SGL_setSideHazardLights@side
  1584   00104C  0E01               	movlw	1
  1585   00104E  EC71  F00D         	call	_SGL_setSideHazardLights
  1586                           
  1587                           ;sgl.c: 146: DIAGNOSIS_ActivateError();
  1588   001052  ECE7  F00A         	call	_DIAGNOSIS_ActivateError	;wreg free
  1589                           
  1590                           ;sgl.c: 148: firstEntry = 0;
  1591   001056  0E00               	movlw	0
  1592   001058  6E54               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1593   00105A                     l2058:
  1594   00105A  FFFF               	dw	65535	; assembler added errata NOP
  1595                           
  1596                           ;sgl.c: 149: };sgl.c: 150: if(500 == counter)
  1597   00105C  0EF4               	movlw	244
  1598   00105E  1826               	xorwf	SGL_BlinkSwitchOnState@counter^0,w,c
  1599   001060  E115               	bnz	l2068
  1600   001062  0427               	decf	(SGL_BlinkSwitchOnState@counter+1)^0,w,c
  1601   001064  A4D8               	btfss	status,2,c
  1602   001066  D012               	goto	l2068
  1603                           
  1604                           ;sgl.c: 151: {;sgl.c: 152: g_sglStareSemnal = toggleLights;
  1605   001068  C033  F02A         	movff	SGL_BlinkSwitchOnState@toggleLights,_g_sglStareSemnal
  1606   00106C  6A2B               	clrf	(_g_sglStareSemnal+1)^0,c
  1607                           
  1608                           ;sgl.c: 153: SGL_toggleSideHazardLights(&toggleLights, side);
  1609   00106E  0E33               	movlw	low SGL_BlinkSwitchOnState@toggleLights
  1610   001070  6E49               	movwf	SGL_toggleSideHazardLights@toggle^0,c
  1611   001072  0E00               	movlw	high SGL_BlinkSwitchOnState@toggleLights
  1612   001074  6E4A               	movwf	(SGL_toggleSideHazardLights@toggle+1)^0,c
  1613   001076  C031  F04B         	movff	SGL_BlinkSwitchOnState@side,SGL_toggleSideHazardLights@side
  1614   00107A  EC5F  F00A         	call	_SGL_toggleSideHazardLights	;wreg free
  1615                           
  1616                           ;sgl.c: 154: DIAGNOSIS_ActivateError();
  1617   00107E  ECE7  F00A         	call	_DIAGNOSIS_ActivateError	;wreg free
  1618                           
  1619                           ;sgl.c: 155: counter = 0;
  1620   001082  0E00               	movlw	0
  1621   001084  6E27               	movwf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1622   001086  0E00               	movlw	0
  1623   001088  6E26               	movwf	SGL_BlinkSwitchOnState@counter^0,c
  1624                           
  1625                           ;sgl.c: 156: }
  1626   00108A  D003               	goto	l2070
  1627   00108C                     l2068:
  1628   00108C  FFFF               	dw	65535	; assembler added errata NOP
  1629                           
  1630                           ;sgl.c: 157: else;sgl.c: 158: {;sgl.c: 159: counter++;
  1631   00108E  4A26               	infsnz	SGL_BlinkSwitchOnState@counter^0,f,c
  1632   001090  2A27               	incf	(SGL_BlinkSwitchOnState@counter+1)^0,f,c
  1633   001092                     l2070:
  1634   001092  FFFF               	dw	65535	; assembler added errata NOP
  1635                           
  1636                           ;sgl.c: 160: };sgl.c: 163: if( 1 == blinkerSM.avarie )
  1637   001094  0407               	decf	(_blinkerSM+6)^0,w,c
  1638   001096  A4D8               	btfss	status,2,c
  1639   001098  D01A               	goto	l2088
  1640                           
  1641                           ;sgl.c: 164: {;sgl.c: 165: blinkerSM._currentState = SGL_BlinkPasiveState;
  1642   00109A  0E10               	movlw	low _SGL_BlinkPasiveState
  1643   00109C  6E01               	movwf	_blinkerSM^0,c
  1644   00109E  0E11               	movlw	high _SGL_BlinkPasiveState
  1645   0010A0  6E02               	movwf	(_blinkerSM+1)^0,c
  1646                           
  1647                           ;sgl.c: 166: blinkerSM.firstEntry = 1;
  1648   0010A2  0E00               	movlw	0
  1649   0010A4  6E06               	movwf	(_blinkerSM+5)^0,c
  1650   0010A6  0E01               	movlw	1
  1651   0010A8  6E05               	movwf	(_blinkerSM+4)^0,c
  1652                           
  1653                           ;sgl.c: 167: counter = 0;
  1654   0010AA  0E00               	movlw	0
  1655   0010AC  6E27               	movwf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1656   0010AE  0E00               	movlw	0
  1657   0010B0  6E26               	movwf	SGL_BlinkSwitchOnState@counter^0,c
  1658                           
  1659                           ;sgl.c: 168: toggleLights = 0;
  1660   0010B2  0E00               	movlw	0
  1661   0010B4  6E33               	movwf	SGL_BlinkSwitchOnState@toggleLights^0,c
  1662                           
  1663                           ;sgl.c: 169: firstEntry = 1;
  1664   0010B6  0E01               	movlw	1
  1665   0010B8  6E54               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1666                           
  1667                           ;sgl.c: 170: g_sglStareSemnal = 0;
  1668   0010BA  0E00               	movlw	0
  1669   0010BC  6E2B               	movwf	(_g_sglStareSemnal+1)^0,c
  1670   0010BE  0E00               	movlw	0
  1671   0010C0  6E2A               	movwf	_g_sglStareSemnal^0,c
  1672                           
  1673                           ;sgl.c: 171: SGL_setAllHazardLights(0);
  1674   0010C2  0E00               	movlw	0
  1675   0010C4  EC9B  F00D         	call	_SGL_setAllHazardLights
  1676                           
  1677                           ;sgl.c: 172: DIAGNOSIS_ActivateError();
  1678   0010C8  ECE7  F00A         	call	_DIAGNOSIS_ActivateError	;wreg free
  1679                           
  1680                           ;sgl.c: 173: }else if( (0 == blinkerSM.avarie) && (0 == blinkerSM.leftSwitch) && (0 == b
      +                          linkerSM.rightSwitch) )
  1681   0010CC  D01E               	goto	l66
  1682   0010CE                     l2088:
  1683   0010CE  FFFF               	dw	65535	; assembler added errata NOP
  1684   0010D0  5007               	movf	(_blinkerSM+6)^0,w,c
  1685   0010D2  A4D8               	btfss	status,2,c
  1686   0010D4  D01A               	goto	l66
  1687   0010D6  5008               	movf	(_blinkerSM+7)^0,w,c
  1688   0010D8  A4D8               	btfss	status,2,c
  1689   0010DA  D017               	goto	l66
  1690   0010DC  5009               	movf	(_blinkerSM+8)^0,w,c
  1691   0010DE  A4D8               	btfss	status,2,c
  1692   0010E0  D014               	goto	l66
  1693                           
  1694                           ;sgl.c: 174: {;sgl.c: 175: blinkerSM._currentState = SGL_BlinkSwitchOffState;
  1695   0010E2  0EF0               	movlw	low _SGL_BlinkSwitchOffState
  1696   0010E4  6E01               	movwf	_blinkerSM^0,c
  1697   0010E6  0E11               	movlw	high _SGL_BlinkSwitchOffState
  1698   0010E8  6E02               	movwf	(_blinkerSM+1)^0,c
  1699                           
  1700                           ;sgl.c: 176: blinkerSM.firstEntry = 1;
  1701   0010EA  0E00               	movlw	0
  1702   0010EC  6E06               	movwf	(_blinkerSM+5)^0,c
  1703   0010EE  0E01               	movlw	1
  1704   0010F0  6E05               	movwf	(_blinkerSM+4)^0,c
  1705                           
  1706                           ;sgl.c: 177: blinkerSM.lastToggle = toggleLights;
  1707   0010F2  C033  F00B         	movff	SGL_BlinkSwitchOnState@toggleLights,_blinkerSM+10
  1708                           
  1709                           ;sgl.c: 178: blinkerSM.carryCounter = counter;
  1710   0010F6  C026  F00C         	movff	SGL_BlinkSwitchOnState@counter,_blinkerSM+11
  1711                           
  1712                           ;sgl.c: 179: counter = 0;
  1713   0010FA  0E00               	movlw	0
  1714   0010FC  6E27               	movwf	(SGL_BlinkSwitchOnState@counter+1)^0,c
  1715   0010FE  0E00               	movlw	0
  1716   001100  6E26               	movwf	SGL_BlinkSwitchOnState@counter^0,c
  1717                           
  1718                           ;sgl.c: 180: toggleLights = 0;
  1719   001102  0E00               	movlw	0
  1720   001104  6E33               	movwf	SGL_BlinkSwitchOnState@toggleLights^0,c
  1721                           
  1722                           ;sgl.c: 181: firstEntry = 1;
  1723   001106  0E01               	movlw	1
  1724   001108  6E54               	movwf	SGL_BlinkSwitchOnState@firstEntry^0,c
  1725   00110A                     l66:
  1726   00110A  FFFF               	dw	65535	; assembler added errata NOP
  1727   00110C  0012               	return		;funcret
  1728   00110E  FFFF               	dw	65535	; errata NOP
  1729   001110                     __end_of_SGL_BlinkSwitchOnState:
  1730                           	callstack 0
  1731                           
  1732 ;; *************** function _SGL_setSideHazardLights *****************
  1733 ;; Defined at:
  1734 ;;		line 49 in file "sgl.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;  value           1    wreg     unsigned char 
  1737 ;;  side            1   20[COMRAM] unsigned char 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  value           1   21[COMRAM] unsigned char 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, status,2, status,0, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1749 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1752 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1753 ;;Total ram usage:        2 bytes
  1754 ;; Hardware stack levels used: 1
  1755 ;; Hardware stack levels required when called: 4
  1756 ;; This function calls:
  1757 ;;		_IOC_vSetOutputPort
  1758 ;; This function is called by:
  1759 ;;		_SGL_BlinkSwitchOnState
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           	psect	text12
  1764   001AE2                     __ptext12:
  1765                           	callstack 0
  1766   001AE2                     _SGL_setSideHazardLights:
  1767                           	callstack 0
  1768   001AE2  FFFF               	dw	65535	; assembler added errata NOP
  1769                           
  1770                           ;incstack = 0
  1771                           ;SGL_setSideHazardLights@value stored from wreg
  1772   001AE4  6E4A               	movwf	SGL_setSideHazardLights@value^0,c
  1773                           
  1774                           ;sgl.c: 51: if(0 == side)
  1775   001AE6  5049               	movf	SGL_setSideHazardLights@side^0,w,c
  1776   001AE8  A4D8               	btfss	status,2,c
  1777   001AEA  D011               	goto	l1934
  1778                           
  1779                           ;sgl.c: 52: {;sgl.c: 53: IOC_vSetOutputPort(IOC_SFS, value);
  1780   001AEC  0E01               	movlw	1
  1781   001AEE  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1782   001AF0  0E03               	movlw	3
  1783   001AF2  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1784   001AF4  C04A  F046         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1785   001AF8  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  1786                           
  1787                           ;sgl.c: 54: IOC_vSetOutputPort(IOC_SSS, value);
  1788   001AFC  0E01               	movlw	1
  1789   001AFE  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1790   001B00  0E07               	movlw	7
  1791   001B02  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1792   001B04  C04A  F046         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1793   001B08  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  1794                           
  1795                           ;sgl.c: 55: }
  1796   001B0C  D011               	goto	l30
  1797   001B0E                     l1934:
  1798   001B0E  FFFF               	dw	65535	; assembler added errata NOP
  1799                           
  1800                           ;sgl.c: 56: else;sgl.c: 57: {;sgl.c: 58: IOC_vSetOutputPort(IOC_SFD, value);
  1801   001B10  0E01               	movlw	1
  1802   001B12  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1803   001B14  0E00               	movlw	0
  1804   001B16  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1805   001B18  C04A  F046         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1806   001B1C  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  1807                           
  1808                           ;sgl.c: 59: IOC_vSetOutputPort(IOC_SSD, value);
  1809   001B20  0E01               	movlw	1
  1810   001B22  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1811   001B24  0E04               	movlw	4
  1812   001B26  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1813   001B28  C04A  F046         	movff	SGL_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1814   001B2C  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  1815   001B30                     l30:
  1816   001B30  FFFF               	dw	65535	; assembler added errata NOP
  1817   001B32  0012               	return		;funcret
  1818   001B34  FFFF               	dw	65535	; errata NOP
  1819   001B36                     __end_of_SGL_setSideHazardLights:
  1820                           	callstack 0
  1821                           
  1822 ;; *************** function _SGL_toggleSideHazardLights *****************
  1823 ;; Defined at:
  1824 ;;		line 26 in file "sgl.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  toggle          2   20[COMRAM] PTR unsigned char 
  1827 ;;		 -> SGL_BlinkSwitchOffState@toggleLights(1), SGL_BlinkSwitchOnState@toggleLights(1), 
  1828 ;;  side            1   22[COMRAM] unsigned char 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1840 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1843 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1844 ;;Total ram usage:        3 bytes
  1845 ;; Hardware stack levels used: 1
  1846 ;; Hardware stack levels required when called: 4
  1847 ;; This function calls:
  1848 ;;		_IOC_vSetOutputPort
  1849 ;; This function is called by:
  1850 ;;		_SGL_BlinkSwitchOnState
  1851 ;;		_SGL_BlinkSwitchOffState
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text13
  1856   0014BE                     __ptext13:
  1857                           	callstack 0
  1858   0014BE                     _SGL_toggleSideHazardLights:
  1859                           	callstack 0
  1860   0014BE  FFFF               	dw	65535	; assembler added errata NOP
  1861                           
  1862                           ;sgl.c: 28: if(0 == side)
  1863                           
  1864                           ;incstack = 0
  1865   0014C0  504B               	movf	SGL_toggleSideHazardLights@side^0,w,c
  1866   0014C2  A4D8               	btfss	status,2,c
  1867   0014C4  D019               	goto	l1924
  1868                           
  1869                           ;sgl.c: 29: {;sgl.c: 30: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1870   0014C6  0E01               	movlw	1
  1871   0014C8  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1872   0014CA  0E03               	movlw	3
  1873   0014CC  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1874   0014CE  C049  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1875   0014D2  C04A  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1876   0014D6  50DF               	movf	indf2,w,c
  1877   0014D8  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1878   0014DA  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  1879                           
  1880                           ;sgl.c: 31: IOC_vSetOutputPort(IOC_SSS, *toggle);
  1881   0014DE  0E01               	movlw	1
  1882   0014E0  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1883   0014E2  0E07               	movlw	7
  1884   0014E4  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1885   0014E6  C049  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1886   0014EA  C04A  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1887   0014EE  50DF               	movf	indf2,w,c
  1888   0014F0  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1889   0014F2  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  1890                           
  1891                           ;sgl.c: 32: }
  1892   0014F6  D019               	goto	l1926
  1893   0014F8                     l1924:
  1894   0014F8  FFFF               	dw	65535	; assembler added errata NOP
  1895                           
  1896                           ;sgl.c: 33: else;sgl.c: 34: {;sgl.c: 35: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1897   0014FA  0E01               	movlw	1
  1898   0014FC  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1899   0014FE  0E00               	movlw	0
  1900   001500  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1901   001502  C049  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1902   001506  C04A  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1903   00150A  50DF               	movf	indf2,w,c
  1904   00150C  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1905   00150E  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  1906                           
  1907                           ;sgl.c: 36: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1908   001512  0E01               	movlw	1
  1909   001514  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1910   001516  0E04               	movlw	4
  1911   001518  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1912   00151A  C049  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1913   00151E  C04A  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1914   001522  50DF               	movf	indf2,w,c
  1915   001524  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1916   001526  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  1917   00152A                     l1926:
  1918   00152A  FFFF               	dw	65535	; assembler added errata NOP
  1919                           
  1920                           ;sgl.c: 37: };sgl.c: 38: *toggle = *toggle ^ 1;
  1921   00152C  C049  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1922   001530  C04A  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1923   001534  50DF               	movf	indf2,w,c
  1924   001536  0A01               	xorlw	1
  1925   001538  C049  FFD9         	movff	SGL_toggleSideHazardLights@toggle,fsr2l
  1926   00153C  C04A  FFDA         	movff	SGL_toggleSideHazardLights@toggle+1,fsr2h
  1927   001540  6EDF               	movwf	indf2,c
  1928   001542  0012               	return		;funcret
  1929   001544  FFFF               	dw	65535	; errata NOP
  1930   001546                     __end_of_SGL_toggleSideHazardLights:
  1931                           	callstack 0
  1932                           
  1933 ;; *************** function _SGL_toggleAllHazardLights *****************
  1934 ;; Defined at:
  1935 ;;		line 17 in file "sgl.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;  toggle          2   20[COMRAM] PTR unsigned char 
  1938 ;;		 -> SGL_BlinkPasiveState@toggleLights(1), 
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;		None
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  1    wreg      void 
  1943 ;; Registers used:
  1944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1950 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1953 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1954 ;;Total ram usage:        2 bytes
  1955 ;; Hardware stack levels used: 1
  1956 ;; Hardware stack levels required when called: 4
  1957 ;; This function calls:
  1958 ;;		_IOC_vSetOutputPort
  1959 ;; This function is called by:
  1960 ;;		_SGL_BlinkPasiveState
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text14
  1965   0017D0                     __ptext14:
  1966                           	callstack 0
  1967   0017D0                     _SGL_toggleAllHazardLights:
  1968                           	callstack 0
  1969   0017D0  FFFF               	dw	65535	; assembler added errata NOP
  1970                           
  1971                           ;sgl.c: 19: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1972                           
  1973                           ;incstack = 0
  1974   0017D2  0E01               	movlw	1
  1975   0017D4  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1976   0017D6  0E00               	movlw	0
  1977   0017D8  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1978   0017DA  C049  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1979   0017DE  C04A  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1980   0017E2  50DF               	movf	indf2,w,c
  1981   0017E4  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1982   0017E6  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  1983                           
  1984                           ;sgl.c: 20: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1985   0017EA  0E01               	movlw	1
  1986   0017EC  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1987   0017EE  0E03               	movlw	3
  1988   0017F0  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1989   0017F2  C049  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  1990   0017F6  C04A  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  1991   0017FA  50DF               	movf	indf2,w,c
  1992   0017FC  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1993   0017FE  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  1994                           
  1995                           ;sgl.c: 21: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1996   001802  0E01               	movlw	1
  1997   001804  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1998   001806  0E04               	movlw	4
  1999   001808  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2000   00180A  C049  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  2001   00180E  C04A  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  2002   001812  50DF               	movf	indf2,w,c
  2003   001814  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2004   001816  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2005                           
  2006                           ;sgl.c: 22: IOC_vSetOutputPort(IOC_SSS, *toggle);
  2007   00181A  0E01               	movlw	1
  2008   00181C  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2009   00181E  0E07               	movlw	7
  2010   001820  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2011   001822  C049  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  2012   001826  C04A  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  2013   00182A  50DF               	movf	indf2,w,c
  2014   00182C  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2015   00182E  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2016                           
  2017                           ;sgl.c: 23: *toggle = *toggle ^ 1;
  2018   001832  C049  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  2019   001836  C04A  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  2020   00183A  50DF               	movf	indf2,w,c
  2021   00183C  0A01               	xorlw	1
  2022   00183E  C049  FFD9         	movff	SGL_toggleAllHazardLights@toggle,fsr2l
  2023   001842  C04A  FFDA         	movff	SGL_toggleAllHazardLights@toggle+1,fsr2h
  2024   001846  6EDF               	movwf	indf2,c
  2025   001848  0012               	return		;funcret
  2026   00184A  FFFF               	dw	65535	; errata NOP
  2027   00184C                     __end_of_SGL_toggleAllHazardLights:
  2028                           	callstack 0
  2029                           
  2030 ;; *************** function _SGL_setAllHazardLights *****************
  2031 ;; Defined at:
  2032 ;;		line 41 in file "sgl.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  value           1    wreg     unsigned char 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  value           1   20[COMRAM] unsigned char 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  1    wreg      void 
  2039 ;; Registers used:
  2040 ;;		wreg, status,2, status,0, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2047 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2049 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2050 ;;Total ram usage:        1 bytes
  2051 ;; Hardware stack levels used: 1
  2052 ;; Hardware stack levels required when called: 4
  2053 ;; This function calls:
  2054 ;;		_IOC_vSetOutputPort
  2055 ;; This function is called by:
  2056 ;;		_SGL_BlinkPasiveState
  2057 ;;		_SGL_BlinkSwitchOnState
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text15
  2062   001B36                     __ptext15:
  2063                           	callstack 0
  2064   001B36                     _SGL_setAllHazardLights:
  2065                           	callstack 0
  2066   001B36  FFFF               	dw	65535	; assembler added errata NOP
  2067                           
  2068                           ;incstack = 0
  2069                           ;SGL_setAllHazardLights@value stored from wreg
  2070   001B38  6E49               	movwf	SGL_setAllHazardLights@value^0,c
  2071                           
  2072                           ;sgl.c: 43: IOC_vSetOutputPort(IOC_SFD, value);
  2073   001B3A  0E01               	movlw	1
  2074   001B3C  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2075   001B3E  0E00               	movlw	0
  2076   001B40  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2077   001B42  C049  F046         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  2078   001B46  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2079                           
  2080                           ;sgl.c: 44: IOC_vSetOutputPort(IOC_SFS, value);
  2081   001B4A  0E01               	movlw	1
  2082   001B4C  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2083   001B4E  0E03               	movlw	3
  2084   001B50  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2085   001B52  C049  F046         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  2086   001B56  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2087                           
  2088                           ;sgl.c: 45: IOC_vSetOutputPort(IOC_SSD, value);
  2089   001B5A  0E01               	movlw	1
  2090   001B5C  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2091   001B5E  0E04               	movlw	4
  2092   001B60  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2093   001B62  C049  F046         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  2094   001B66  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2095                           
  2096                           ;sgl.c: 46: IOC_vSetOutputPort(IOC_SSS, value);
  2097   001B6A  0E01               	movlw	1
  2098   001B6C  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2099   001B6E  0E07               	movlw	7
  2100   001B70  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2101   001B72  C049  F046         	movff	SGL_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  2102   001B76  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2103   001B7A  0012               	return		;funcret
  2104   001B7C  FFFF               	dw	65535	; errata NOP
  2105   001B7E                     __end_of_SGL_setAllHazardLights:
  2106                           	callstack 0
  2107                           
  2108 ;; *************** function _SGL_BlinkEventPoll *****************
  2109 ;; Defined at:
  2110 ;;		line 236 in file "sgl.c"
  2111 ;; Parameters:    Size  Location     Type
  2112 ;;		None
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;		None
  2115 ;; Return value:  Size  Location     Type
  2116 ;;                  1    wreg      void 
  2117 ;; Registers used:
  2118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2119 ;; Tracked objects:
  2120 ;;		On entry : 0/0
  2121 ;;		On exit  : 0/0
  2122 ;;		Unchanged: 0/0
  2123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2128 ;;Total ram usage:        0 bytes
  2129 ;; Hardware stack levels used: 1
  2130 ;; Hardware stack levels required when called: 4
  2131 ;; This function calls:
  2132 ;;		_IOC_T16GetInputPort
  2133 ;; This function is called by:
  2134 ;;		_SGL_BlinkersInit
  2135 ;;		_SGL_BlinkersRun
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           	psect	text16
  2140   001CB2                     __ptext16:
  2141                           	callstack 0
  2142   001CB2                     _SGL_BlinkEventPoll:
  2143                           	callstack 0
  2144   001CB2  FFFF               	dw	65535	; assembler added errata NOP
  2145                           
  2146                           ;sgl.c: 238: blinkerSM.avarie = IOC_T16GetInputPort(IOC_AVARII);
  2147                           
  2148                           ;incstack = 0
  2149   001CB4  0E00               	movlw	0
  2150   001CB6  6E47               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2151   001CB8  0E02               	movlw	2
  2152   001CBA  6E46               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2153   001CBC  EC46  F00D         	call	_IOC_T16GetInputPort	;wreg free
  2154   001CC0  5046               	movf	?_IOC_T16GetInputPort^0,w,c
  2155   001CC2  6E07               	movwf	(_blinkerSM+6)^0,c
  2156                           
  2157                           ;sgl.c: 239: blinkerSM.leftSwitch = IOC_T16GetInputPort(IOC_SEM_S);
  2158   001CC4  0E00               	movlw	0
  2159   001CC6  6E47               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2160   001CC8  0E04               	movlw	4
  2161   001CCA  6E46               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2162   001CCC  EC46  F00D         	call	_IOC_T16GetInputPort	;wreg free
  2163   001CD0  5046               	movf	?_IOC_T16GetInputPort^0,w,c
  2164   001CD2  6E08               	movwf	(_blinkerSM+7)^0,c
  2165                           
  2166                           ;sgl.c: 240: blinkerSM.rightSwitch = IOC_T16GetInputPort(IOC_SEM_D);
  2167   001CD4  0E00               	movlw	0
  2168   001CD6  6E47               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2169   001CD8  0E03               	movlw	3
  2170   001CDA  6E46               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2171   001CDC  EC46  F00D         	call	_IOC_T16GetInputPort	;wreg free
  2172   001CE0  5046               	movf	?_IOC_T16GetInputPort^0,w,c
  2173   001CE2  6E09               	movwf	(_blinkerSM+8)^0,c
  2174   001CE4  0012               	return		;funcret
  2175   001CE6  FFFF               	dw	65535	; errata NOP
  2176   001CE8                     __end_of_SGL_BlinkEventPoll:
  2177                           	callstack 0
  2178                           
  2179 ;; *************** function _LIGHTS_BrakeRun *****************
  2180 ;; Defined at:
  2181 ;;		line 12 in file "lights.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;		None
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;		None
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      void 
  2188 ;; Registers used:
  2189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2199 ;;Total ram usage:        0 bytes
  2200 ;; Hardware stack levels used: 1
  2201 ;; Hardware stack levels required when called: 5
  2202 ;; This function calls:
  2203 ;;		_DIAGNOSIS_ActivateError
  2204 ;;		_IOC_T16GetInputPort
  2205 ;;		_IOC_vSetOutputPort
  2206 ;; This function is called by:
  2207 ;;		_TASK_vTask1ms
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text17
  2212   001BC2                     __ptext17:
  2213                           	callstack 0
  2214   001BC2                     _LIGHTS_BrakeRun:
  2215                           	callstack 0
  2216   001BC2  FFFF               	dw	65535	; assembler added errata NOP
  2217                           
  2218                           ;lights.c: 14: static T_U8 counter = 0;;lights.c: 16: if(4 == counter)
  2219                           
  2220                           ;incstack = 0
  2221   001BC4  0E04               	movlw	4
  2222   001BC6  182F               	xorwf	LIGHTS_BrakeRun@counter^0,w,c
  2223   001BC8  A4D8               	btfss	status,2,c
  2224   001BCA  D016               	goto	l2246
  2225                           
  2226                           ;lights.c: 17: {;lights.c: 18: g_lightStateFrana = IOC_T16GetInputPort(IOC_FRANA);
  2227   001BCC  0E00               	movlw	0
  2228   001BCE  6E47               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2229   001BD0  0E00               	movlw	0
  2230   001BD2  6E46               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2231   001BD4  EC46  F00D         	call	_IOC_T16GetInputPort	;wreg free
  2232   001BD8  C046  F020         	movff	?_IOC_T16GetInputPort,_g_lightStateFrana
  2233   001BDC  C047  F021         	movff	?_IOC_T16GetInputPort+1,_g_lightStateFrana+1
  2234                           
  2235                           ;lights.c: 20: IOC_vSetOutputPort(IOC_LSF, g_lightStateFrana);
  2236   001BE0  0E01               	movlw	1
  2237   001BE2  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2238   001BE4  0E05               	movlw	5
  2239   001BE6  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2240   001BE8  C020  F046         	movff	_g_lightStateFrana,IOC_vSetOutputPort@u8Value
  2241   001BEC  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2242                           
  2243                           ;lights.c: 21: DIAGNOSIS_ActivateError();
  2244   001BF0  ECE7  F00A         	call	_DIAGNOSIS_ActivateError	;wreg free
  2245                           
  2246                           ;lights.c: 23: counter = 0;
  2247   001BF4  0E00               	movlw	0
  2248   001BF6  6E2F               	movwf	LIGHTS_BrakeRun@counter^0,c
  2249   001BF8                     l2246:
  2250   001BF8  FFFF               	dw	65535	; assembler added errata NOP
  2251                           
  2252                           ;lights.c: 24: };lights.c: 26: ++counter;
  2253   001BFA  2A2F               	incf	LIGHTS_BrakeRun@counter^0,f,c
  2254   001BFC  0012               	return		;funcret
  2255   001BFE  FFFF               	dw	65535	; errata NOP
  2256   001C00                     __end_of_LIGHTS_BrakeRun:
  2257                           	callstack 0
  2258                           
  2259 ;; *************** function _TASK_vTask10ms *****************
  2260 ;; Defined at:
  2261 ;;		line 22 in file "tasks.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2279 ;;Total ram usage:        0 bytes
  2280 ;; Hardware stack levels used: 1
  2281 ;; Hardware stack levels required when called: 7
  2282 ;; This function calls:
  2283 ;;		_LIGHTS_HeadLampRun
  2284 ;; This function is called by:
  2285 ;;		_SCHED_vStartScheduler
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text18
  2290   001EA0                     __ptext18:
  2291                           	callstack 0
  2292   001EA0                     _TASK_vTask10ms:
  2293                           	callstack 0
  2294   001EA0  FFFF               	dw	65535	; assembler added errata NOP
  2295                           
  2296                           ;tasks.c: 24: LIGHTS_HeadLampRun();
  2297                           
  2298                           ;incstack = 0
  2299   001EA2  EC1B  F00D         	call	_LIGHTS_HeadLampRun	;wreg free
  2300   001EA6  0012               	return		;funcret
  2301   001EA8  FFFF               	dw	65535	; errata NOP
  2302   001EAA                     __end_of_TASK_vTask10ms:
  2303                           	callstack 0
  2304                           
  2305 ;; *************** function _LIGHTS_HeadLampRun *****************
  2306 ;; Defined at:
  2307 ;;		line 129 in file "lights.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;		None
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;		None
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      void 
  2314 ;; Registers used:
  2315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2325 ;;Total ram usage:        0 bytes
  2326 ;; Hardware stack levels used: 1
  2327 ;; Hardware stack levels required when called: 6
  2328 ;; This function calls:
  2329 ;;		_SGL_HeadLightActiveState
  2330 ;;		_SGL_HeadLightEventPoll
  2331 ;;		_SGL_HeadLightPasiveState
  2332 ;; This function is called by:
  2333 ;;		_TASK_vTask10ms
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text19
  2338   001A36                     __ptext19:
  2339                           	callstack 0
  2340   001A36                     _LIGHTS_HeadLampRun:
  2341                           	callstack 0
  2342   001A36  FFFF               	dw	65535	; assembler added errata NOP
  2343                           
  2344                           ;lights.c: 131: if(0 != headLightSM._currentState)
  2345                           
  2346                           ;incstack = 0
  2347   001A38  500D               	movf	_headLightSM^0,w,c
  2348   001A3A  100E               	iorwf	(_headLightSM+1)^0,w,c
  2349   001A3C  B4D8               	btfsc	status,2,c
  2350   001A3E  D00E               	goto	u1639
  2351                           
  2352                           ;lights.c: 132: {;lights.c: 133: (*headLightSM._currentState)();
  2353   001A40  D801               	call	u1638
  2354   001A42  D00C               	goto	u1639
  2355   001A44                     u1638:
  2356   001A44  FFFF               	dw	65535	; assembler added errata NOP
  2357   001A46  0005               	push	
  2358   001A48  6EFA               	movwf	pclath,c
  2359   001A4A  500D               	movf	_headLightSM^0,w,c
  2360   001A4C  6EFD               	movwf	tosl,c
  2361   001A4E  500E               	movf	(_headLightSM+1)^0,w,c
  2362   001A50  6EFE               	movwf	tosh,c
  2363   001A52  50F8               	movf	tblptru,w,c
  2364   001A54  6EFF               	movwf	tosu,c
  2365   001A56  50FA               	movf	pclath,w,c
  2366   001A58  0012               	return		;indir
  2367   001A5A  FFFF               	dw	65535	; errata NOP
  2368   001A5C                     u1639:
  2369   001A5C  FFFF               	dw	65535	; assembler added errata NOP
  2370                           
  2371                           ;lights.c: 134: };lights.c: 135: if(0 != headLightSM._pollEvents)
  2372   001A5E  500F               	movf	(_headLightSM+2)^0,w,c
  2373   001A60  1010               	iorwf	(_headLightSM+3)^0,w,c
  2374   001A62  B4D8               	btfsc	status,2,c
  2375   001A64  D010               	goto	u1659
  2376                           
  2377                           ;lights.c: 136: {;lights.c: 137: (*headLightSM._pollEvents)();
  2378   001A66  EE20  F00F         	lfsr	2,_headLightSM+2
  2379   001A6A  D801               	call	u1658
  2380   001A6C  D00C               	goto	u1659
  2381   001A6E                     u1658:
  2382   001A6E  FFFF               	dw	65535	; assembler added errata NOP
  2383   001A70  0005               	push	
  2384   001A72  6EFA               	movwf	pclath,c
  2385   001A74  50DE               	movf	postinc2,w,c
  2386   001A76  6EFD               	movwf	tosl,c
  2387   001A78  50DE               	movf	postinc2,w,c
  2388   001A7A  6EFE               	movwf	tosh,c
  2389   001A7C  50F8               	movf	tblptru,w,c
  2390   001A7E  6EFF               	movwf	tosu,c
  2391   001A80  50FA               	movf	pclath,w,c
  2392   001A82  0012               	return		;indir
  2393   001A84  FFFF               	dw	65535	; errata NOP
  2394   001A86                     u1659:
  2395   001A86  FFFF               	dw	65535	; assembler added errata NOP
  2396   001A88  0012               	return		;funcret
  2397   001A8A  FFFF               	dw	65535	; errata NOP
  2398   001A8C                     __end_of_LIGHTS_HeadLampRun:
  2399                           	callstack 0
  2400                           
  2401 ;; *************** function _SGL_HeadLightActiveState *****************
  2402 ;; Defined at:
  2403 ;;		line 86 in file "lights.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;		None
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;		None
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2421 ;;Total ram usage:        0 bytes
  2422 ;; Hardware stack levels used: 1
  2423 ;; Hardware stack levels required when called: 5
  2424 ;; This function calls:
  2425 ;;		_DIAGNOSIS_ActivateError
  2426 ;;		_IOC_vSetOutputPort
  2427 ;; This function is called by:
  2428 ;;		_SGL_HeadLightPasiveState
  2429 ;;		_LIGHTS_HeadLampRun
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text20
  2434   00138A                     __ptext20:
  2435                           	callstack 0
  2436   00138A                     _SGL_HeadLightActiveState:
  2437                           	callstack 0
  2438   00138A  FFFF               	dw	65535	; assembler added errata NOP
  2439                           
  2440                           ;lights.c: 89: if(headLightSM.firstEntry == 1)
  2441                           
  2442                           ;incstack = 0
  2443   00138C  0411               	decf	(_headLightSM+4)^0,w,c
  2444   00138E  1012               	iorwf	(_headLightSM+5)^0,w,c
  2445   001390  A4D8               	btfss	status,2,c
  2446   001392  D020               	goto	l2192
  2447                           
  2448                           ;lights.c: 90: {;lights.c: 91: IOC_vSetOutputPort(IOC_LS, 1);
  2449   001394  0E01               	movlw	1
  2450   001396  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2451   001398  0E06               	movlw	6
  2452   00139A  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2453   00139C  0E01               	movlw	1
  2454   00139E  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2455   0013A0  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2456                           
  2457                           ;lights.c: 92: IOC_vSetOutputPort(IOC_FS, 1);
  2458   0013A4  0E01               	movlw	1
  2459   0013A6  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2460   0013A8  0E02               	movlw	2
  2461   0013AA  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2462   0013AC  0E01               	movlw	1
  2463   0013AE  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2464   0013B0  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2465                           
  2466                           ;lights.c: 93: IOC_vSetOutputPort(IOC_FD, 1);
  2467   0013B4  0E01               	movlw	1
  2468   0013B6  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2469   0013B8  0E01               	movlw	1
  2470   0013BA  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2471   0013BC  0E01               	movlw	1
  2472   0013BE  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2473   0013C0  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2474                           
  2475                           ;lights.c: 94: g_lightStateLumini = 1;
  2476   0013C4  0E00               	movlw	0
  2477   0013C6  6E1F               	movwf	(_g_lightStateLumini+1)^0,c
  2478   0013C8  0E01               	movlw	1
  2479   0013CA  6E1E               	movwf	_g_lightStateLumini^0,c
  2480                           
  2481                           ;lights.c: 95: headLightSM.firstEntry = 0;
  2482   0013CC  0E00               	movlw	0
  2483   0013CE  6E12               	movwf	(_headLightSM+5)^0,c
  2484   0013D0  0E00               	movlw	0
  2485   0013D2  6E11               	movwf	(_headLightSM+4)^0,c
  2486   0013D4                     l2192:
  2487   0013D4  FFFF               	dw	65535	; assembler added errata NOP
  2488                           
  2489                           ;lights.c: 96: };lights.c: 99: DIAGNOSIS_ActivateError();
  2490   0013D6  ECE7  F00A         	call	_DIAGNOSIS_ActivateError	;wreg free
  2491                           
  2492                           ;lights.c: 102: if(0 == headLightSM.faruri)
  2493   0013DA  5013               	movf	(_headLightSM+6)^0,w,c
  2494   0013DC  A4D8               	btfss	status,2,c
  2495   0013DE  D024               	goto	l139
  2496                           
  2497                           ;lights.c: 103: {;lights.c: 104: headLightSM._currentState = SGL_HeadLightPasiveState;
  2498   0013E0  0E2E               	movlw	low _SGL_HeadLightPasiveState
  2499   0013E2  6E0D               	movwf	_headLightSM^0,c
  2500   0013E4  0E14               	movlw	high _SGL_HeadLightPasiveState
  2501   0013E6  6E0E               	movwf	(_headLightSM+1)^0,c
  2502                           
  2503                           ;lights.c: 105: headLightSM.firstEntry = 1;
  2504   0013E8  0E00               	movlw	0
  2505   0013EA  6E12               	movwf	(_headLightSM+5)^0,c
  2506   0013EC  0E01               	movlw	1
  2507   0013EE  6E11               	movwf	(_headLightSM+4)^0,c
  2508                           
  2509                           ;lights.c: 106: g_lightStateLumini = 0;
  2510   0013F0  0E00               	movlw	0
  2511   0013F2  6E1F               	movwf	(_g_lightStateLumini+1)^0,c
  2512   0013F4  0E00               	movlw	0
  2513   0013F6  6E1E               	movwf	_g_lightStateLumini^0,c
  2514                           
  2515                           ;lights.c: 107: IOC_vSetOutputPort(IOC_LS, 0);
  2516   0013F8  0E01               	movlw	1
  2517   0013FA  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2518   0013FC  0E06               	movlw	6
  2519   0013FE  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2520   001400  0E00               	movlw	0
  2521   001402  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2522   001404  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2523                           
  2524                           ;lights.c: 108: IOC_vSetOutputPort(IOC_FS, 0);
  2525   001408  0E01               	movlw	1
  2526   00140A  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2527   00140C  0E02               	movlw	2
  2528   00140E  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2529   001410  0E00               	movlw	0
  2530   001412  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2531   001414  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2532                           
  2533                           ;lights.c: 109: IOC_vSetOutputPort(IOC_FD, 0);
  2534   001418  0E01               	movlw	1
  2535   00141A  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2536   00141C  0E01               	movlw	1
  2537   00141E  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2538   001420  0E00               	movlw	0
  2539   001422  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2540   001424  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2541   001428                     l139:
  2542   001428  FFFF               	dw	65535	; assembler added errata NOP
  2543   00142A  0012               	return		;funcret
  2544   00142C  FFFF               	dw	65535	; errata NOP
  2545   00142E                     __end_of_SGL_HeadLightActiveState:
  2546                           	callstack 0
  2547                           
  2548 ;; *************** function _SGL_HeadLightPasiveState *****************
  2549 ;; Defined at:
  2550 ;;		line 57 in file "lights.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;		None
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;		None
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  1    wreg      void 
  2557 ;; Registers used:
  2558 ;;		wreg, status,2, status,0, cstack
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2568 ;;Total ram usage:        0 bytes
  2569 ;; Hardware stack levels used: 1
  2570 ;; Hardware stack levels required when called: 5
  2571 ;; This function calls:
  2572 ;;		_IOC_vSetOutputPort
  2573 ;;		_SGL_isNight
  2574 ;; This function is called by:
  2575 ;;		_SGL_HeadLightActiveState
  2576 ;;		_LIGHTS_HeadLampInit
  2577 ;;		_LIGHTS_HeadLampRun
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text21
  2582   00142E                     __ptext21:
  2583                           	callstack 0
  2584   00142E                     _SGL_HeadLightPasiveState:
  2585                           	callstack 0
  2586   00142E  FFFF               	dw	65535	; assembler added errata NOP
  2587                           
  2588                           ;lights.c: 60: if(headLightSM.firstEntry == 1)
  2589                           
  2590                           ;incstack = 0
  2591   001430  0411               	decf	(_headLightSM+4)^0,w,c
  2592   001432  1012               	iorwf	(_headLightSM+5)^0,w,c
  2593   001434  A4D8               	btfss	status,2,c
  2594   001436  D014               	goto	l2170
  2595                           
  2596                           ;lights.c: 61: {;lights.c: 62: IOC_vSetOutputPort(IOC_IFS, 0);
  2597   001438  0E02               	movlw	2
  2598   00143A  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2599   00143C  0E01               	movlw	1
  2600   00143E  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2601   001440  0E00               	movlw	0
  2602   001442  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2603   001444  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2604                           
  2605                           ;lights.c: 63: IOC_vSetOutputPort(IOC_LS, 0);
  2606   001448  0E01               	movlw	1
  2607   00144A  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2608   00144C  0E06               	movlw	6
  2609   00144E  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2610   001450  0E00               	movlw	0
  2611   001452  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2612   001454  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2613                           
  2614                           ;lights.c: 64: headLightSM.firstEntry = 0;
  2615   001458  0E00               	movlw	0
  2616   00145A  6E12               	movwf	(_headLightSM+5)^0,c
  2617   00145C  0E00               	movlw	0
  2618   00145E  6E11               	movwf	(_headLightSM+4)^0,c
  2619   001460                     l2170:
  2620   001460  FFFF               	dw	65535	; assembler added errata NOP
  2621                           
  2622                           ;lights.c: 65: };lights.c: 68: if(SGL_isNight())
  2623   001462  ECA3  F00A         	call	_SGL_isNight	;wreg free
  2624   001466  0900               	iorlw	0
  2625   001468  B4D8               	btfsc	status,2,c
  2626   00146A  D009               	goto	l2174
  2627                           
  2628                           ;lights.c: 69: {;lights.c: 70: IOC_vSetOutputPort(IOC_IFS, 1);
  2629   00146C  0E02               	movlw	2
  2630   00146E  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2631   001470  0E01               	movlw	1
  2632   001472  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2633   001474  0E01               	movlw	1
  2634   001476  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2635   001478  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2636                           
  2637                           ;lights.c: 71: }
  2638   00147C  D009               	goto	l2176
  2639   00147E                     l2174:
  2640   00147E  FFFF               	dw	65535	; assembler added errata NOP
  2641                           
  2642                           ;lights.c: 72: else;lights.c: 73: {;lights.c: 74: IOC_vSetOutputPort(IOC_IFS, 0);
  2643   001480  0E02               	movlw	2
  2644   001482  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2645   001484  0E01               	movlw	1
  2646   001486  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2647   001488  0E00               	movlw	0
  2648   00148A  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2649   00148C  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2650   001490                     l2176:
  2651   001490  FFFF               	dw	65535	; assembler added errata NOP
  2652                           
  2653                           ;lights.c: 75: };lights.c: 78: if(1 == headLightSM.faruri)
  2654   001492  0413               	decf	(_headLightSM+6)^0,w,c
  2655   001494  A4D8               	btfss	status,2,c
  2656   001496  D010               	goto	l134
  2657                           
  2658                           ;lights.c: 79: {;lights.c: 80: headLightSM.firstEntry = 1;
  2659   001498  0E00               	movlw	0
  2660   00149A  6E12               	movwf	(_headLightSM+5)^0,c
  2661   00149C  0E01               	movlw	1
  2662   00149E  6E11               	movwf	(_headLightSM+4)^0,c
  2663                           
  2664                           ;lights.c: 81: headLightSM._currentState = SGL_HeadLightActiveState;
  2665   0014A0  0E8A               	movlw	low _SGL_HeadLightActiveState
  2666   0014A2  6E0D               	movwf	_headLightSM^0,c
  2667   0014A4  0E13               	movlw	high _SGL_HeadLightActiveState
  2668   0014A6  6E0E               	movwf	(_headLightSM+1)^0,c
  2669                           
  2670                           ;lights.c: 82: IOC_vSetOutputPort(IOC_IFS, 0);
  2671   0014A8  0E02               	movlw	2
  2672   0014AA  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2673   0014AC  0E01               	movlw	1
  2674   0014AE  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2675   0014B0  0E00               	movlw	0
  2676   0014B2  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2677   0014B4  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2678   0014B8                     l134:
  2679   0014B8  FFFF               	dw	65535	; assembler added errata NOP
  2680   0014BA  0012               	return		;funcret
  2681   0014BC  FFFF               	dw	65535	; errata NOP
  2682   0014BE                     __end_of_SGL_HeadLightPasiveState:
  2683                           	callstack 0
  2684                           
  2685 ;; *************** function _SGL_isNight *****************
  2686 ;; Defined at:
  2687 ;;		line 37 in file "lights.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;		None
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;  currentLight    2   27[COMRAM] unsigned int 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      unsigned char 
  2694 ;; Registers used:
  2695 ;;		wreg, status,2, status,0, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2705 ;;Total ram usage:        2 bytes
  2706 ;; Hardware stack levels used: 1
  2707 ;; Hardware stack levels required when called: 4
  2708 ;; This function calls:
  2709 ;;		___ftge
  2710 ;;		___lwtoft
  2711 ;; This function is called by:
  2712 ;;		_SGL_HeadLightPasiveState
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716                           	psect	text22
  2717   001546                     __ptext22:
  2718                           	callstack 0
  2719   001546                     _SGL_isNight:
  2720                           	callstack 0
  2721   001546  FFFF               	dw	65535	; assembler added errata NOP
  2722                           
  2723                           ;lights.c: 39: static T_U8 prevState = 0;;lights.c: 40: T_U16 currentLightLevel = headLi
      +                          ghtSM.lightLevel;
  2724                           
  2725                           ;incstack = 0
  2726   001548  C014  F050         	movff	_headLightSM+7,SGL_isNight@currentLightLevel
  2727   00154C  C015  F051         	movff	_headLightSM+8,SGL_isNight@currentLightLevel+1
  2728                           
  2729                           ;lights.c: 42: if(prevState == 0 && currentLightLevel < (2.2*204))
  2730   001550  502E               	movf	SGL_isNight@prevState^0,w,c
  2731   001552  A4D8               	btfss	status,2,c
  2732   001554  D01B               	goto	l1964
  2733   001556  C050  F044         	movff	SGL_isNight@currentLightLevel,___lwtoft@c
  2734   00155A  C051  F045         	movff	SGL_isNight@currentLightLevel+1,___lwtoft@c+1
  2735   00155E  ECD1  F00E         	call	___lwtoft	;wreg free
  2736   001562  C044  F047         	movff	?___lwtoft,___ftge@ff1
  2737   001566  C045  F048         	movff	?___lwtoft+1,___ftge@ff1+1
  2738   00156A  C046  F049         	movff	?___lwtoft+2,___ftge@ff1+2
  2739   00156E  0E66               	movlw	102
  2740   001570  6E4A               	movwf	___ftge@ff2^0,c
  2741   001572  0EE0               	movlw	224
  2742   001574  6E4B               	movwf	(___ftge@ff2+1)^0,c
  2743   001576  0E43               	movlw	67
  2744   001578  6E4C               	movwf	(___ftge@ff2+2)^0,c
  2745   00157A  EC2A  F00B         	call	___ftge	;wreg free
  2746   00157E  B0D8               	btfsc	status,0,c
  2747   001580  D005               	goto	l1964
  2748                           
  2749                           ;lights.c: 43: {;lights.c: 44: prevState = 1;
  2750   001582  0E01               	movlw	1
  2751   001584  FFFF               	dw	65535	; assembler added errata NOP
  2752   001586  6E2E               	movwf	SGL_isNight@prevState^0,c
  2753                           
  2754                           ;lights.c: 45: return 1;
  2755   001588  0E01               	movlw	1
  2756   00158A  D01E               	goto	l126
  2757   00158C                     l1964:
  2758   00158C  FFFF               	dw	65535	; assembler added errata NOP
  2759                           
  2760                           ;lights.c: 46: };lights.c: 48: if(prevState == 1 && currentLightLevel > (2.4*204))
  2761   00158E  042E               	decf	SGL_isNight@prevState^0,w,c
  2762   001590  A4D8               	btfss	status,2,c
  2763   001592  D018               	goto	l1974
  2764   001594  0ECD               	movlw	205
  2765   001596  6E47               	movwf	___ftge@ff1^0,c
  2766   001598  0EF4               	movlw	244
  2767   00159A  6E48               	movwf	(___ftge@ff1+1)^0,c
  2768   00159C  0E43               	movlw	67
  2769   00159E  6E49               	movwf	(___ftge@ff1+2)^0,c
  2770   0015A0  C050  F044         	movff	SGL_isNight@currentLightLevel,___lwtoft@c
  2771   0015A4  C051  F045         	movff	SGL_isNight@currentLightLevel+1,___lwtoft@c+1
  2772   0015A8  ECD1  F00E         	call	___lwtoft	;wreg free
  2773   0015AC  C044  F04A         	movff	?___lwtoft,___ftge@ff2
  2774   0015B0  C045  F04B         	movff	?___lwtoft+1,___ftge@ff2+1
  2775   0015B4  C046  F04C         	movff	?___lwtoft+2,___ftge@ff2+2
  2776   0015B8  EC2A  F00B         	call	___ftge	;wreg free
  2777   0015BC  B0D8               	btfsc	status,0,c
  2778   0015BE  D002               	goto	l1974
  2779                           
  2780                           ;lights.c: 49: {;lights.c: 50: prevState = 0;
  2781   0015C0  0E00               	movlw	0
  2782   0015C2  D7E0               	goto	L2
  2783   0015C4                     l1974:
  2784   0015C4  FFFF               	dw	65535	; assembler added errata NOP
  2785                           
  2786                           ;lights.c: 52: };lights.c: 54: return prevState;
  2787   0015C6  502E               	movf	SGL_isNight@prevState^0,w,c
  2788   0015C8                     l126:
  2789   0015C8  FFFF               	dw	65535	; assembler added errata NOP
  2790   0015CA  0012               	return		;funcret
  2791   0015CC  FFFF               	dw	65535	; errata NOP
  2792   0015CE                     __end_of_SGL_isNight:
  2793                           	callstack 0
  2794                           
  2795 ;; *************** function _SGL_HeadLightEventPoll *****************
  2796 ;; Defined at:
  2797 ;;		line 114 in file "lights.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2815 ;;Total ram usage:        0 bytes
  2816 ;; Hardware stack levels used: 1
  2817 ;; Hardware stack levels required when called: 4
  2818 ;; This function calls:
  2819 ;;		_IOC_T16GetInputPort
  2820 ;; This function is called by:
  2821 ;;		_LIGHTS_HeadLampInit
  2822 ;;		_LIGHTS_HeadLampRun
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text23
  2827   001D78                     __ptext23:
  2828                           	callstack 0
  2829   001D78                     _SGL_HeadLightEventPoll:
  2830                           	callstack 0
  2831   001D78  FFFF               	dw	65535	; assembler added errata NOP
  2832                           
  2833                           ;lights.c: 116: headLightSM.faruri = IOC_T16GetInputPort(IOC_FARURI);
  2834                           
  2835                           ;incstack = 0
  2836   001D7A  0E00               	movlw	0
  2837   001D7C  6E47               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2838   001D7E  0E01               	movlw	1
  2839   001D80  6E46               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2840   001D82  EC46  F00D         	call	_IOC_T16GetInputPort	;wreg free
  2841   001D86  5046               	movf	?_IOC_T16GetInputPort^0,w,c
  2842   001D88  6E13               	movwf	(_headLightSM+6)^0,c
  2843                           
  2844                           ;lights.c: 117: headLightSM.lightLevel = IOC_T16GetInputPort(IOC_ADC0);
  2845   001D8A  0E03               	movlw	3
  2846   001D8C  6E47               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2847   001D8E  0E00               	movlw	0
  2848   001D90  6E46               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2849   001D92  EC46  F00D         	call	_IOC_T16GetInputPort	;wreg free
  2850   001D96  C046  F014         	movff	?_IOC_T16GetInputPort,_headLightSM+7
  2851   001D9A  C047  F015         	movff	?_IOC_T16GetInputPort+1,_headLightSM+8
  2852   001D9E  0012               	return		;funcret
  2853   001DA0  FFFF               	dw	65535	; errata NOP
  2854   001DA2                     __end_of_SGL_HeadLightEventPoll:
  2855                           	callstack 0
  2856                           
  2857 ;; *************** function _DIAGNOSIS_ActivateError *****************
  2858 ;; Defined at:
  2859 ;;		line 8 in file "diagnosis.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  sensorValue     2   27[COMRAM] unsigned int 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2874 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2876 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2877 ;;Total ram usage:        2 bytes
  2878 ;; Hardware stack levels used: 1
  2879 ;; Hardware stack levels required when called: 4
  2880 ;; This function calls:
  2881 ;;		_IOC_T16GetInputPort
  2882 ;;		_IOC_vSetOutputPort
  2883 ;;		___ftge
  2884 ;;		___lwtoft
  2885 ;; This function is called by:
  2886 ;;		_SGL_BlinkPasiveState
  2887 ;;		_SGL_BlinkSwitchOnState
  2888 ;;		_SGL_BlinkSwitchOffState
  2889 ;;		_LIGHTS_BrakeRun
  2890 ;;		_SGL_HeadLightActiveState
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text24
  2895   0015CE                     __ptext24:
  2896                           	callstack 0
  2897   0015CE                     _DIAGNOSIS_ActivateError:
  2898                           	callstack 0
  2899   0015CE  FFFF               	dw	65535	; assembler added errata NOP
  2900                           
  2901                           ;diagnosis.c: 10: T_U16 sensorValue = IOC_T16GetInputPort(IOC_ADC1);
  2902                           
  2903                           ;incstack = 0
  2904   0015D0  0E03               	movlw	3
  2905   0015D2  6E47               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2906   0015D4  0E01               	movlw	1
  2907   0015D6  6E46               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2908   0015D8  EC46  F00D         	call	_IOC_T16GetInputPort	;wreg free
  2909   0015DC  C046  F050         	movff	?_IOC_T16GetInputPort,DIAGNOSIS_ActivateError@sensorValue
  2910   0015E0  C047  F051         	movff	?_IOC_T16GetInputPort+1,DIAGNOSIS_ActivateError@sensorValue+1
  2911                           
  2912                           ;diagnosis.c: 12: if(g_lightStateFrana || g_lightStateLumini || g_sglStareSemnal)
  2913   0015E4  5020               	movf	_g_lightStateFrana^0,w,c
  2914   0015E6  1021               	iorwf	(_g_lightStateFrana+1)^0,w,c
  2915   0015E8  A4D8               	btfss	status,2,c
  2916   0015EA  D008               	goto	u1250
  2917   0015EC  501E               	movf	_g_lightStateLumini^0,w,c
  2918   0015EE  101F               	iorwf	(_g_lightStateLumini+1)^0,w,c
  2919   0015F0  A4D8               	btfss	status,2,c
  2920   0015F2  D004               	goto	u1250
  2921   0015F4  502A               	movf	_g_sglStareSemnal^0,w,c
  2922   0015F6  102B               	iorwf	(_g_sglStareSemnal+1)^0,w,c
  2923   0015F8  B4D8               	btfsc	status,2,c
  2924   0015FA  D020               	goto	l1948
  2925   0015FC                     u1250:
  2926   0015FC  FFFF               	dw	65535	; assembler added errata NOP
  2927                           
  2928                           ;diagnosis.c: 13: {;diagnosis.c: 14: if(sensorValue > (4.5*204))
  2929   0015FE  0E80               	movlw	128
  2930   001600  6E47               	movwf	___ftge@ff1^0,c
  2931   001602  0E65               	movlw	101
  2932   001604  6E48               	movwf	(___ftge@ff1+1)^0,c
  2933   001606  0E44               	movlw	68
  2934   001608  6E49               	movwf	(___ftge@ff1+2)^0,c
  2935   00160A  C050  F044         	movff	DIAGNOSIS_ActivateError@sensorValue,___lwtoft@c
  2936   00160E  C051  F045         	movff	DIAGNOSIS_ActivateError@sensorValue+1,___lwtoft@c+1
  2937   001612  ECD1  F00E         	call	___lwtoft	;wreg free
  2938   001616  C044  F04A         	movff	?___lwtoft,___ftge@ff2
  2939   00161A  C045  F04B         	movff	?___lwtoft+1,___ftge@ff2+1
  2940   00161E  C046  F04C         	movff	?___lwtoft+2,___ftge@ff2+2
  2941   001622  EC2A  F00B         	call	___ftge	;wreg free
  2942   001626  B0D8               	btfsc	status,0,c
  2943   001628  D009               	goto	l1948
  2944                           
  2945                           ;diagnosis.c: 15: {;diagnosis.c: 16: IOC_vSetOutputPort(IOC_IE, 1);
  2946   00162A  0E02               	movlw	2
  2947   00162C  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2948   00162E  0E00               	movlw	0
  2949   001630  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2950   001632  0E01               	movlw	1
  2951   001634  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2952   001636  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2953                           
  2954                           ;diagnosis.c: 17: }
  2955   00163A  D009               	goto	l169
  2956   00163C                     l1948:
  2957   00163C  FFFF               	dw	65535	; assembler added errata NOP
  2958                           
  2959                           ;diagnosis.c: 18: else;diagnosis.c: 19: {;diagnosis.c: 20: IOC_vSetOutputPort(IOC_IE, 0)
      +                          ;
  2960   00163E  0E02               	movlw	2
  2961   001640  6E45               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  2962   001642  0E00               	movlw	0
  2963   001644  6E44               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  2964   001646  0E00               	movlw	0
  2965   001648  6E46               	movwf	IOC_vSetOutputPort@u8Value^0,c
  2966   00164A  EC00  F00E         	call	_IOC_vSetOutputPort	;wreg free
  2967   00164E                     l169:
  2968   00164E  FFFF               	dw	65535	; assembler added errata NOP
  2969   001650  0012               	return		;funcret
  2970   001652  FFFF               	dw	65535	; errata NOP
  2971   001654                     __end_of_DIAGNOSIS_ActivateError:
  2972                           	callstack 0
  2973                           
  2974 ;; *************** function ___lwtoft *****************
  2975 ;; Defined at:
  2976 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwtoft.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  c               2   15[COMRAM] unsigned int 
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  3   15[COMRAM] float 
  2983 ;; Registers used:
  2984 ;;		wreg, status,2, status,0, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2990 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2993 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2994 ;;Total ram usage:        3 bytes
  2995 ;; Hardware stack levels used: 1
  2996 ;; Hardware stack levels required when called: 3
  2997 ;; This function calls:
  2998 ;;		___ftpack
  2999 ;; This function is called by:
  3000 ;;		_SGL_isNight
  3001 ;;		_DIAGNOSIS_ActivateError
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           	psect	text25
  3006   001DA2                     __ptext25:
  3007                           	callstack 0
  3008   001DA2                     ___lwtoft:
  3009                           	callstack 0
  3010   001DA2  FFFF               	dw	65535	; assembler added errata NOP
  3011                           
  3012                           ;incstack = 0
  3013   001DA4  C044  F03C         	movff	___lwtoft@c,___ftpack@arg
  3014   001DA8  C045  F03D         	movff	___lwtoft@c+1,___ftpack@arg+1
  3015   001DAC  6A3E               	clrf	(___ftpack@arg+2)^0,c
  3016   001DAE  0E8E               	movlw	142
  3017   001DB0  6E3F               	movwf	___ftpack@exp^0,c
  3018   001DB2  0E00               	movlw	0
  3019   001DB4  6E40               	movwf	___ftpack@sign^0,c
  3020   001DB6  EC63  F009         	call	___ftpack	;wreg free
  3021   001DBA  C03C  F044         	movff	?___ftpack,?___lwtoft
  3022   001DBE  C03D  F045         	movff	?___ftpack+1,?___lwtoft+1
  3023   001DC2  C03E  F046         	movff	?___ftpack+2,?___lwtoft+2
  3024   001DC6  0012               	return		;funcret
  3025   001DC8  FFFF               	dw	65535	; errata NOP
  3026   001DCA                     __end_of___lwtoft:
  3027                           	callstack 0
  3028                           
  3029 ;; *************** function ___ftpack *****************
  3030 ;; Defined at:
  3031 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\float.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  arg             3    7[COMRAM] unsigned um
  3034 ;;  exp             1   10[COMRAM] unsigned char 
  3035 ;;  sign            1   11[COMRAM] unsigned char 
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;		None
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  3    7[COMRAM] float 
  3040 ;; Registers used:
  3041 ;;		wreg, status,2, status,0
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3047 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3049 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3050 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3051 ;;Total ram usage:        8 bytes
  3052 ;; Hardware stack levels used: 1
  3053 ;; Hardware stack levels required when called: 2
  3054 ;; This function calls:
  3055 ;;		Nothing
  3056 ;; This function is called by:
  3057 ;;		___lwtoft
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text26
  3062   0012C6                     __ptext26:
  3063                           	callstack 0
  3064   0012C6                     ___ftpack:
  3065                           	callstack 0
  3066   0012C6  FFFF               	dw	65535	; assembler added errata NOP
  3067                           
  3068                           ;incstack = 0
  3069   0012C8  503F               	movf	___ftpack@exp^0,w,c
  3070   0012CA  B4D8               	btfsc	status,2,c
  3071   0012CC  D005               	goto	u1070
  3072   0012CE  503C               	movf	___ftpack@arg^0,w,c
  3073   0012D0  103D               	iorwf	(___ftpack@arg+1)^0,w,c
  3074   0012D2  103E               	iorwf	(___ftpack@arg+2)^0,w,c
  3075   0012D4  A4D8               	btfss	status,2,c
  3076   0012D6  D00E               	goto	l1844
  3077   0012D8                     u1070:
  3078   0012D8  FFFF               	dw	65535	; assembler added errata NOP
  3079   0012DA  0E00               	movlw	0
  3080   0012DC  6E3C               	movwf	?___ftpack^0,c
  3081   0012DE  0E00               	movlw	0
  3082   0012E0  6E3D               	movwf	(?___ftpack+1)^0,c
  3083   0012E2  0E00               	movlw	0
  3084   0012E4  6E3E               	movwf	(?___ftpack+2)^0,c
  3085   0012E6  D04E               	goto	l691
  3086   0012E8                     l1842:
  3087   0012E8  FFFF               	dw	65535	; assembler added errata NOP
  3088   0012EA  2A3F               	incf	___ftpack@exp^0,f,c
  3089   0012EC  90D8               	bcf	status,0,c
  3090   0012EE  323E               	rrcf	(___ftpack@arg+2)^0,f,c
  3091   0012F0  323D               	rrcf	(___ftpack@arg+1)^0,f,c
  3092   0012F2  323C               	rrcf	___ftpack@arg^0,f,c
  3093   0012F4                     l1844:
  3094   0012F4  FFFF               	dw	65535	; assembler added errata NOP
  3095   0012F6  0E00               	movlw	0
  3096   0012F8  143C               	andwf	___ftpack@arg^0,w,c
  3097   0012FA  6E41               	movwf	??___ftpack^0,c
  3098   0012FC  0E00               	movlw	0
  3099   0012FE  143D               	andwf	(___ftpack@arg+1)^0,w,c
  3100   001300  6E42               	movwf	(??___ftpack+1)^0,c
  3101   001302  0EFE               	movlw	254
  3102   001304  143E               	andwf	(___ftpack@arg+2)^0,w,c
  3103   001306  6E43               	movwf	(??___ftpack+2)^0,c
  3104   001308  5041               	movf	??___ftpack^0,w,c
  3105   00130A  1042               	iorwf	(??___ftpack+1)^0,w,c
  3106   00130C  1043               	iorwf	(??___ftpack+2)^0,w,c
  3107   00130E  B4D8               	btfsc	status,2,c
  3108   001310  D00D               	goto	l1850
  3109   001312  D7EA               	goto	l1842
  3110   001314                     l1846:
  3111   001314  FFFF               	dw	65535	; assembler added errata NOP
  3112   001316  2A3F               	incf	___ftpack@exp^0,f,c
  3113   001318  0E01               	movlw	1
  3114   00131A  263C               	addwf	___ftpack@arg^0,f,c
  3115   00131C  0E00               	movlw	0
  3116   00131E  223D               	addwfc	(___ftpack@arg+1)^0,f,c
  3117   001320  0E00               	movlw	0
  3118   001322  223E               	addwfc	(___ftpack@arg+2)^0,f,c
  3119   001324  90D8               	bcf	status,0,c
  3120   001326  323E               	rrcf	(___ftpack@arg+2)^0,f,c
  3121   001328  323D               	rrcf	(___ftpack@arg+1)^0,f,c
  3122   00132A  323C               	rrcf	___ftpack@arg^0,f,c
  3123   00132C                     l1850:
  3124   00132C  FFFF               	dw	65535	; assembler added errata NOP
  3125   00132E  0E00               	movlw	0
  3126   001330  143C               	andwf	___ftpack@arg^0,w,c
  3127   001332  6E41               	movwf	??___ftpack^0,c
  3128   001334  0E00               	movlw	0
  3129   001336  143D               	andwf	(___ftpack@arg+1)^0,w,c
  3130   001338  6E42               	movwf	(??___ftpack+1)^0,c
  3131   00133A  0EFF               	movlw	255
  3132   00133C  143E               	andwf	(___ftpack@arg+2)^0,w,c
  3133   00133E  6E43               	movwf	(??___ftpack+2)^0,c
  3134   001340  5041               	movf	??___ftpack^0,w,c
  3135   001342  1042               	iorwf	(??___ftpack+1)^0,w,c
  3136   001344  1043               	iorwf	(??___ftpack+2)^0,w,c
  3137   001346  B4D8               	btfsc	status,2,c
  3138   001348  D007               	goto	l1854
  3139   00134A  D7E4               	goto	l1846
  3140   00134C                     l1852:
  3141   00134C  FFFF               	dw	65535	; assembler added errata NOP
  3142   00134E  063F               	decf	___ftpack@exp^0,f,c
  3143   001350  90D8               	bcf	status,0,c
  3144   001352  363C               	rlcf	___ftpack@arg^0,f,c
  3145   001354  363D               	rlcf	(___ftpack@arg+1)^0,f,c
  3146   001356  363E               	rlcf	(___ftpack@arg+2)^0,f,c
  3147   001358                     l1854:
  3148   001358  FFFF               	dw	65535	; assembler added errata NOP
  3149   00135A  BE3D               	btfsc	(___ftpack@arg+1)^0,7,c
  3150   00135C  D003               	goto	u1110
  3151   00135E  0E02               	movlw	2
  3152   001360  603F               	cpfslt	___ftpack@exp^0,c
  3153   001362  D7F4               	goto	l1852
  3154   001364                     u1110:
  3155   001364  FFFF               	dw	65535	; assembler added errata NOP
  3156   001366  A03F               	btfss	___ftpack@exp^0,0,c
  3157   001368  9E3D               	bcf	(___ftpack@arg+1)^0,7,c
  3158   00136A  90D8               	bcf	status,0,c
  3159   00136C  323F               	rrcf	___ftpack@exp^0,f,c
  3160   00136E  503F               	movf	___ftpack@exp^0,w,c
  3161   001370  123E               	iorwf	(___ftpack@arg+2)^0,f,c
  3162   001372  5040               	movf	___ftpack@sign^0,w,c
  3163   001374  A4D8               	btfss	status,2,c
  3164   001376  8E3E               	bsf	(___ftpack@arg+2)^0,7,c
  3165   001378  C03C  F03C         	movff	___ftpack@arg,?___ftpack
  3166   00137C  C03D  F03D         	movff	___ftpack@arg+1,?___ftpack+1
  3167   001380  C03E  F03E         	movff	___ftpack@arg+2,?___ftpack+2
  3168   001384                     l691:
  3169   001384  FFFF               	dw	65535	; assembler added errata NOP
  3170   001386  0012               	return		;funcret
  3171   001388  FFFF               	dw	65535	; errata NOP
  3172   00138A                     __end_of___ftpack:
  3173                           	callstack 0
  3174                           
  3175 ;; *************** function ___ftge *****************
  3176 ;; Defined at:
  3177 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftge.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  ff1             3   18[COMRAM] float 
  3180 ;;  ff2             3   21[COMRAM] float 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;		None
  3183 ;; Return value:  Size  Location     Type
  3184 ;;		None               void
  3185 ;; Registers used:
  3186 ;;		wreg, status,2, status,0
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3192 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3194 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3195 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3196 ;;Total ram usage:        9 bytes
  3197 ;; Hardware stack levels used: 1
  3198 ;; Hardware stack levels required when called: 2
  3199 ;; This function calls:
  3200 ;;		Nothing
  3201 ;; This function is called by:
  3202 ;;		_SGL_isNight
  3203 ;;		_DIAGNOSIS_ActivateError
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text27
  3208   001654                     __ptext27:
  3209                           	callstack 0
  3210   001654                     ___ftge:
  3211                           	callstack 0
  3212   001654  FFFF               	dw	65535	; assembler added errata NOP
  3213                           
  3214                           ;incstack = 0
  3215   001656  AE49               	btfss	(___ftge@ff1+2)^0,7,c
  3216   001658  D00F               	goto	l1898
  3217   00165A  0E00               	movlw	0
  3218   00165C  6E4D               	movwf	??___ftge^0,c
  3219   00165E  0E00               	movlw	0
  3220   001660  6E4E               	movwf	(??___ftge+1)^0,c
  3221   001662  0E80               	movlw	128
  3222   001664  6E4F               	movwf	(??___ftge+2)^0,c
  3223   001666  5047               	movf	___ftge@ff1^0,w,c
  3224   001668  5C4D               	subwf	??___ftge^0,w,c
  3225   00166A  6E47               	movwf	___ftge@ff1^0,c
  3226   00166C  5048               	movf	(___ftge@ff1+1)^0,w,c
  3227   00166E  584E               	subwfb	(??___ftge+1)^0,w,c
  3228   001670  6E48               	movwf	(___ftge@ff1+1)^0,c
  3229   001672  5049               	movf	(___ftge@ff1+2)^0,w,c
  3230   001674  584F               	subwfb	(??___ftge+2)^0,w,c
  3231   001676  6E49               	movwf	(___ftge@ff1+2)^0,c
  3232   001678                     l1898:
  3233   001678  FFFF               	dw	65535	; assembler added errata NOP
  3234   00167A  AE4C               	btfss	(___ftge@ff2+2)^0,7,c
  3235   00167C  D00F               	goto	l1902
  3236   00167E  0E00               	movlw	0
  3237   001680  6E4D               	movwf	??___ftge^0,c
  3238   001682  0E00               	movlw	0
  3239   001684  6E4E               	movwf	(??___ftge+1)^0,c
  3240   001686  0E80               	movlw	128
  3241   001688  6E4F               	movwf	(??___ftge+2)^0,c
  3242   00168A  504A               	movf	___ftge@ff2^0,w,c
  3243   00168C  5C4D               	subwf	??___ftge^0,w,c
  3244   00168E  6E4A               	movwf	___ftge@ff2^0,c
  3245   001690  504B               	movf	(___ftge@ff2+1)^0,w,c
  3246   001692  584E               	subwfb	(??___ftge+1)^0,w,c
  3247   001694  6E4B               	movwf	(___ftge@ff2+1)^0,c
  3248   001696  504C               	movf	(___ftge@ff2+2)^0,w,c
  3249   001698  584F               	subwfb	(??___ftge+2)^0,w,c
  3250   00169A  6E4C               	movwf	(___ftge@ff2+2)^0,c
  3251   00169C                     l1902:
  3252   00169C  FFFF               	dw	65535	; assembler added errata NOP
  3253   00169E  0E00               	movlw	0
  3254   0016A0  1A47               	xorwf	___ftge@ff1^0,f,c
  3255   0016A2  0E00               	movlw	0
  3256   0016A4  1A48               	xorwf	(___ftge@ff1+1)^0,f,c
  3257   0016A6  0E80               	movlw	128
  3258   0016A8  1A49               	xorwf	(___ftge@ff1+2)^0,f,c
  3259   0016AA  0E00               	movlw	0
  3260   0016AC  1A4A               	xorwf	___ftge@ff2^0,f,c
  3261   0016AE  0E00               	movlw	0
  3262   0016B0  1A4B               	xorwf	(___ftge@ff2+1)^0,f,c
  3263   0016B2  0E80               	movlw	128
  3264   0016B4  1A4C               	xorwf	(___ftge@ff2+2)^0,f,c
  3265   0016B6  504A               	movf	___ftge@ff2^0,w,c
  3266   0016B8  5C47               	subwf	___ftge@ff1^0,w,c
  3267   0016BA  504B               	movf	(___ftge@ff2+1)^0,w,c
  3268   0016BC  5848               	subwfb	(___ftge@ff1+1)^0,w,c
  3269   0016BE  504C               	movf	(___ftge@ff2+2)^0,w,c
  3270   0016C0  5849               	subwfb	(___ftge@ff1+2)^0,w,c
  3271   0016C2  B0D8               	btfsc	status,0,c
  3272   0016C4  D002               	goto	l1908
  3273   0016C6  90D8               	bcf	status,0,c
  3274   0016C8  D002               	goto	l766
  3275   0016CA                     l1908:
  3276   0016CA  FFFF               	dw	65535	; assembler added errata NOP
  3277   0016CC  80D8               	bsf	status,0,c
  3278   0016CE                     l766:
  3279   0016CE  FFFF               	dw	65535	; assembler added errata NOP
  3280   0016D0  0012               	return		;funcret
  3281   0016D2  FFFF               	dw	65535	; errata NOP
  3282   0016D4                     __end_of___ftge:
  3283                           	callstack 0
  3284                           
  3285 ;; *************** function _IOC_vSetOutputPort *****************
  3286 ;; Defined at:
  3287 ;;		line 5 in file "ioc.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  u16ChannelSe    2   15[COMRAM] const enum E10327
  3290 ;;  u8Value         1   17[COMRAM] const unsigned char 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  u16ChannelMa    2   18[COMRAM] unsigned int 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3302 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3303 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3305 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3306 ;;Total ram usage:        5 bytes
  3307 ;; Hardware stack levels used: 1
  3308 ;; Hardware stack levels required when called: 3
  3309 ;; This function calls:
  3310 ;;		_PCS_vSetOutputPortD
  3311 ;;		_PCS_vSetOutputPortE
  3312 ;; This function is called by:
  3313 ;;		_SGL_toggleAllHazardLights
  3314 ;;		_SGL_toggleSideHazardLights
  3315 ;;		_SGL_setAllHazardLights
  3316 ;;		_SGL_setSideHazardLights
  3317 ;;		_LIGHTS_BrakeInit
  3318 ;;		_LIGHTS_BrakeRun
  3319 ;;		_SGL_HeadLightPasiveState
  3320 ;;		_SGL_HeadLightActiveState
  3321 ;;		_DIAGNOSIS_ActivateError
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           	psect	text28
  3326   001C00                     __ptext28:
  3327                           	callstack 0
  3328   001C00                     _IOC_vSetOutputPort:
  3329                           	callstack 0
  3330   001C00  FFFF               	dw	65535	; assembler added errata NOP
  3331                           
  3332                           ;ioc.c: 7: T_U16 u16ChannelMask = (u16ChannelSelect&0xFF00);
  3333                           
  3334                           ;incstack = 0
  3335   001C02  0E00               	movlw	0
  3336   001C04  1444               	andwf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3337   001C06  6E47               	movwf	IOC_vSetOutputPort@u16ChannelMask^0,c
  3338   001C08  0EFF               	movlw	255
  3339   001C0A  1445               	andwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,w,c
  3340   001C0C  6E48               	movwf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,c
  3341                           
  3342                           ;ioc.c: 9: if(u16ChannelMask == IOC_PORTD)
  3343   001C0E  0448               	decf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,w,c
  3344   001C10  1047               	iorwf	IOC_vSetOutputPort@u16ChannelMask^0,w,c
  3345   001C12  A4D8               	btfss	status,2,c
  3346   001C14  D006               	goto	l1874
  3347                           
  3348                           ;ioc.c: 10: {;ioc.c: 11: PCS_vSetOutputPortD(u16ChannelSelect, u8Value);
  3349   001C16  C046  F03C         	movff	IOC_vSetOutputPort@u8Value,PCS_vSetOutputPortD@u8Value
  3350   001C1A  5044               	movf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3351   001C1C  ECA9  F00B         	call	_PCS_vSetOutputPortD
  3352                           
  3353                           ;ioc.c: 12: }
  3354   001C20  D00B               	goto	l358
  3355   001C22                     l1874:
  3356   001C22  FFFF               	dw	65535	; assembler added errata NOP
  3357                           
  3358                           ;ioc.c: 13: else if(u16ChannelMask == IOC_PORTE)
  3359   001C24  0E02               	movlw	2
  3360   001C26  1848               	xorwf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,w,c
  3361   001C28  1047               	iorwf	IOC_vSetOutputPort@u16ChannelMask^0,w,c
  3362   001C2A  A4D8               	btfss	status,2,c
  3363   001C2C  D005               	goto	l358
  3364                           
  3365                           ;ioc.c: 14: {;ioc.c: 15: PCS_vSetOutputPortE(u16ChannelSelect, u8Value);
  3366   001C2E  C046  F03C         	movff	IOC_vSetOutputPort@u8Value,PCS_vSetOutputPortE@u8Value
  3367   001C32  5044               	movf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  3368   001C34  EC6A  F00B         	call	_PCS_vSetOutputPortE
  3369   001C38                     l358:
  3370   001C38  FFFF               	dw	65535	; assembler added errata NOP
  3371   001C3A  0012               	return		;funcret
  3372   001C3C  FFFF               	dw	65535	; errata NOP
  3373   001C3E                     __end_of_IOC_vSetOutputPort:
  3374                           	callstack 0
  3375                           
  3376 ;; *************** function _PCS_vSetOutputPortE *****************
  3377 ;; Defined at:
  3378 ;;		line 35 in file "pcs.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  u8BitNumber     1    wreg     const unsigned char 
  3381 ;;  u8Value         1    7[COMRAM] const unsigned char 
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;  u8BitNumber     1   13[COMRAM] const unsigned char 
  3384 ;;  u8BitNumberV    1   14[COMRAM] unsigned char 
  3385 ;;  u8BitValue      1   12[COMRAM] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2, status,0
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3395 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3396 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3397 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3398 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3399 ;;Total ram usage:        8 bytes
  3400 ;; Hardware stack levels used: 1
  3401 ;; Hardware stack levels required when called: 2
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_IOC_vSetOutputPort
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text29
  3410   0016D4                     __ptext29:
  3411                           	callstack 0
  3412   0016D4                     _PCS_vSetOutputPortE:
  3413                           	callstack 0
  3414   0016D4  FFFF               	dw	65535	; assembler added errata NOP
  3415                           
  3416                           ;incstack = 0
  3417                           ;PCS_vSetOutputPortE@u8BitNumber stored from wreg
  3418   0016D6  6E42               	movwf	PCS_vSetOutputPortE@u8BitNumber^0,c
  3419                           
  3420                           ;pcs.c: 37: T_U8 u8BitValue = u8Value>0 ? 1 : 0;
  3421   0016D8  503C               	movf	PCS_vSetOutputPortE@u8Value^0,w,c
  3422   0016DA  B4D8               	btfsc	status,2,c
  3423   0016DC  D002               	goto	u970
  3424   0016DE  0E01               	movlw	1
  3425   0016E0  D002               	goto	u980
  3426   0016E2                     u970:
  3427   0016E2  FFFF               	dw	65535	; assembler added errata NOP
  3428   0016E4  0E00               	movlw	0
  3429   0016E6                     u980:
  3430   0016E6  FFFF               	dw	65535	; assembler added errata NOP
  3431   0016E8  6E41               	movwf	PCS_vSetOutputPortE@u8BitValue^0,c
  3432                           
  3433                           ;pcs.c: 38: T_U8 u8BitNumberValue = u8BitNumber<=1 ? u8BitNumber : 1;
  3434   0016EA  0E01               	movlw	1
  3435   0016EC  6442               	cpfsgt	PCS_vSetOutputPortE@u8BitNumber^0,c
  3436   0016EE  D005               	goto	l258
  3437   0016F0  0E00               	movlw	0
  3438   0016F2  6E40               	movwf	(_PCS_vSetOutputPortE$839+1)^0,c
  3439   0016F4  0E01               	movlw	1
  3440   0016F6  6E3F               	movwf	_PCS_vSetOutputPortE$839^0,c
  3441   0016F8  D004               	goto	l260
  3442   0016FA                     l258:
  3443   0016FA  FFFF               	dw	65535	; assembler added errata NOP
  3444   0016FC  C042  F03F         	movff	PCS_vSetOutputPortE@u8BitNumber,_PCS_vSetOutputPortE$839
  3445   001700  6A40               	clrf	(_PCS_vSetOutputPortE$839+1)^0,c
  3446   001702                     l260:
  3447   001702  FFFF               	dw	65535	; assembler added errata NOP
  3448   001704  C03F  F043         	movff	_PCS_vSetOutputPortE$839,PCS_vSetOutputPortE@u8BitNumberValue
  3449                           
  3450                           ;pcs.c: 40: if(1 == u8BitValue)
  3451   001708  0441               	decf	PCS_vSetOutputPortE@u8BitValue^0,w,c
  3452   00170A  A4D8               	btfss	status,2,c
  3453   00170C  D00F               	goto	l1824
  3454                           
  3455                           ;pcs.c: 41: {;pcs.c: 42: PORTE |= (0x01<<u8BitNumberValue);
  3456   00170E  C043  F03D         	movff	PCS_vSetOutputPortE@u8BitNumberValue,??_PCS_vSetOutputPortE
  3457   001712  0E01               	movlw	1
  3458   001714  6E3E               	movwf	(??_PCS_vSetOutputPortE+1)^0,c
  3459   001716  2A3D               	incf	??_PCS_vSetOutputPortE^0,f,c
  3460   001718  D003               	goto	u1014
  3461   00171A                     u1015:
  3462   00171A  FFFF               	dw	65535	; assembler added errata NOP
  3463   00171C  90D8               	bcf	status,0,c
  3464   00171E  363E               	rlcf	(??_PCS_vSetOutputPortE+1)^0,f,c
  3465   001720                     u1014:
  3466   001720  FFFF               	dw	65535	; assembler added errata NOP
  3467   001722  2E3D               	decfsz	??_PCS_vSetOutputPortE^0,f,c
  3468   001724  D7FA               	goto	u1015
  3469   001726  503E               	movf	(??_PCS_vSetOutputPortE+1)^0,w,c
  3470   001728  1284               	iorwf	132,f,c	;volatile
  3471                           
  3472                           ;pcs.c: 43: }
  3473   00172A  D010               	goto	l263
  3474   00172C                     l1824:
  3475   00172C  FFFF               	dw	65535	; assembler added errata NOP
  3476                           
  3477                           ;pcs.c: 44: else;pcs.c: 45: {;pcs.c: 46: PORTE &= ~(0x01<<u8BitNumberValue);
  3478   00172E  C043  F03D         	movff	PCS_vSetOutputPortE@u8BitNumberValue,??_PCS_vSetOutputPortE
  3479   001732  0E01               	movlw	1
  3480   001734  6E3E               	movwf	(??_PCS_vSetOutputPortE+1)^0,c
  3481   001736  2A3D               	incf	??_PCS_vSetOutputPortE^0,f,c
  3482   001738  D003               	goto	u1024
  3483   00173A                     u1025:
  3484   00173A  FFFF               	dw	65535	; assembler added errata NOP
  3485   00173C  90D8               	bcf	status,0,c
  3486   00173E  363E               	rlcf	(??_PCS_vSetOutputPortE+1)^0,f,c
  3487   001740                     u1024:
  3488   001740  FFFF               	dw	65535	; assembler added errata NOP
  3489   001742  2E3D               	decfsz	??_PCS_vSetOutputPortE^0,f,c
  3490   001744  D7FA               	goto	u1025
  3491   001746  503E               	movf	(??_PCS_vSetOutputPortE+1)^0,w,c
  3492   001748  0AFF               	xorlw	255
  3493   00174A  1684               	andwf	132,f,c	;volatile
  3494   00174C                     l263:
  3495   00174C  FFFF               	dw	65535	; assembler added errata NOP
  3496   00174E  0012               	return		;funcret
  3497   001750  FFFF               	dw	65535	; errata NOP
  3498   001752                     __end_of_PCS_vSetOutputPortE:
  3499                           	callstack 0
  3500                           
  3501 ;; *************** function _PCS_vSetOutputPortD *****************
  3502 ;; Defined at:
  3503 ;;		line 20 in file "pcs.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;  u8BitNumber     1    wreg     const unsigned char 
  3506 ;;  u8Value         1    7[COMRAM] const unsigned char 
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  u8BitNumber     1   13[COMRAM] const unsigned char 
  3509 ;;  u8BitNumberV    1   14[COMRAM] unsigned char 
  3510 ;;  u8BitValue      1   12[COMRAM] unsigned char 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3520 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3521 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3522 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3523 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3524 ;;Total ram usage:        8 bytes
  3525 ;; Hardware stack levels used: 1
  3526 ;; Hardware stack levels required when called: 2
  3527 ;; This function calls:
  3528 ;;		Nothing
  3529 ;; This function is called by:
  3530 ;;		_IOC_vSetOutputPort
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           	psect	text30
  3535   001752                     __ptext30:
  3536                           	callstack 0
  3537   001752                     _PCS_vSetOutputPortD:
  3538                           	callstack 0
  3539   001752  FFFF               	dw	65535	; assembler added errata NOP
  3540                           
  3541                           ;incstack = 0
  3542                           ;PCS_vSetOutputPortD@u8BitNumber stored from wreg
  3543   001754  6E42               	movwf	PCS_vSetOutputPortD@u8BitNumber^0,c
  3544                           
  3545                           ;pcs.c: 22: T_U8 u8BitValue = u8Value>0 ? 1 : 0;
  3546   001756  503C               	movf	PCS_vSetOutputPortD@u8Value^0,w,c
  3547   001758  B4D8               	btfsc	status,2,c
  3548   00175A  D002               	goto	u910
  3549   00175C  0E01               	movlw	1
  3550   00175E  D002               	goto	u920
  3551   001760                     u910:
  3552   001760  FFFF               	dw	65535	; assembler added errata NOP
  3553   001762  0E00               	movlw	0
  3554   001764                     u920:
  3555   001764  FFFF               	dw	65535	; assembler added errata NOP
  3556   001766  6E41               	movwf	PCS_vSetOutputPortD@u8BitValue^0,c
  3557                           
  3558                           ;pcs.c: 23: T_U8 u8BitNumberValue = u8BitNumber<=7 ? u8BitNumber : 7;
  3559   001768  0E07               	movlw	7
  3560   00176A  6442               	cpfsgt	PCS_vSetOutputPortD@u8BitNumber^0,c
  3561   00176C  D005               	goto	l249
  3562   00176E  0E00               	movlw	0
  3563   001770  6E40               	movwf	(_PCS_vSetOutputPortD$833+1)^0,c
  3564   001772  0E07               	movlw	7
  3565   001774  6E3F               	movwf	_PCS_vSetOutputPortD$833^0,c
  3566   001776  D004               	goto	l251
  3567   001778                     l249:
  3568   001778  FFFF               	dw	65535	; assembler added errata NOP
  3569   00177A  C042  F03F         	movff	PCS_vSetOutputPortD@u8BitNumber,_PCS_vSetOutputPortD$833
  3570   00177E  6A40               	clrf	(_PCS_vSetOutputPortD$833+1)^0,c
  3571   001780                     l251:
  3572   001780  FFFF               	dw	65535	; assembler added errata NOP
  3573   001782  C03F  F043         	movff	_PCS_vSetOutputPortD$833,PCS_vSetOutputPortD@u8BitNumberValue
  3574                           
  3575                           ;pcs.c: 25: if(1 == u8BitValue)
  3576   001786  0441               	decf	PCS_vSetOutputPortD@u8BitValue^0,w,c
  3577   001788  A4D8               	btfss	status,2,c
  3578   00178A  D00F               	goto	l1812
  3579                           
  3580                           ;pcs.c: 26: {;pcs.c: 27: PORTD |= (0x01<<u8BitNumberValue);
  3581   00178C  C043  F03D         	movff	PCS_vSetOutputPortD@u8BitNumberValue,??_PCS_vSetOutputPortD
  3582   001790  0E01               	movlw	1
  3583   001792  6E3E               	movwf	(??_PCS_vSetOutputPortD+1)^0,c
  3584   001794  2A3D               	incf	??_PCS_vSetOutputPortD^0,f,c
  3585   001796  D003               	goto	u954
  3586   001798                     u955:
  3587   001798  FFFF               	dw	65535	; assembler added errata NOP
  3588   00179A  90D8               	bcf	status,0,c
  3589   00179C  363E               	rlcf	(??_PCS_vSetOutputPortD+1)^0,f,c
  3590   00179E                     u954:
  3591   00179E  FFFF               	dw	65535	; assembler added errata NOP
  3592   0017A0  2E3D               	decfsz	??_PCS_vSetOutputPortD^0,f,c
  3593   0017A2  D7FA               	goto	u955
  3594   0017A4  503E               	movf	(??_PCS_vSetOutputPortD+1)^0,w,c
  3595   0017A6  1283               	iorwf	131,f,c	;volatile
  3596                           
  3597                           ;pcs.c: 28: }
  3598   0017A8  D010               	goto	l254
  3599   0017AA                     l1812:
  3600   0017AA  FFFF               	dw	65535	; assembler added errata NOP
  3601                           
  3602                           ;pcs.c: 29: else;pcs.c: 30: {;pcs.c: 31: PORTD &= ~(0x01<<u8BitNumberValue);
  3603   0017AC  C043  F03D         	movff	PCS_vSetOutputPortD@u8BitNumberValue,??_PCS_vSetOutputPortD
  3604   0017B0  0E01               	movlw	1
  3605   0017B2  6E3E               	movwf	(??_PCS_vSetOutputPortD+1)^0,c
  3606   0017B4  2A3D               	incf	??_PCS_vSetOutputPortD^0,f,c
  3607   0017B6  D003               	goto	u964
  3608   0017B8                     u965:
  3609   0017B8  FFFF               	dw	65535	; assembler added errata NOP
  3610   0017BA  90D8               	bcf	status,0,c
  3611   0017BC  363E               	rlcf	(??_PCS_vSetOutputPortD+1)^0,f,c
  3612   0017BE                     u964:
  3613   0017BE  FFFF               	dw	65535	; assembler added errata NOP
  3614   0017C0  2E3D               	decfsz	??_PCS_vSetOutputPortD^0,f,c
  3615   0017C2  D7FA               	goto	u965
  3616   0017C4  503E               	movf	(??_PCS_vSetOutputPortD+1)^0,w,c
  3617   0017C6  0AFF               	xorlw	255
  3618   0017C8  1683               	andwf	131,f,c	;volatile
  3619   0017CA                     l254:
  3620   0017CA  FFFF               	dw	65535	; assembler added errata NOP
  3621   0017CC  0012               	return		;funcret
  3622   0017CE  FFFF               	dw	65535	; errata NOP
  3623   0017D0                     __end_of_PCS_vSetOutputPortD:
  3624                           	callstack 0
  3625                           
  3626 ;; *************** function _IOC_T16GetInputPort *****************
  3627 ;; Defined at:
  3628 ;;		line 19 in file "ioc.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  u16ChannelSe    2   17[COMRAM] const enum E10339
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  u16ChannelMa    2   21[COMRAM] unsigned int 
  3633 ;;  pinValue        2   19[COMRAM] unsigned int 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  2   17[COMRAM] unsigned int 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3643 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3644 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3646 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3647 ;;Total ram usage:        6 bytes
  3648 ;; Hardware stack levels used: 1
  3649 ;; Hardware stack levels required when called: 3
  3650 ;; This function calls:
  3651 ;;		_ADC_u16ReadAdcValue
  3652 ;;		_PCS_T16GetInputPortC
  3653 ;; This function is called by:
  3654 ;;		_SGL_BlinkEventPoll
  3655 ;;		_LIGHTS_BrakeRun
  3656 ;;		_SGL_HeadLightEventPoll
  3657 ;;		_DIAGNOSIS_ActivateError
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           	psect	text31
  3662   001A8C                     __ptext31:
  3663                           	callstack 0
  3664   001A8C                     _IOC_T16GetInputPort:
  3665                           	callstack 0
  3666   001A8C  FFFF               	dw	65535	; assembler added errata NOP
  3667                           
  3668                           ;ioc.c: 21: T_U16 pinValue = 0;
  3669                           
  3670                           ;incstack = 0
  3671   001A8E  0E00               	movlw	0
  3672   001A90  6E49               	movwf	(IOC_T16GetInputPort@pinValue+1)^0,c
  3673   001A92  0E00               	movlw	0
  3674   001A94  6E48               	movwf	IOC_T16GetInputPort@pinValue^0,c
  3675                           
  3676                           ;ioc.c: 22: T_U16 u16ChannelMask = (u16ChannelSelect&0xFF00);
  3677   001A96  0E00               	movlw	0
  3678   001A98  1446               	andwf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3679   001A9A  6E4A               	movwf	IOC_T16GetInputPort@u16ChannelMask^0,c
  3680   001A9C  0EFF               	movlw	255
  3681   001A9E  1447               	andwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,w,c
  3682   001AA0  6E4B               	movwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,c
  3683                           
  3684                           ;ioc.c: 24: if(u16ChannelMask == IOC_PORTC)
  3685   001AA2  504A               	movf	IOC_T16GetInputPort@u16ChannelMask^0,w,c
  3686   001AA4  104B               	iorwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,w,c
  3687   001AA6  A4D8               	btfss	status,2,c
  3688   001AA8  D008               	goto	l1886
  3689                           
  3690                           ;ioc.c: 25: {;ioc.c: 26: pinValue = PCS_T16GetInputPortC(u16ChannelSelect);
  3691   001AAA  5046               	movf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3692   001AAC  EC93  F00C         	call	_PCS_T16GetInputPortC
  3693   001AB0  C03C  F048         	movff	?_PCS_T16GetInputPortC,IOC_T16GetInputPort@pinValue
  3694   001AB4  C03D  F049         	movff	?_PCS_T16GetInputPortC+1,IOC_T16GetInputPort@pinValue+1
  3695                           
  3696                           ;ioc.c: 27: }
  3697   001AB8  D00D               	goto	l1890
  3698   001ABA                     l1886:
  3699   001ABA  FFFF               	dw	65535	; assembler added errata NOP
  3700                           
  3701                           ;ioc.c: 28: else if(u16ChannelMask == IOC_PORTA)
  3702   001ABC  0E03               	movlw	3
  3703   001ABE  184B               	xorwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,w,c
  3704   001AC0  104A               	iorwf	IOC_T16GetInputPort@u16ChannelMask^0,w,c
  3705   001AC2  A4D8               	btfss	status,2,c
  3706   001AC4  D007               	goto	l1890
  3707                           
  3708                           ;ioc.c: 29: {;ioc.c: 30: pinValue = ADC_u16ReadAdcValue(u16ChannelSelect);
  3709   001AC6  5046               	movf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  3710   001AC8  EC1F  F00E         	call	_ADC_u16ReadAdcValue
  3711   001ACC  C03C  F048         	movff	?_ADC_u16ReadAdcValue,IOC_T16GetInputPort@pinValue
  3712   001AD0  C03D  F049         	movff	?_ADC_u16ReadAdcValue+1,IOC_T16GetInputPort@pinValue+1
  3713   001AD4                     l1890:
  3714   001AD4  FFFF               	dw	65535	; assembler added errata NOP
  3715                           
  3716                           ;ioc.c: 31: };ioc.c: 33: return pinValue;
  3717   001AD6  C048  F046         	movff	IOC_T16GetInputPort@pinValue,?_IOC_T16GetInputPort
  3718   001ADA  C049  F047         	movff	IOC_T16GetInputPort@pinValue+1,?_IOC_T16GetInputPort+1
  3719   001ADE  0012               	return		;funcret
  3720   001AE0  FFFF               	dw	65535	; errata NOP
  3721   001AE2                     __end_of_IOC_T16GetInputPort:
  3722                           	callstack 0
  3723                           
  3724 ;; *************** function _PCS_T16GetInputPortC *****************
  3725 ;; Defined at:
  3726 ;;		line 50 in file "pcs.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  u8BitNumber     1    wreg     const unsigned char 
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  u8BitNumber     1   15[COMRAM] const unsigned char 
  3731 ;;  u8BitNumberV    1   16[COMRAM] unsigned char 
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  2    7[COMRAM] unsigned int 
  3734 ;; Registers used:
  3735 ;;		wreg, status,2, status,0
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3741 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3742 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3743 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3744 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3745 ;;Total ram usage:       10 bytes
  3746 ;; Hardware stack levels used: 1
  3747 ;; Hardware stack levels required when called: 2
  3748 ;; This function calls:
  3749 ;;		Nothing
  3750 ;; This function is called by:
  3751 ;;		_IOC_T16GetInputPort
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           	psect	text32
  3756   001926                     __ptext32:
  3757                           	callstack 0
  3758   001926                     _PCS_T16GetInputPortC:
  3759                           	callstack 0
  3760   001926  FFFF               	dw	65535	; assembler added errata NOP
  3761                           
  3762                           ;incstack = 0
  3763                           ;PCS_T16GetInputPortC@u8BitNumber stored from wreg
  3764   001928  6E44               	movwf	PCS_T16GetInputPortC@u8BitNumber^0,c
  3765                           
  3766                           ;pcs.c: 52: T_U8 u8BitNumberValue = u8BitNumber<=4 ? u8BitNumber : 4;
  3767   00192A  0E04               	movlw	4
  3768   00192C  6444               	cpfsgt	PCS_T16GetInputPortC@u8BitNumber^0,c
  3769   00192E  D005               	goto	l267
  3770   001930  0E00               	movlw	0
  3771   001932  6E43               	movwf	(_PCS_T16GetInputPortC$843+1)^0,c
  3772   001934  0E04               	movlw	4
  3773   001936  6E42               	movwf	_PCS_T16GetInputPortC$843^0,c
  3774   001938  D004               	goto	l269
  3775   00193A                     l267:
  3776   00193A  FFFF               	dw	65535	; assembler added errata NOP
  3777   00193C  C044  F042         	movff	PCS_T16GetInputPortC@u8BitNumber,_PCS_T16GetInputPortC$843
  3778   001940  6A43               	clrf	(_PCS_T16GetInputPortC$843+1)^0,c
  3779   001942                     l269:
  3780   001942  FFFF               	dw	65535	; assembler added errata NOP
  3781   001944  C042  F045         	movff	_PCS_T16GetInputPortC$843,PCS_T16GetInputPortC@u8BitNumberValue
  3782                           
  3783                           ;pcs.c: 53: return (PORTC & 0x01<<u8BitNumberValue)>>u8BitNumberValue;
  3784   001948  C045  F03E         	movff	PCS_T16GetInputPortC@u8BitNumberValue,??_PCS_T16GetInputPortC
  3785   00194C  C045  F03F         	movff	PCS_T16GetInputPortC@u8BitNumberValue,??_PCS_T16GetInputPortC+1
  3786   001950  0E01               	movlw	1
  3787   001952  6E40               	movwf	(??_PCS_T16GetInputPortC+2)^0,c
  3788   001954  2A3F               	incf	(??_PCS_T16GetInputPortC+1)^0,f,c
  3789   001956  D003               	goto	u1044
  3790   001958                     u1045:
  3791   001958  FFFF               	dw	65535	; assembler added errata NOP
  3792   00195A  90D8               	bcf	status,0,c
  3793   00195C  3640               	rlcf	(??_PCS_T16GetInputPortC+2)^0,f,c
  3794   00195E                     u1044:
  3795   00195E  FFFF               	dw	65535	; assembler added errata NOP
  3796   001960  2E3F               	decfsz	(??_PCS_T16GetInputPortC+1)^0,f,c
  3797   001962  D7FA               	goto	u1045
  3798   001964  5040               	movf	(??_PCS_T16GetInputPortC+2)^0,w,c
  3799   001966  1482               	andwf	130,w,c	;volatile
  3800   001968  6E41               	movwf	(??_PCS_T16GetInputPortC+3)^0,c
  3801   00196A  2A3E               	incf	??_PCS_T16GetInputPortC^0,f,c
  3802   00196C  D003               	goto	u1054
  3803   00196E                     u1055:
  3804   00196E  FFFF               	dw	65535	; assembler added errata NOP
  3805   001970  90D8               	bcf	status,0,c
  3806   001972  3241               	rrcf	(??_PCS_T16GetInputPortC+3)^0,f,c
  3807   001974                     u1054:
  3808   001974  FFFF               	dw	65535	; assembler added errata NOP
  3809   001976  2E3E               	decfsz	??_PCS_T16GetInputPortC^0,f,c
  3810   001978  D7FA               	goto	u1055
  3811   00197A  5041               	movf	(??_PCS_T16GetInputPortC+3)^0,w,c
  3812   00197C  6E3C               	movwf	?_PCS_T16GetInputPortC^0,c
  3813   00197E  6A3D               	clrf	(?_PCS_T16GetInputPortC+1)^0,c
  3814   001980  0012               	return		;funcret
  3815   001982  FFFF               	dw	65535	; errata NOP
  3816   001984                     __end_of_PCS_T16GetInputPortC:
  3817                           	callstack 0
  3818                           
  3819 ;; *************** function _ADC_u16ReadAdcValue *****************
  3820 ;; Defined at:
  3821 ;;		line 48 in file "adc.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  U8Channel       1    wreg     const unsigned char 
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;  U8Channel       1   12[COMRAM] const unsigned char 
  3826 ;;  U8ChannelVal    1   11[COMRAM] unsigned char 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  2    7[COMRAM] unsigned int 
  3829 ;; Registers used:
  3830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3840 ;;Total ram usage:        6 bytes
  3841 ;; Hardware stack levels used: 1
  3842 ;; Hardware stack levels required when called: 2
  3843 ;; This function calls:
  3844 ;;		Nothing
  3845 ;; This function is called by:
  3846 ;;		_IOC_T16GetInputPort
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text33
  3851   001C3E                     __ptext33:
  3852                           	callstack 0
  3853   001C3E                     _ADC_u16ReadAdcValue:
  3854                           	callstack 0
  3855   001C3E  FFFF               	dw	65535	; assembler added errata NOP
  3856                           
  3857                           ;incstack = 0
  3858                           ;ADC_u16ReadAdcValue@U8Channel stored from wreg
  3859   001C40  6E41               	movwf	ADC_u16ReadAdcValue@U8Channel^0,c
  3860                           
  3861                           ;adc.c: 50: T_U8 U8ChannelValue = U8Channel<=1 ? U8Channel : 1;
  3862   001C42  0E01               	movlw	1
  3863   001C44  6441               	cpfsgt	ADC_u16ReadAdcValue@U8Channel^0,c
  3864   001C46  D005               	goto	l199
  3865   001C48  0E00               	movlw	0
  3866   001C4A  6E3F               	movwf	(_ADC_u16ReadAdcValue$501+1)^0,c
  3867   001C4C  0E01               	movlw	1
  3868   001C4E  6E3E               	movwf	_ADC_u16ReadAdcValue$501^0,c
  3869   001C50  D004               	goto	l201
  3870   001C52                     l199:
  3871   001C52  FFFF               	dw	65535	; assembler added errata NOP
  3872   001C54  C041  F03E         	movff	ADC_u16ReadAdcValue@U8Channel,_ADC_u16ReadAdcValue$501
  3873   001C58  6A3F               	clrf	(_ADC_u16ReadAdcValue$501+1)^0,c
  3874   001C5A                     l201:
  3875   001C5A  FFFF               	dw	65535	; assembler added errata NOP
  3876   001C5C  C03E  F040         	movff	_ADC_u16ReadAdcValue$501,ADC_u16ReadAdcValue@U8ChannelValue
  3877                           
  3878                           ;adc.c: 51: return au16AdcReadValue[U8ChannelValue];
  3879   001C60  5040               	movf	ADC_u16ReadAdcValue@U8ChannelValue^0,w,c
  3880   001C62  0D02               	mullw	2
  3881   001C64  0E16               	movlw	low _au16AdcReadValue
  3882   001C66  24F3               	addwf	243,w,c
  3883   001C68  6ED9               	movwf	fsr2l,c
  3884   001C6A  0E00               	movlw	high _au16AdcReadValue
  3885   001C6C  20F4               	addwfc	prodh,w,c
  3886   001C6E  6EDA               	movwf	fsr2h,c
  3887   001C70  CFDE F03C          	movff	postinc2,?_ADC_u16ReadAdcValue
  3888   001C74  CFDD F03D          	movff	postdec2,?_ADC_u16ReadAdcValue+1
  3889   001C78  0012               	return		;funcret
  3890   001C7A  FFFF               	dw	65535	; errata NOP
  3891   001C7C                     __end_of_ADC_u16ReadAdcValue:
  3892                           	callstack 0
  3893                           
  3894 ;; *************** function _TASK_vTask100ms *****************
  3895 ;; Defined at:
  3896 ;;		line 27 in file "tasks.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;		None
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;		None
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		None
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3914 ;;Total ram usage:        0 bytes
  3915 ;; Hardware stack levels used: 1
  3916 ;; Hardware stack levels required when called: 2
  3917 ;; This function calls:
  3918 ;;		Nothing
  3919 ;; This function is called by:
  3920 ;;		_SCHED_vStartScheduler
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text34
  3925   001EB0                     __ptext34:
  3926                           	callstack 0
  3927   001EB0                     _TASK_vTask100ms:
  3928                           	callstack 0
  3929   001EB0  FFFF               	dw	65535	; assembler added errata NOP
  3930                           
  3931                           ;incstack = 0
  3932   001EB2  0012               	return		;funcret
  3933   001EB4  FFFF               	dw	65535	; errata NOP
  3934   001EB6                     __end_of_TASK_vTask100ms:
  3935                           	callstack 0
  3936                           
  3937 ;; *************** function _SCHED_vInitSystem *****************
  3938 ;; Defined at:
  3939 ;;		line 13 in file "sched.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;		None
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;		None
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      void 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;Total ram usage:        0 bytes
  3958 ;; Hardware stack levels used: 1
  3959 ;; Hardware stack levels required when called: 3
  3960 ;; This function calls:
  3961 ;;		_ADC_vInit
  3962 ;;		_INT_vInit
  3963 ;;		_PCS_vInit
  3964 ;;		_TIM_vInit
  3965 ;; This function is called by:
  3966 ;;		_main
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text35
  3971   001E1A                     __ptext35:
  3972                           	callstack 0
  3973   001E1A                     _SCHED_vInitSystem:
  3974                           	callstack 0
  3975   001E1A  FFFF               	dw	65535	; assembler added errata NOP
  3976                           
  3977                           ;sched.c: 15: PCS_vInit();
  3978                           
  3979                           ;incstack = 0
  3980   001E1C  ECF4  F00E         	call	_PCS_vInit	;wreg free
  3981                           
  3982                           ;sched.c: 16: INT_vInit();
  3983   001E20  EC23  F00F         	call	_INT_vInit	;wreg free
  3984                           
  3985                           ;sched.c: 17: ADC_vInit();
  3986   001E24  ECBF  F00D         	call	_ADC_vInit	;wreg free
  3987                           
  3988                           ;sched.c: 18: TIM_vInit();
  3989   001E28  EC74  F00E         	call	_TIM_vInit	;wreg free
  3990   001E2C  0012               	return		;funcret
  3991   001E2E  FFFF               	dw	65535	; errata NOP
  3992   001E30                     __end_of_SCHED_vInitSystem:
  3993                           	callstack 0
  3994                           
  3995 ;; *************** function _TIM_vInit *****************
  3996 ;; Defined at:
  3997 ;;		line 3 in file "tim.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;		None
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;		None
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  1    wreg      void 
  4004 ;; Registers used:
  4005 ;;		wreg, status,2
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;Total ram usage:        0 bytes
  4016 ;; Hardware stack levels used: 1
  4017 ;; Hardware stack levels required when called: 2
  4018 ;; This function calls:
  4019 ;;		Nothing
  4020 ;; This function is called by:
  4021 ;;		_SCHED_vInitSystem
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           	psect	text36
  4026   001CE8                     __ptext36:
  4027                           	callstack 0
  4028   001CE8                     _TIM_vInit:
  4029                           	callstack 0
  4030   001CE8  FFFF               	dw	65535	; assembler added errata NOP
  4031                           
  4032                           ;tim.c: 5: T2CONbits.TMR2ON = 0b0;
  4033                           
  4034                           ;incstack = 0
  4035   001CEA  94CA               	bcf	202,2,c	;volatile
  4036                           
  4037                           ;tim.c: 6: TMR2 = 0x00;
  4038   001CEC  0E00               	movlw	0
  4039   001CEE  6ECC               	movwf	204,c	;volatile
  4040                           
  4041                           ;tim.c: 7: T2CON = 0x00;
  4042   001CF0  0E00               	movlw	0
  4043   001CF2  6ECA               	movwf	202,c	;volatile
  4044                           
  4045                           ;tim.c: 8: PR2 = 0x00;
  4046   001CF4  0E00               	movlw	0
  4047   001CF6  6ECB               	movwf	203,c	;volatile
  4048                           
  4049                           ;tim.c: 10: T2CONbits.TOUTPS = 0b0100;
  4050   001CF8  50CA               	movf	202,w,c	;volatile
  4051   001CFA  0B87               	andlw	-121
  4052   001CFC  0920               	iorlw	32
  4053   001CFE  6ECA               	movwf	202,c	;volatile
  4054                           
  4055                           ;tim.c: 11: T2CONbits.T2CKPS = 0b01;
  4056   001D00  50CA               	movf	202,w,c	;volatile
  4057   001D02  0BFC               	andlw	-4
  4058   001D04  0901               	iorlw	1
  4059   001D06  6ECA               	movwf	202,c	;volatile
  4060                           
  4061                           ;tim.c: 12: PR2 = 125;
  4062   001D08  0E7D               	movlw	125
  4063   001D0A  6ECB               	movwf	203,c	;volatile
  4064                           
  4065                           ;tim.c: 14: PIR1bits.TMR2IF = 0b0;
  4066   001D0C  929E               	bcf	158,1,c	;volatile
  4067                           
  4068                           ;tim.c: 15: IPR1bits.TMR2IP = 0b1;
  4069   001D0E  829F               	bsf	159,1,c	;volatile
  4070                           
  4071                           ;tim.c: 16: PIE1bits.TMR2IE = 0b1;
  4072   001D10  829D               	bsf	157,1,c	;volatile
  4073                           
  4074                           ;tim.c: 17: INTCONbits.PEIE = 1;
  4075   001D12  8CF2               	bsf	242,6,c	;volatile
  4076                           
  4077                           ;tim.c: 18: INTCONbits.GIE = 1;
  4078   001D14  8EF2               	bsf	242,7,c	;volatile
  4079                           
  4080                           ;tim.c: 20: T2CONbits.TMR2ON = 0b1;
  4081   001D16  84CA               	bsf	202,2,c	;volatile
  4082   001D18  0012               	return		;funcret
  4083   001D1A  FFFF               	dw	65535	; errata NOP
  4084   001D1C                     __end_of_TIM_vInit:
  4085                           	callstack 0
  4086                           
  4087 ;; *************** function _PCS_vInit *****************
  4088 ;; Defined at:
  4089 ;;		line 3 in file "pcs.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      void 
  4096 ;; Registers used:
  4097 ;;		wreg, status,2
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;Total ram usage:        0 bytes
  4108 ;; Hardware stack levels used: 1
  4109 ;; Hardware stack levels required when called: 2
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		_SCHED_vInitSystem
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text37
  4118   001DE8                     __ptext37:
  4119                           	callstack 0
  4120   001DE8                     _PCS_vInit:
  4121                           	callstack 0
  4122   001DE8  FFFF               	dw	65535	; assembler added errata NOP
  4123                           
  4124                           ;pcs.c: 5: TRISAbits.RA0 = 1;
  4125                           
  4126                           ;incstack = 0
  4127   001DEA  8092               	bsf	146,0,c	;volatile
  4128                           
  4129                           ;pcs.c: 6: TRISAbits.RA1 = 1;
  4130   001DEC  8292               	bsf	146,1,c	;volatile
  4131                           
  4132                           ;pcs.c: 8: TRISCbits.RC0 = 1;
  4133   001DEE  8094               	bsf	148,0,c	;volatile
  4134                           
  4135                           ;pcs.c: 9: TRISCbits.RC1 = 1;
  4136   001DF0  8294               	bsf	148,1,c	;volatile
  4137                           
  4138                           ;pcs.c: 10: TRISCbits.RC2 = 1;
  4139   001DF2  8494               	bsf	148,2,c	;volatile
  4140                           
  4141                           ;pcs.c: 11: TRISCbits.RC3 = 1;
  4142   001DF4  8694               	bsf	148,3,c	;volatile
  4143                           
  4144                           ;pcs.c: 12: TRISCbits.RC4 = 1;
  4145   001DF6  8894               	bsf	148,4,c	;volatile
  4146                           
  4147                           ;pcs.c: 14: TRISD = 0x00;
  4148   001DF8  0E00               	movlw	0
  4149   001DFA  6E95               	movwf	149,c	;volatile
  4150                           
  4151                           ;pcs.c: 16: TRISEbits.RE0 = 0;
  4152   001DFC  9096               	bcf	150,0,c	;volatile
  4153                           
  4154                           ;pcs.c: 17: TRISEbits.RE1 = 0;
  4155   001DFE  9296               	bcf	150,1,c	;volatile
  4156   001E00  0012               	return		;funcret
  4157   001E02  FFFF               	dw	65535	; errata NOP
  4158   001E04                     __end_of_PCS_vInit:
  4159                           	callstack 0
  4160                           
  4161 ;; *************** function _INT_vInit *****************
  4162 ;; Defined at:
  4163 ;;		line 6 in file "int.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		None
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;Total ram usage:        0 bytes
  4182 ;; Hardware stack levels used: 1
  4183 ;; Hardware stack levels required when called: 2
  4184 ;; This function calls:
  4185 ;;		Nothing
  4186 ;; This function is called by:
  4187 ;;		_SCHED_vInitSystem
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text38
  4192   001E46                     __ptext38:
  4193                           	callstack 0
  4194   001E46                     _INT_vInit:
  4195                           	callstack 0
  4196   001E46  FFFF               	dw	65535	; assembler added errata NOP
  4197                           
  4198                           ;int.c: 9: PIR1bits.ADIF = 0;
  4199                           
  4200                           ;incstack = 0
  4201   001E48  9C9E               	bcf	158,6,c	;volatile
  4202                           
  4203                           ;int.c: 10: PIE1bits.ADIE = 1;
  4204   001E4A  8C9D               	bsf	157,6,c	;volatile
  4205                           
  4206                           ;int.c: 13: PIR1bits.TMR2IF = 0b0;
  4207   001E4C  929E               	bcf	158,1,c	;volatile
  4208                           
  4209                           ;int.c: 14: IPR1bits.TMR2IP = 0b1;
  4210   001E4E  829F               	bsf	159,1,c	;volatile
  4211                           
  4212                           ;int.c: 15: PIE1bits.TMR2IE = 0b1;
  4213   001E50  829D               	bsf	157,1,c	;volatile
  4214                           
  4215                           ;int.c: 18: INTCONbits.PEIE = 1;
  4216   001E52  8CF2               	bsf	242,6,c	;volatile
  4217                           
  4218                           ;int.c: 19: INTCONbits.GIE = 1;
  4219   001E54  8EF2               	bsf	242,7,c	;volatile
  4220   001E56  0012               	return		;funcret
  4221   001E58  FFFF               	dw	65535	; errata NOP
  4222   001E5A                     __end_of_INT_vInit:
  4223                           	callstack 0
  4224                           
  4225 ;; *************** function _ADC_vInit *****************
  4226 ;; Defined at:
  4227 ;;		line 9 in file "adc.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;		None
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;		None
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  1    wreg      void 
  4234 ;; Registers used:
  4235 ;;		wreg, status,2
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;Total ram usage:        0 bytes
  4246 ;; Hardware stack levels used: 1
  4247 ;; Hardware stack levels required when called: 2
  4248 ;; This function calls:
  4249 ;;		Nothing
  4250 ;; This function is called by:
  4251 ;;		_SCHED_vInitSystem
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text39
  4256   001B7E                     __ptext39:
  4257                           	callstack 0
  4258   001B7E                     _ADC_vInit:
  4259                           	callstack 0
  4260   001B7E  FFFF               	dw	65535	; assembler added errata NOP
  4261                           
  4262                           ;adc.c: 11: ADRESH = 0x00;
  4263                           
  4264                           ;incstack = 0
  4265   001B80  0E00               	movlw	0
  4266   001B82  6EC4               	movwf	196,c	;volatile
  4267                           
  4268                           ;adc.c: 12: ADRESL = 0x00;
  4269   001B84  0E00               	movlw	0
  4270   001B86  6EC3               	movwf	195,c	;volatile
  4271                           
  4272                           ;adc.c: 14: ADCON0bits.CHS = 0b0000;
  4273   001B88  0EC3               	movlw	-61
  4274   001B8A  16C2               	andwf	194,f,c	;volatile
  4275                           
  4276                           ;adc.c: 16: ADCON1bits.VCFG = 0b00;
  4277   001B8C  0ECF               	movlw	-49
  4278   001B8E  16C1               	andwf	193,f,c	;volatile
  4279                           
  4280                           ;adc.c: 17: ADCON1bits.PCFG = 0b1101;
  4281   001B90  50C1               	movf	193,w,c	;volatile
  4282   001B92  0BF0               	andlw	-16
  4283   001B94  090D               	iorlw	13
  4284   001B96  6EC1               	movwf	193,c	;volatile
  4285                           
  4286                           ;adc.c: 19: ADCON2bits.ADFM = 1;
  4287   001B98  8EC0               	bsf	192,7,c	;volatile
  4288                           
  4289                           ;adc.c: 20: ADCON2bits.ACQT = 0b100;
  4290   001B9A  50C0               	movf	192,w,c	;volatile
  4291   001B9C  0BC7               	andlw	-57
  4292   001B9E  0920               	iorlw	32
  4293   001BA0  6EC0               	movwf	192,c	;volatile
  4294                           
  4295                           ;adc.c: 21: ADCON2bits.ADCS = 0b001;
  4296   001BA2  50C0               	movf	192,w,c	;volatile
  4297   001BA4  0BF8               	andlw	-8
  4298   001BA6  0901               	iorlw	1
  4299   001BA8  6EC0               	movwf	192,c	;volatile
  4300                           
  4301                           ;adc.c: 23: PIR1bits.ADIF = 0;
  4302   001BAA  9C9E               	bcf	158,6,c	;volatile
  4303                           
  4304                           ;adc.c: 24: PIE1bits.ADIE = 1;
  4305   001BAC  8C9D               	bsf	157,6,c	;volatile
  4306                           
  4307                           ;adc.c: 25: INTCONbits.PEIE = 1;
  4308   001BAE  8CF2               	bsf	242,6,c	;volatile
  4309                           
  4310                           ;adc.c: 26: INTCONbits.GIE = 1;
  4311   001BB0  8EF2               	bsf	242,7,c	;volatile
  4312                           
  4313                           ;adc.c: 28: ADCON0bits.ADON = 1;
  4314   001BB2  80C2               	bsf	194,0,c	;volatile
  4315                           
  4316                           ;adc.c: 29: _delay((unsigned long)((40)*(10000000UL/4000000.0)));
  4317   001BB4  0E19               	movlw	25
  4318   001BB6                     u1717:
  4319   001BB6  FFFF               	dw	65535	; errata NOP
  4320   001BB8  2EE8               	decfsz	wreg,f,c
  4321   001BBA  D7FD               	bra	u1717
  4322                           
  4323                           ;adc.c: 30: ADCON0bits.GO_nDONE = 1;
  4324   001BBC  82C2               	bsf	194,1,c	;volatile
  4325   001BBE  0012               	return		;funcret
  4326   001BC0  FFFF               	dw	65535	; errata NOP
  4327   001BC2                     __end_of_ADC_vInit:
  4328                           	callstack 0
  4329                           
  4330 ;; *************** function _RS232_vSendMessage *****************
  4331 ;; Defined at:
  4332 ;;		line 61 in file "RS232.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  u8Message       2    8[COMRAM] PTR const unsigned char 
  4335 ;;		 -> STR_1(22), 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  u8Count         1   12[COMRAM] unsigned char 
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  1    wreg      void 
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4347 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4349 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;Total ram usage:        5 bytes
  4352 ;; Hardware stack levels used: 1
  4353 ;; Hardware stack levels required when called: 3
  4354 ;; This function calls:
  4355 ;;		_RS232_vSendDataByte
  4356 ;; This function is called by:
  4357 ;;		_main
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text40
  4362   001984                     __ptext40:
  4363                           	callstack 0
  4364   001984                     _RS232_vSendMessage:
  4365                           	callstack 0
  4366   001984  FFFF               	dw	65535	; assembler added errata NOP
  4367                           
  4368                           ;RS232.c: 63: T_U8 u8Count = 0;
  4369                           
  4370                           ;incstack = 0
  4371   001986  0E00               	movlw	0
  4372   001988  6E41               	movwf	RS232_vSendMessage@u8Count^0,c
  4373                           
  4374                           ;RS232.c: 66: while (u8Message[u8Count] != '\0')
  4375   00198A  D011               	goto	l2278
  4376   00198C                     l2274:
  4377   00198C  FFFF               	dw	65535	; assembler added errata NOP
  4378                           
  4379                           ;RS232.c: 67: {;RS232.c: 68: RS232_vSendDataByte(u8Message[u8Count]);
  4380   00198E  5041               	movf	RS232_vSendMessage@u8Count^0,w,c
  4381   001990  243D               	addwf	RS232_vSendMessage@u8Message^0,w,c
  4382   001992  6E3F               	movwf	??_RS232_vSendMessage^0,c
  4383   001994  0E00               	movlw	0
  4384   001996  203E               	addwfc	(RS232_vSendMessage@u8Message+1)^0,w,c
  4385   001998  6E40               	movwf	(??_RS232_vSendMessage+1)^0,c
  4386   00199A  C03F  FFF6         	movff	??_RS232_vSendMessage,tblptrl
  4387   00199E  C040  FFF7         	movff	??_RS232_vSendMessage+1,tblptrh
  4388   0019A2                     	if	0	;tblptru may be non-zero
  4389   0019A2                     	endif
  4390   0019A2                     	if	0	;tblptru may be non-zero
  4391   0019A2                     	endif
  4392   0019A2  0008               	tblrd		*
  4393   0019A4  FFFF               	dw	65535	; errata NOP
  4394   0019A6  50F5               	movf	tablat,w,c
  4395   0019A8  EC40  F00F         	call	_RS232_vSendDataByte
  4396                           
  4397                           ;RS232.c: 69: u8Count++;
  4398   0019AC  2A41               	incf	RS232_vSendMessage@u8Count^0,f,c
  4399   0019AE                     l2278:
  4400   0019AE  FFFF               	dw	65535	; assembler added errata NOP
  4401   0019B0  5041               	movf	RS232_vSendMessage@u8Count^0,w,c
  4402   0019B2  243D               	addwf	RS232_vSendMessage@u8Message^0,w,c
  4403   0019B4  6E3F               	movwf	??_RS232_vSendMessage^0,c
  4404   0019B6  0E00               	movlw	0
  4405   0019B8  203E               	addwfc	(RS232_vSendMessage@u8Message+1)^0,w,c
  4406   0019BA  6E40               	movwf	(??_RS232_vSendMessage+1)^0,c
  4407   0019BC  C03F  FFF6         	movff	??_RS232_vSendMessage,tblptrl
  4408   0019C0  C040  FFF7         	movff	??_RS232_vSendMessage+1,tblptrh
  4409   0019C4                     	if	0	;tblptru may be non-zero
  4410   0019C4                     	endif
  4411   0019C4                     	if	0	;tblptru may be non-zero
  4412   0019C4                     	endif
  4413   0019C4  0008               	tblrd		*
  4414   0019C6  FFFF               	dw	65535	; errata NOP
  4415   0019C8  50F5               	movf	tablat,w,c
  4416   0019CA  0900               	iorlw	0
  4417   0019CC  A4D8               	btfss	status,2,c
  4418   0019CE  D7DE               	goto	l2274
  4419                           
  4420                           ;RS232.c: 70: };RS232.c: 73: RS232_vSendDataByte('\r');
  4421   0019D0  0E0D               	movlw	13
  4422   0019D2  EC40  F00F         	call	_RS232_vSendDataByte
  4423                           
  4424                           ;RS232.c: 74: RS232_vSendDataByte('\n');
  4425   0019D6  0E0A               	movlw	10
  4426   0019D8  EC40  F00F         	call	_RS232_vSendDataByte
  4427   0019DC  0012               	return		;funcret
  4428   0019DE  FFFF               	dw	65535	; errata NOP
  4429   0019E0                     __end_of_RS232_vSendMessage:
  4430                           	callstack 0
  4431                           
  4432 ;; *************** function _RS232_vSendDataByte *****************
  4433 ;; Defined at:
  4434 ;;		line 43 in file "RS232.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;  u8DataByte      1    wreg     unsigned char 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  u8DataByte      1    7[COMRAM] unsigned char 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4452 ;;Total ram usage:        1 bytes
  4453 ;; Hardware stack levels used: 1
  4454 ;; Hardware stack levels required when called: 2
  4455 ;; This function calls:
  4456 ;;		Nothing
  4457 ;; This function is called by:
  4458 ;;		_RS232_vSendMessage
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           	psect	text41
  4463   001E80                     __ptext41:
  4464                           	callstack 0
  4465   001E80                     _RS232_vSendDataByte:
  4466                           	callstack 0
  4467   001E80  FFFF               	dw	65535	; assembler added errata NOP
  4468                           
  4469                           ;incstack = 0
  4470                           ;RS232_vSendDataByte@u8DataByte stored from wreg
  4471   001E82  6E3C               	movwf	RS232_vSendDataByte@u8DataByte^0,c
  4472   001E84  FFFF               	dw	65535	; assembler added errata NOP
  4473                           
  4474                           ;RS232.c: 46: while (!TXSTAbits.TRMT);
  4475   001E86  A2AC               	btfss	172,1,c	;volatile
  4476   001E88  D7FD               	goto	l1696
  4477                           
  4478                           ;RS232.c: 48: TXREG = u8DataByte;
  4479   001E8A  C03C  FFAD         	movff	RS232_vSendDataByte@u8DataByte,4013	;volatile
  4480   001E8E  0012               	return		;funcret
  4481   001E90  FFFF               	dw	65535	; errata NOP
  4482   001E92                     __end_of_RS232_vSendDataByte:
  4483                           	callstack 0
  4484                           
  4485 ;; *************** function _RS232_vInit *****************
  4486 ;; Defined at:
  4487 ;;		line 19 in file "RS232.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;		None
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;  u16BaudRate     2    0        unsigned int 
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  1    wreg      void 
  4494 ;; Registers used:
  4495 ;;		wreg, status,2
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;Total ram usage:        0 bytes
  4506 ;; Hardware stack levels used: 1
  4507 ;; Hardware stack levels required when called: 2
  4508 ;; This function calls:
  4509 ;;		Nothing
  4510 ;; This function is called by:
  4511 ;;		_main
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           	psect	text42
  4516   001E5A                     __ptext42:
  4517                           	callstack 0
  4518   001E5A                     _RS232_vInit:
  4519                           	callstack 0
  4520   001E5A  FFFF               	dw	65535	; assembler added errata NOP
  4521                           
  4522                           ;RS232.c: 23: SPBRGH = (u16BaudRate >> 8);
  4523                           
  4524                           ;incstack = 0
  4525   001E5C  0E00               	movlw	0
  4526   001E5E  6E7F               	movwf	127,c	;volatile
  4527                           
  4528                           ;RS232.c: 24: SPBRG = (T_U8) u16BaudRate;
  4529   001E60  0E0F               	movlw	15
  4530   001E62  6EAF               	movwf	175,c	;volatile
  4531                           
  4532                           ;RS232.c: 26: TXSTAbits.TXEN = 1;
  4533   001E64  8AAC               	bsf	172,5,c	;volatile
  4534                           
  4535                           ;RS232.c: 28: RCSTAbits.CREN = 1;
  4536   001E66  88AB               	bsf	171,4,c	;volatile
  4537                           
  4538                           ;RS232.c: 30: RCSTAbits.SPEN = 1;
  4539   001E68  8EAB               	bsf	171,7,c	;volatile
  4540   001E6A  0012               	return		;funcret
  4541   001E6C  FFFF               	dw	65535	; errata NOP
  4542   001E6E                     __end_of_RS232_vInit:
  4543                           	callstack 0
  4544                           
  4545 ;; *************** function _INT_vInterruptHandler *****************
  4546 ;; Defined at:
  4547 ;;		line 22 in file "int.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;		None
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      void 
  4554 ;; Registers used:
  4555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4563 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;Total ram usage:        4 bytes
  4566 ;; Hardware stack levels used: 1
  4567 ;; Hardware stack levels required when called: 1
  4568 ;; This function calls:
  4569 ;;		_ADC_vConversionCompleted
  4570 ;;		_SCHED_vTickFunctionCall
  4571 ;; This function is called by:
  4572 ;;		Interrupt level 2
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	intcode
  4577   000008                     __pintcode:
  4578                           	callstack 0
  4579   000008                     _INT_vInterruptHandler:
  4580                           	callstack 0
  4581   000008  FFFF               	dw	65535	; assembler added errata NOP
  4582                           
  4583                           ;incstack = 0
  4584   00000A  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4585   00000C  CFD9 F038          	movff	fsr2l,??_INT_vInterruptHandler
  4586   000010  CFDA F039          	movff	fsr2h,??_INT_vInterruptHandler+1
  4587   000014  CFF3 F03A          	movff	prodl,??_INT_vInterruptHandler+2
  4588   000018  CFF4 F03B          	movff	prodh,??_INT_vInterruptHandler+3
  4589                           
  4590                           ;int.c: 24: if(PIR1bits.ADIF && ADCON0bits.ADON)
  4591   00001C  BC9E               	btfsc	158,6,c	;volatile
  4592   00001E  A0C2               	btfss	194,0,c	;volatile
  4593   000020  D002               	goto	i2l1774
  4594                           
  4595                           ;int.c: 25: {;int.c: 26: ADC_vConversionCompleted();
  4596   000022  EC61  F00C         	call	_ADC_vConversionCompleted	;wreg free
  4597   000026                     i2l1774:
  4598   000026  FFFF               	dw	65535	; assembler added errata NOP
  4599                           
  4600                           ;int.c: 27: };int.c: 29: if(PIR1bits.TMR2IF && T2CONbits.TMR2ON)
  4601   000028  B29E               	btfsc	158,1,c	;volatile
  4602   00002A  A4CA               	btfss	202,2,c	;volatile
  4603   00002C  D003               	goto	i2l228
  4604                           
  4605                           ;int.c: 30: {;int.c: 31: SCHED_vTickFunctionCall();
  4606   00002E  EC18  F00F         	call	_SCHED_vTickFunctionCall	;wreg free
  4607                           
  4608                           ;int.c: 32: PIR1bits.TMR2IF = 0b0;
  4609   000032  929E               	bcf	158,1,c	;volatile
  4610   000034                     i2l228:
  4611   000034  FFFF               	dw	65535	; assembler added errata NOP
  4612   000036  C03B  FFF4         	movff	??_INT_vInterruptHandler+3,prodh
  4613   00003A  C03A  FFF3         	movff	??_INT_vInterruptHandler+2,prodl
  4614   00003E  C039  FFDA         	movff	??_INT_vInterruptHandler+1,fsr2h
  4615   000042  C038  FFD9         	movff	??_INT_vInterruptHandler,fsr2l
  4616   000046  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4617   000048  0011               	retfie		f
  4618   00004A  FFFF               	dw	65535	; errata NOP
  4619   00004C                     __end_of_INT_vInterruptHandler:
  4620                           	callstack 0
  4621                           
  4622 ;; *************** function _SCHED_vTickFunctionCall *****************
  4623 ;; Defined at:
  4624 ;;		line 21 in file "sched.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;		None
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;		None
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      void 
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4642 ;;Total ram usage:        0 bytes
  4643 ;; Hardware stack levels used: 1
  4644 ;; This function calls:
  4645 ;;		Nothing
  4646 ;; This function is called by:
  4647 ;;		_INT_vInterruptHandler
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           	psect	text44
  4652   001E30                     __ptext44:
  4653                           	callstack 0
  4654   001E30                     _SCHED_vTickFunctionCall:
  4655                           	callstack 0
  4656   001E30  FFFF               	dw	65535	; assembler added errata NOP
  4657                           
  4658                           ;sched.c: 23: ++sched_gTick10ms;
  4659                           
  4660                           ;incstack = 0
  4661   001E32  2A2D               	incf	_sched_gTick10ms^0,f,c
  4662                           
  4663                           ;sched.c: 24: ++sched_gTick100ms;
  4664   001E34  2A2C               	incf	_sched_gTick100ms^0,f,c
  4665                           
  4666                           ;sched.c: 25: ++sched_gTick1s;
  4667   001E36  4A1C               	infsnz	_sched_gTick1s^0,f,c
  4668   001E38  2A1D               	incf	(_sched_gTick1s+1)^0,f,c
  4669                           
  4670                           ;sched.c: 26: sched_bTicked = 1;;
  4671   001E3A  0E00               	movlw	0
  4672   001E3C  6E1B               	movwf	(_sched_bTicked+1)^0,c
  4673   001E3E  0E01               	movlw	1
  4674   001E40  6E1A               	movwf	_sched_bTicked^0,c
  4675   001E42  0012               	return		;funcret
  4676   001E44  FFFF               	dw	65535	; errata NOP
  4677   001E46                     __end_of_SCHED_vTickFunctionCall:
  4678                           	callstack 0
  4679                           
  4680 ;; *************** function _ADC_vConversionCompleted *****************
  4681 ;; Defined at:
  4682 ;;		line 40 in file "adc.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;		None
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;		None
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  1    wreg      void 
  4689 ;; Registers used:
  4690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4698 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4699 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4700 ;;Total ram usage:        3 bytes
  4701 ;; Hardware stack levels used: 1
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_INT_vInterruptHandler
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text45
  4710   0018C2                     __ptext45:
  4711                           	callstack 0
  4712   0018C2                     _ADC_vConversionCompleted:
  4713                           	callstack 0
  4714   0018C2  FFFF               	dw	65535	; assembler added errata NOP
  4715                           
  4716                           ;adc.c: 42: au16AdcReadValue[ADCON0bits.CHS0] = (ADRESH << 8) | ADRESL;
  4717                           
  4718                           ;incstack = 0
  4719   0018C4  50C3               	movf	195,w,c	;volatile
  4720   0018C6  CFC4 F035          	movff	4036,??_ADC_vConversionCompleted	;volatile
  4721   0018CA  6A36               	clrf	(??_ADC_vConversionCompleted+1)^0,c
  4722   0018CC  C035  F036         	movff	??_ADC_vConversionCompleted,??_ADC_vConversionCompleted+1
  4723   0018D0  6A35               	clrf	??_ADC_vConversionCompleted^0,c
  4724   0018D2  1235               	iorwf	??_ADC_vConversionCompleted^0,f,c
  4725   0018D4  0E00               	movlw	0
  4726   0018D6  1236               	iorwf	(??_ADC_vConversionCompleted+1)^0,f,c
  4727   0018D8  A4C2               	btfss	194,2,c	;volatile
  4728   0018DA  D003               	goto	i2u78_40
  4729   0018DC  6A37               	clrf	(??_ADC_vConversionCompleted+2)^0,c
  4730   0018DE  2A37               	incf	(??_ADC_vConversionCompleted+2)^0,f,c
  4731   0018E0  D002               	goto	i2u78_48
  4732   0018E2                     i2u78_40:
  4733   0018E2  FFFF               	dw	65535	; assembler added errata NOP
  4734   0018E4  6A37               	clrf	(??_ADC_vConversionCompleted+2)^0,c
  4735   0018E6                     i2u78_48:
  4736   0018E6  FFFF               	dw	65535	; assembler added errata NOP
  4737   0018E8  5037               	movf	(??_ADC_vConversionCompleted+2)^0,w,c
  4738   0018EA  0D02               	mullw	2
  4739   0018EC  0E16               	movlw	low _au16AdcReadValue
  4740   0018EE  24F3               	addwf	243,w,c
  4741   0018F0  6ED9               	movwf	fsr2l,c
  4742   0018F2  0E00               	movlw	high _au16AdcReadValue
  4743   0018F4  20F4               	addwfc	prodh,w,c
  4744   0018F6  6EDA               	movwf	fsr2h,c
  4745   0018F8  C035  FFDE         	movff	??_ADC_vConversionCompleted,postinc2
  4746   0018FC  C036  FFDD         	movff	??_ADC_vConversionCompleted+1,postdec2
  4747                           
  4748                           ;adc.c: 43: ADCON0bits.CHS0 = !ADCON0bits.CHS0;
  4749   001900  B4C2               	btfsc	194,2,c	;volatile
  4750   001902  D003               	goto	i2u79_40
  4751   001904  6A35               	clrf	??_ADC_vConversionCompleted^0,c
  4752   001906  2A35               	incf	??_ADC_vConversionCompleted^0,f,c
  4753   001908  D002               	goto	i2u80_48
  4754   00190A                     i2u79_40:
  4755   00190A  FFFF               	dw	65535	; assembler added errata NOP
  4756   00190C  6A35               	clrf	??_ADC_vConversionCompleted^0,c
  4757   00190E                     i2u80_48:
  4758   00190E  FFFF               	dw	65535	; assembler added errata NOP
  4759   001910  4635               	rlncf	??_ADC_vConversionCompleted^0,f,c
  4760   001912  4635               	rlncf	??_ADC_vConversionCompleted^0,f,c
  4761   001914  50C2               	movf	194,w,c	;volatile
  4762   001916  1835               	xorwf	??_ADC_vConversionCompleted^0,w,c
  4763   001918  0BFB               	andlw	-5
  4764   00191A  1835               	xorwf	??_ADC_vConversionCompleted^0,w,c
  4765   00191C  6EC2               	movwf	194,c	;volatile
  4766                           
  4767                           ;adc.c: 44: PIR1bits.ADIF = 0;
  4768   00191E  9C9E               	bcf	158,6,c	;volatile
  4769                           
  4770                           ;adc.c: 45: ADCON0bits.GO_nDONE = 1;
  4771   001920  82C2               	bsf	194,1,c	;volatile
  4772   001922  0012               	return		;funcret
  4773   001924  FFFF               	dw	65535	; errata NOP
  4774   001926                     __end_of_ADC_vConversionCompleted:
  4775                           	callstack 0
  4776                           
  4777                           	psect	text46
  4778   000000                     __ptext46:
  4779                           	callstack 0
  4780                           
  4781                           	psect	rparam
  4782   000000                     
  4783                           	psect	temp
  4784   000056                     btemp:
  4785                           	callstack 0
  4786   000056                     	ds	1
  4787   000000                     int$flags	set	btemp
  4788   000000                     wtemp8	set	btemp+1
  4789   000000                     ttemp5	set	btemp+1
  4790   000000                     ttemp6	set	btemp+4
  4791   000000                     ttemp7	set	btemp+8
  4792                           
  4793                           	psect	idloc
  4794                           
  4795                           ;Config register IDLOC0 @ 0x200000
  4796                           ;	unspecified, using default values
  4797   200000                     	org	2097152
  4798   200000  FF                 	db	255
  4799                           
  4800                           ;Config register IDLOC1 @ 0x200001
  4801                           ;	unspecified, using default values
  4802   200001                     	org	2097153
  4803   200001  FF                 	db	255
  4804                           
  4805                           ;Config register IDLOC2 @ 0x200002
  4806                           ;	unspecified, using default values
  4807   200002                     	org	2097154
  4808   200002  FF                 	db	255
  4809                           
  4810                           ;Config register IDLOC3 @ 0x200003
  4811                           ;	unspecified, using default values
  4812   200003                     	org	2097155
  4813   200003  FF                 	db	255
  4814                           
  4815                           ;Config register IDLOC4 @ 0x200004
  4816                           ;	unspecified, using default values
  4817   200004                     	org	2097156
  4818   200004  FF                 	db	255
  4819                           
  4820                           ;Config register IDLOC5 @ 0x200005
  4821                           ;	unspecified, using default values
  4822   200005                     	org	2097157
  4823   200005  FF                 	db	255
  4824                           
  4825                           ;Config register IDLOC6 @ 0x200006
  4826                           ;	unspecified, using default values
  4827   200006                     	org	2097158
  4828   200006  FF                 	db	255
  4829                           
  4830                           ;Config register IDLOC7 @ 0x200007
  4831                           ;	unspecified, using default values
  4832   200007                     	org	2097159
  4833   200007  FF                 	db	255
  4834                           
  4835                           	psect	config
  4836                           
  4837                           ; Padding undefined space
  4838   300000                     	org	3145728
  4839   300000  FF                 	db	255
  4840                           
  4841                           ;Config register CONFIG1H @ 0x300001
  4842                           ;	unspecified, using default values
  4843                           ;	Oscillator
  4844                           ;	OSC = 0xF, unprogrammed default
  4845                           ;	Osc. Switch Enable
  4846                           ;	OSCS = 0x1, unprogrammed default
  4847   300001                     	org	3145729
  4848   300001  2F                 	db	47
  4849                           
  4850                           ;Config register CONFIG2L @ 0x300002
  4851                           ;	unspecified, using default values
  4852                           ;	Power Up Timer
  4853                           ;	PWRT = 0x1, unprogrammed default
  4854                           ;	Brown Out Detect
  4855                           ;	BOR = 0x1, unprogrammed default
  4856                           ;	Brown Out Voltage
  4857                           ;	BORV = 0x3, unprogrammed default
  4858   300002                     	org	3145730
  4859   300002  0F                 	db	15
  4860                           
  4861                           ;Config register CONFIG2H @ 0x300003
  4862                           ;	unspecified, using default values
  4863                           ;	Watchdog Timer
  4864                           ;	WDT = 0x1, unprogrammed default
  4865                           ;	Watchdog Postscaler
  4866                           ;	WDTPS = 0xF, unprogrammed default
  4867   300003                     	org	3145731
  4868   300003  1F                 	db	31
  4869                           
  4870                           ;Config register CONFIG3L @ 0x300004
  4871                           ;	unspecified, using default values
  4872   300004                     	org	3145732
  4873   300004  83                 	db	131
  4874                           
  4875                           ;Config register CONFIG3H @ 0x300005
  4876                           ;	unspecified, using default values
  4877                           ;	CCP2 Mux
  4878                           ;	CCP2MX = 0x1, unprogrammed default
  4879                           ;	MCLR enable
  4880                           ;	MCLRE = 0x1, unprogrammed default
  4881   300005                     	org	3145733
  4882   300005  83                 	db	131
  4883                           
  4884                           ;Config register CONFIG4L @ 0x300006
  4885                           ;	unspecified, using default values
  4886                           ;	Stack Overflow Reset
  4887                           ;	STVR = 0x1, unprogrammed default
  4888                           ;	Low Voltage Program
  4889                           ;	LVP = 0x1, unprogrammed default
  4890                           ;	Background Debugger Enable bit
  4891                           ;	DEBUG = 0x1, unprogrammed default
  4892   300006                     	org	3145734
  4893   300006  85                 	db	133
  4894                           
  4895                           ; Padding undefined space
  4896   300007                     	org	3145735
  4897   300007  FF                 	db	255
  4898                           
  4899                           ;Config register CONFIG5L @ 0x300008
  4900                           ;	unspecified, using default values
  4901                           ;	Code Protect 000800-0003FFF
  4902                           ;	CP0 = 0x1, unprogrammed default
  4903                           ;	Code Protect 0004000-007FFF
  4904                           ;	CP1 = 0x1, unprogrammed default
  4905                           ;	Code Protect 008000-00BFFF
  4906                           ;	CP2 = 0x1, unprogrammed default
  4907   300008                     	org	3145736
  4908   300008  0F                 	db	15
  4909                           
  4910                           ;Config register CONFIG5H @ 0x300009
  4911                           ;	unspecified, using default values
  4912                           ;	Code Protect Boot
  4913                           ;	CPB = 0x1, unprogrammed default
  4914                           ;	Data EE Read Protect
  4915                           ;	CPD = 0x1, unprogrammed default
  4916   300009                     	org	3145737
  4917   300009  C0                 	db	192
  4918                           
  4919                           ;Config register CONFIG6L @ 0x30000A
  4920                           ;	unspecified, using default values
  4921                           ;	Table Write Protect 00800-003FFF
  4922                           ;	WRT0 = 0x1, unprogrammed default
  4923                           ;	Table Write Protect 004000-007FFF
  4924                           ;	WRT1 = 0x1, unprogrammed default
  4925                           ;	Table Write Protect 08000-0BFFF
  4926                           ;	WRT2 = 0x1, unprogrammed default
  4927   30000A                     	org	3145738
  4928   30000A  0F                 	db	15
  4929                           
  4930                           ;Config register CONFIG6H @ 0x30000B
  4931                           ;	unspecified, using default values
  4932                           ;	Config. Write Protect
  4933                           ;	WRTC = 0x1, unprogrammed default
  4934                           ;	Table Write Protect Boot
  4935                           ;	WRTB = 0x1, unprogrammed default
  4936                           ;	Data EE Write Protect
  4937                           ;	WRTD = 0x1, unprogrammed default
  4938   30000B                     	org	3145739
  4939   30000B  E0                 	db	224
  4940                           
  4941                           ;Config register CONFIG7L @ 0x30000C
  4942                           ;	unspecified, using default values
  4943                           ;	Table Read Protect 00800-003FFF
  4944                           ;	EBTR0 = 0x1, unprogrammed default
  4945                           ;	Table Read Protect 004000-07FFF
  4946                           ;	EBTR1 = 0x1, unprogrammed default
  4947                           ;	Table Read Protect 08000-0BFFF
  4948                           ;	EBTR2 = 0x1, unprogrammed default
  4949   30000C                     	org	3145740
  4950   30000C  0F                 	db	15
  4951                           
  4952                           ;Config register CONFIG7H @ 0x30000D
  4953                           ;	unspecified, using default values
  4954                           ;	Table Read Protect Boot
  4955                           ;	EBTRB = 0x1, unprogrammed default
  4956   30000D                     	org	3145741
  4957   30000D  40                 	db	64
  4958                           tosu	equ	0xFFF
  4959                           tosh	equ	0xFFE
  4960                           tosl	equ	0xFFD
  4961                           stkptr	equ	0xFFC
  4962                           pclatu	equ	0xFFB
  4963                           pclath	equ	0xFFA
  4964                           pcl	equ	0xFF9
  4965                           tblptru	equ	0xFF8
  4966                           tblptrh	equ	0xFF7
  4967                           tblptrl	equ	0xFF6
  4968                           tablat	equ	0xFF5
  4969                           prodh	equ	0xFF4
  4970                           prodl	equ	0xFF3
  4971                           indf0	equ	0xFEF
  4972                           postinc0	equ	0xFEE
  4973                           postdec0	equ	0xFED
  4974                           preinc0	equ	0xFEC
  4975                           plusw0	equ	0xFEB
  4976                           fsr0h	equ	0xFEA
  4977                           fsr0l	equ	0xFE9
  4978                           wreg	equ	0xFE8
  4979                           indf1	equ	0xFE7
  4980                           postinc1	equ	0xFE6
  4981                           postdec1	equ	0xFE5
  4982                           preinc1	equ	0xFE4
  4983                           plusw1	equ	0xFE3
  4984                           fsr1h	equ	0xFE2
  4985                           fsr1l	equ	0xFE1
  4986                           bsr	equ	0xFE0
  4987                           indf2	equ	0xFDF
  4988                           postinc2	equ	0xFDE
  4989                           postdec2	equ	0xFDD
  4990                           preinc2	equ	0xFDC
  4991                           plusw2	equ	0xFDB
  4992                           fsr2h	equ	0xFDA
  4993                           fsr2l	equ	0xFD9
  4994                           status	equ	0xFD8

Data Sizes:
    Strings     22
    Constant    0
    Data        2
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      85
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    RS232_vSendMessage@u8Message	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    S151s_HeadLightStateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightEventPoll(), 

    headLightSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightEventPoll(), 

    S151s_HeadLightStateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightActiveState(), SGL_HeadLightPasiveState(), 

    headLightSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_HeadLightActiveState(), SGL_HeadLightPasiveState(), 

    SGL_toggleSideHazardLights@toggle	PTR unsigned char  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState@toggleLights(COMRAM[1]), SGL_BlinkSwitchOnState@toggleLights(COMRAM[1]), 

    SGL_toggleAllHazardLights@toggle	PTR unsigned char  size(2) Largest target is 1
		 -> SGL_BlinkPasiveState@toggleLights(COMRAM[1]), 

    S26s_blinkStateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkEventPoll(), 

    blinkerSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkEventPoll(), 

    S26s_blinkStateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState(), SGL_BlinkSwitchOnState(), SGL_BlinkPasiveState(), 

    blinkerSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> SGL_BlinkSwitchOffState(), SGL_BlinkSwitchOnState(), SGL_BlinkPasiveState(), 


Critical Paths under _main in COMRAM

    _LIGHTS_BrakeInit->_IOC_vSetOutputPort
    _SGL_BlinkersRun->_SGL_BlinkSwitchOffState
    _SGL_BlinkSwitchOnState->_DIAGNOSIS_ActivateError
    _SGL_setSideHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkSwitchOffState->_DIAGNOSIS_ActivateError
    _SGL_toggleSideHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkPasiveState->_DIAGNOSIS_ActivateError
    _SGL_toggleAllHazardLights->_IOC_vSetOutputPort
    _SGL_setAllHazardLights->_IOC_vSetOutputPort
    _SGL_BlinkEventPoll->_IOC_T16GetInputPort
    _LIGHTS_BrakeRun->_DIAGNOSIS_ActivateError
    _SGL_HeadLightPasiveState->_SGL_isNight
    _SGL_isNight->___ftge
    _SGL_HeadLightEventPoll->_IOC_T16GetInputPort
    _SGL_HeadLightActiveState->_DIAGNOSIS_ActivateError
    _DIAGNOSIS_ActivateError->___ftge
    ___lwtoft->___ftpack
    ___ftge->___lwtoft
    _IOC_vSetOutputPort->_PCS_vSetOutputPortD
    _IOC_vSetOutputPort->_PCS_vSetOutputPortE
    _IOC_T16GetInputPort->_PCS_T16GetInputPortC
    _RS232_vSendMessage->_RS232_vSendDataByte

Critical Paths under _INT_vInterruptHandler in COMRAM

    _INT_vInterruptHandler->_ADC_vConversionCompleted

Critical Paths under _main in BANK0

    None.

Critical Paths under _INT_vInterruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT_vInterruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT_vInterruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT_vInterruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT_vInterruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT_vInterruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT_vInterruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT_vInterruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INT_vInterruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INT_vInterruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INT_vInterruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INT_vInterruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INT_vInterruptHandler in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  112552
                        _RS232_vInit
                 _RS232_vSendMessage
                  _SCHED_vInitSystem
              _SCHED_vStartScheduler
 ---------------------------------------------------------------------------------
 (1) _SCHED_vStartScheduler                                0     0      0  112341
                    _TASK_vTask100ms
                     _TASK_vTask10ms
                      _TASK_vTask1ms
                       _TASK_vTask1s
                  _TASK_vTaskAppInit
 ---------------------------------------------------------------------------------
 (2) _TASK_vTaskAppInit                                    0     0      0    5487
                   _LIGHTS_BrakeInit
                _LIGHTS_HeadLampInit
                   _SGL_BlinkersInit
 ---------------------------------------------------------------------------------
 (3) _SGL_BlinkersInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_HeadLampInit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_BrakeInit                                     0     0      0    5487
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask1s                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask1ms                                        0     0      0   81443
                    _LIGHTS_BrakeRun
                    _SGL_BlinkersRun
 ---------------------------------------------------------------------------------
 (3) _SGL_BlinkersRun                                      0     0      0   65133
                 _SGL_BlinkEventPoll *
               _SGL_BlinkPasiveState *
            _SGL_BlinkSwitchOffState *
             _SGL_BlinkSwitchOnState *
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkSwitchOnState                               0     0      0   27144
            _DIAGNOSIS_ActivateError
             _SGL_setAllHazardLights
            _SGL_setSideHazardLights
         _SGL_toggleSideHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_setSideHazardLights                              2     1      1    5673
                                             20 COMRAM     2     1      1
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkSwitchOffState                              2     2      0   15896
                                             29 COMRAM     2     2      0
            _DIAGNOSIS_ActivateError
         _SGL_toggleSideHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_toggleSideHazardLights                           3     0      3    5945
                                             20 COMRAM     3     0      3
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkPasiveState                                 0     0      0   21221
            _DIAGNOSIS_ActivateError
             _SGL_setAllHazardLights
          _SGL_toggleAllHazardLights
 ---------------------------------------------------------------------------------
 (5) _SGL_toggleAllHazardLights                            2     0      2    5695
                                             20 COMRAM     2     0      2
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (5) _SGL_setAllHazardLights                               1     1      0    5575
                                             20 COMRAM     1     1      0
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_BlinkEventPoll                                   0     0      0     872
                _IOC_T16GetInputPort
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_BrakeRun                                      0     0      0   16310
            _DIAGNOSIS_ActivateError
                _IOC_T16GetInputPort
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask10ms                                       0     0      0   25411
                 _LIGHTS_HeadLampRun
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_HeadLampRun                                   0     0      0   25411
           _SGL_HeadLightActiveState *
             _SGL_HeadLightEventPoll *
           _SGL_HeadLightPasiveState *
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightPasiveState                             0     0      0    9101
                 _IOC_vSetOutputPort
                        _SGL_isNight
 ---------------------------------------------------------------------------------
 (5) _SGL_isNight                                          2     2      0    3614
                                             27 COMRAM     2     2      0
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightEventPoll                               0     0      0     872
                _IOC_T16GetInputPort
 ---------------------------------------------------------------------------------
 (4) _SGL_HeadLightActiveState                             0     0      0   15438
            _DIAGNOSIS_ActivateError
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (5) _DIAGNOSIS_ActivateError                              2     2      0    9951
                                             27 COMRAM     2     2      0
                _IOC_T16GetInputPort
                 _IOC_vSetOutputPort
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2977
                                             15 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2727
                                              7 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     592
                                             18 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) _IOC_vSetOutputPort                                   5     2      3    5487
                                             15 COMRAM     5     2      3
                _PCS_vSetOutputPortD
                _PCS_vSetOutputPortE
 ---------------------------------------------------------------------------------
 (5) _PCS_vSetOutputPortE                                  8     7      1     234
                                              7 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (5) _PCS_vSetOutputPortD                                  8     7      1     234
                                              7 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (6) _IOC_T16GetInputPort                                  6     4      2     872
                                             17 COMRAM     6     4      2
                _ADC_u16ReadAdcValue
               _PCS_T16GetInputPortC
 ---------------------------------------------------------------------------------
 (7) _PCS_T16GetInputPortC                                10     8      2     113
                                              7 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (7) _ADC_u16ReadAdcValue                                  6     4      2      91
                                              7 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask100ms                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SCHED_vInitSystem                                    0     0      0       0
                          _ADC_vInit
                          _INT_vInit
                          _PCS_vInit
                          _TIM_vInit
 ---------------------------------------------------------------------------------
 (2) _TIM_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PCS_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS232_vSendMessage                                   5     3      2     181
                                              8 COMRAM     5     3      2
                _RS232_vSendDataByte
 ---------------------------------------------------------------------------------
 (2) _RS232_vSendDataByte                                  1     1      0      15
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RS232_vInit                                          2     2      0      30
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INT_vInterruptHandler                                4     4      0       0
                                              3 COMRAM     4     4      0
           _ADC_vConversionCompleted
            _SCHED_vTickFunctionCall
 ---------------------------------------------------------------------------------
 (9) _SCHED_vTickFunctionCall                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _ADC_vConversionCompleted                             3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RS232_vInit
   _RS232_vSendMessage
     _RS232_vSendDataByte
   _SCHED_vInitSystem
     _ADC_vInit
     _INT_vInit
     _PCS_vInit
     _TIM_vInit
   _SCHED_vStartScheduler
     _TASK_vTask100ms
     _TASK_vTask10ms
       _LIGHTS_HeadLampRun
         _SGL_HeadLightActiveState *
           _DIAGNOSIS_ActivateError
             _IOC_T16GetInputPort
               _ADC_u16ReadAdcValue
               _PCS_T16GetInputPortC
             _IOC_vSetOutputPort
               _PCS_vSetOutputPortD
               _PCS_vSetOutputPortE
             ___ftge
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft
           _IOC_vSetOutputPort
         _SGL_HeadLightEventPoll *
           _IOC_T16GetInputPort
         _SGL_HeadLightPasiveState *
           _IOC_vSetOutputPort
           _SGL_isNight
             ___ftge
             ___lwtoft
     _TASK_vTask1ms
       _LIGHTS_BrakeRun
         _DIAGNOSIS_ActivateError
         _IOC_T16GetInputPort
         _IOC_vSetOutputPort
       _SGL_BlinkersRun
         _SGL_BlinkEventPoll *
           _IOC_T16GetInputPort
         _SGL_BlinkPasiveState *
           _DIAGNOSIS_ActivateError
           _SGL_setAllHazardLights
             _IOC_vSetOutputPort
           _SGL_toggleAllHazardLights
             _IOC_vSetOutputPort
         _SGL_BlinkSwitchOffState *
           _DIAGNOSIS_ActivateError
           _SGL_toggleSideHazardLights
             _IOC_vSetOutputPort
         _SGL_BlinkSwitchOnState *
           _DIAGNOSIS_ActivateError
           _SGL_setAllHazardLights
           _SGL_setSideHazardLights
             _IOC_vSetOutputPort
           _SGL_toggleSideHazardLights
     _TASK_vTask1s
     _TASK_vTaskAppInit
       _LIGHTS_BrakeInit
         _IOC_vSetOutputPort
       _LIGHTS_HeadLampInit
       _SGL_BlinkersInit

 _INT_vInterruptHandler (ROOT)
   _ADC_vConversionCompleted
   _SCHED_vTickFunctionCall

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBIGSFRlllll     27F      0       0      41        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1F      55       1       90.4%
BITBIGSFRhlhh       25      0       0      32        0.0%
BITBIGSFRlhh        10      0       0      34        0.0%
BITBIGSFRlllh        D      0       0      39        0.0%
BITBIGSFRhh          D      0       0      31        0.0%
BITBIGSFRlhll        B      0       0      36        0.0%
BITBIGSFRllhh        6      0       0      37        0.0%
BITBIGSFRhll         5      0       0      33        0.0%
BITBIGSFRllllh       2      0       0      40        0.0%
BITBIGSFRlhlh        1      0       0      35        0.0%
BITBIGSFRllhl        1      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      55       3        0.0%
DATA                 0      0      55       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 15 18:31:25 2022

                                                  ?_SGL_BlinkSwitchOnState 0035  
                                                 ?_SGL_BlinkSwitchOffState 0035  
                                         SGL_BlinkSwitchOnState@firstEntry 0054  
                                                                       l30 1B30  
                                                                       l48 11EA  
                                                                       l66 110A  
                                                                       l86 12C0  
                                                     ?_LIGHTS_HeadLampInit 0035  
                                                                      l201 1C5A  
                                                                      l126 15C8  
                                                                      l134 14B8  
                                                                      l251 1780  
                                                                      l139 1428  
                                                                      l260 1702  
                                                                      l254 17CA  
                                                                      l263 174C  
                                                                      l249 1778  
                                                                      l169 164E  
                                                                      l258 16FA  
                                                                      l267 193A  
                                                                      l269 1942  
                                                                      l358 1C38  
                                                                      l199 1C52  
                                                                      l691 1384  
                                                                      l766 16CE  
                                                                      _PR2 000FCB  
                                                                      u910 1760  
                                                                      u920 1764  
                                                                      u954 179E  
                                                                      u970 16E2  
                                                                      u955 1798  
                                                                      u964 17BE  
                                                                      u980 16E6  
                                                                      u965 17B8  
                                                                      prod 000FF3  
                                                                      tosl 000FFD  
                                                                      wreg 000FE8  
                                                                     l2020 11A6  
                                                                     l2006 117A  
                                                                     l2008 1182  
                                                                     l2132 125E  
                                                                     l2070 1092  
                                                                     l2118 1212  
                                                                     l2048 1038  
                                                                     l2136 127C  
                                                                     l2304 18A2  
                                                                     l2170 1460  
                                                                     l2058 105A  
                                                                     l2068 108C  
                                                                     l2148 12A8  
                                                                     l2174 147E  
                                                                     l2246 1BF8  
                                                                     l2176 1490  
                                                                     l2192 13D4  
                                                                     l2088 10CE  
                                                                     l2274 198C  
                                                                     l1812 17AA  
                                                                     l2278 19AE  
                                                                     l1902 169C  
                                                                     l2286 186A  
                                                                     l1824 172C  
                                                                     l1850 132C  
                                                                     l1842 12E8  
                                                                     l2298 1890  
                                                                     l1908 16CA  
                                                                     l1852 134C  
                                                                     l1844 12F4  
                                                                     l1924 14F8  
                                                                     l1854 1358  
                                                                     l1846 1314  
                                                                     l1926 152A  
                                                                     l1934 1B0E  
                                                                     l1696 1E84  
                                                                     l1890 1AD4  
                                                                     l1874 1C22  
                                                                     l1948 163C  
                                                                     l1964 158C  
                                                                     l1886 1ABA  
                                                                     l1974 15C4  
                                                                     l1984 1128  
                                                                     l1898 1678  
                                                                     l1996 114C  
                                                                     STR_1 1001  
                                                  ?_SGL_HeadLightEventPoll 0035  
                                                                     u1014 1720  
                                                                     u1110 1364  
                                                                     u1015 171A  
                                                                     u1024 1740  
                                                                     u1025 173A  
                                                                     u1044 195E  
                                                                     u1045 1958  
                                                                     u1054 1974  
                                                                     u1070 12D8  
                                                                     u1055 196E  
                                                                     u1250 15FC  
                                                                     u1510 12B6  
                                                                     u1360 11B4  
                                                                     u1608 1A18  
                                                                     u1609 1A30  
                                                                     u1717 1BB6  
                                                                     u1638 1A44  
                                                                     u1639 1A5C  
                                                                     u1658 1A6E  
                                                                     u1659 1A86  
                                                                     u1588 19EE  
                                                                     u1589 1A06  
                                                                     _TMR2 000FCC  
                                                 ??_SGL_setAllHazardLights 0049  
                                                             ?_RS232_vInit 0035  
                                                                     _main 1DCA  
                                                             ___ftpack@arg 003C  
                                                             ___ftpack@exp 003F  
                                                                     fsr2h 000FDA  
                                                                     indf2 000FDF  
                                                                     fsr2l 000FD9  
                                                                     btemp 0056  
                                           PCS_vSetOutputPortD@u8BitNumber 0042  
                                                    ??_RS232_vSendDataByte 003C  
                                                                     prodh 000FF4  
                                                                     prodl 000FF3  
                                                                     start 004C  
                                                    ?_PCS_T16GetInputPortC 003C  
                                           __end_of_SGL_BlinkSwitchOnState 1110  
                                                          _LIGHTS_BrakeRun 1BC2  
                                                             ___param_bank 000000  
                                                    _INT_vInterruptHandler 0008  
                                         __end_of_SGL_HeadLightPasiveState 14BE  
                                                    ??_LIGHTS_HeadLampInit 003C  
                                          __end_of_SCHED_vTickFunctionCall 1E46  
                                                                    ?_main 0035  
                                                       _IOC_vSetOutputPort 1C00  
                                                                    _T2CON 000FCA  
                                                                    i2l228 0034  
                                                                    _SPBRG 000FAF  
                                                                    _PORTC 000F82  
                                                                    _PORTD 000F83  
                                                                    _PORTE 000F84  
                                                                    _TRISD 000F95  
                                                                    _TXREG 000FAD  
                                                         ?_SGL_BlinkersRun 0035  
                                                      ?_IOC_vSetOutputPort 0044  
                                           __end_of_SGL_HeadLightEventPoll 1DA2  
                                                            ___ftpack@sign 0040  
                                                                    pclath 000FFA  
                                                                    tablat 000FF5  
                                                                    ttemp5 0057  
                                                                    ttemp6 005A  
                                                                    ttemp7 005E  
                                                                    status 000FD8  
                                                        __end_of_ADC_vInit 1BC2  
                                                                    wtemp8 0057  
                                           PCS_vSetOutputPortE@u8BitNumber 0042  
                                          __end_of_SGL_BlinkSwitchOffState 12C6  
                                                         _LIGHTS_BrakeInit 1E04  
                                                          __initialization 1D1C  
                                                     ??_IOC_vSetOutputPort 0047  
                                                             __end_of_main 1DE8  
                                            __end_of_SCHED_vStartScheduler 18C2  
                                                                   ??_main 0054  
                                                            __activetblptr 000002  
                                      PCS_vSetOutputPortD@u8BitNumberValue 0043  
                                                    __end_of_TASK_vTask1ms 1EA0  
                                                                   _ADRESH 000FC4  
                                                                   _ADRESL 000FC3  
                                      SGL_BlinkSwitchOffState@toggleLights 0032  
                                                         __end_of___ftpack 138A  
                                                                   i2l1774 0026  
                                                         __end_of___lwtoft 1DCA  
                                                  __end_of_LIGHTS_BrakeRun 1C00  
                                                                   _SPBRGH 000F7F  
                                                   ??_PCS_T16GetInputPortC 003E  
                                                        __end_of_INT_vInit 1E5A  
                                                        __end_of_PCS_vInit 1E04  
                                               __end_of_LIGHTS_HeadLampRun 1A8C  
                                                   ?_INT_vInterruptHandler 0035  
                                                        ?_SGL_BlinkersInit 0035  
                                               __end_of_RS232_vSendMessage 19E0  
                                                                   ___ftge 1654  
                                       IOC_vSetOutputPort@u16ChannelSelect 0044  
                                             ??_SGL_toggleSideHazardLights 004C  
                                                       ??_SGL_BlinkersInit 003C  
                                                                   clear_0 1D3A  
                                                                   isa$std 000001  
                                                 _SGL_HeadLightPasiveState 142E  
                                                        __end_of_TIM_vInit 1D1C  
                                            SGL_BlinkSwitchOffState@cycles 0030  
                                                             __pdataCOMRAM 0054  
                                                ?_ADC_vConversionCompleted 0035  
                                      IOC_T16GetInputPort@u16ChannelSelect 0046  
                                                             ?_SGL_isNight 0035  
                                                             __mediumconst 0000  
                                                                   tblptrh 000FF7  
                                                                   tblptrl 000FF6  
                                                                   tblptru 000FF8  
                                               ??_SGL_HeadLightActiveState 0052  
                                              SGL_setSideHazardLights@side 0049  
                                              __end_of_IOC_T16GetInputPort 1AE2  
                                                        _SCHED_vInitSystem 1E1A  
                                                               __accesstop 0060  
                                                  __end_of__initialization 1D40  
                                                        _TASK_vTaskAppInit 1E6E  
                                              __end_of_PCS_vSetOutputPortD 17D0  
                                              __end_of_PCS_vSetOutputPortE 1752  
                                                               ___ftge@ff1 0047  
                                                               ___ftge@ff2 004A  
                                                       ?_SCHED_vInitSystem 0035  
                                                            ___rparam_used 000001  
                                                       ?_TASK_vTaskAppInit 0035  
                                                           __pcstackCOMRAM 0035  
                                                      ??_SCHED_vInitSystem 003C  
                                                           _TASK_vTask10ms 1EA0  
                                                      ??_TASK_vTaskAppInit 0049  
                                                   _SGL_setAllHazardLights 1B36  
                                                               ___lwtoft@c 0044  
                                                  _SGL_setSideHazardLights 1AE2  
                                       DIAGNOSIS_ActivateError@sensorValue 0050  
                                             SGL_isNight@currentLightLevel 0050  
                                                        ??_TASK_vTask100ms 003C  
                                                __end_of_SCHED_vInitSystem 1E30  
                                                __end_of_TASK_vTaskAppInit 1E80  
                                                         ?_LIGHTS_BrakeRun 0035  
                                         SGL_BlinkPasiveState@toggleLights 0034  
                                      PCS_vSetOutputPortE@u8BitNumberValue 0043  
                                                   __end_of_TASK_vTask10ms 1EAA  
                                                                  ?___ftge 0047  
                                                   LIGHTS_BrakeRun@counter 002F  
                                                 ?_DIAGNOSIS_ActivateError 0035  
                                                                ?___ftpack 003C  
                                                            ?_TASK_vTask1s 0035  
                                                                ?___lwtoft 0044  
                                                 __end_of_LIGHTS_BrakeInit 1E1A  
                                                                  i2u80_48 190E  
                                                                  i2u78_40 18E2  
                                                                  i2u79_40 190A  
                                                                  i2u78_48 18E6  
                                              __end_of_RS232_vSendDataByte 1E92  
                                               __end_of_SGL_BlinkEventPoll 1CE8  
                                              __end_of_LIGHTS_HeadLampInit 1D78  
                                                                  __Hparam 0000  
                                                                  __Lparam 0000  
                                                                _ADC_vInit 1B7E  
                                                          ?_TASK_vTask10ms 0035  
                                       __end_of_SGL_toggleSideHazardLights 1546  
                                               _SGL_toggleSideHazardLights 14BE  
                                         IOC_vSetOutputPort@u16ChannelMask 0047  
                                                             __psmallconst 1000  
                                                ??_SGL_setSideHazardLights 004A  
                                                           ??_TASK_vTask1s 003C  
                                                                  __pcinit 1D1C  
                                                               ??___ftpack 0041  
                                                                  __ramtop 1000  
                                                                  __ptext0 1DCA  
                                                                  __ptext1 184C  
                                                                  __ptext2 1E6E  
                                                                  __ptext3 1C7C  
                                                                  __ptext4 1D4E  
                                                                  __ptext5 1E04  
                                                                  __ptext6 1EAA  
                                                                  __ptext7 1E92  
                                                                  __ptext8 19E0  
                                                                  __ptext9 1110  
                                                               ??___lwtoft 0047  
                                                  _PCS_vSetOutputPortD$833 003F  
                                                  _PCS_vSetOutputPortE$839 003F  
                                                                _T2CONbits 000FCA  
                                                        _g_lightStateFrana 0020  
                                           SGL_BlinkSwitchOffState@counter 0024  
                                                     end_of_initialization 1D40  
                                                            _sched_bTicked 001A  
                                                            _sched_gTick1s 001C  
                                                  _SCHED_vTickFunctionCall 1E30  
                                                            __Lmediumconst 0000  
                                                  ??_INT_vInterruptHandler 0038  
                                                               ?_ADC_vInit 0035  
                                       SGL_BlinkSwitchOnState@toggleLights 0033  
                                               ??_SGL_HeadLightPasiveState 0052  
                                         __end_of_ADC_vConversionCompleted 1926  
                                          __end_of_DIAGNOSIS_ActivateError 1654  
                                                                _RCSTAbits 000FAB  
                                                      _ADC_u16ReadAdcValue 1C3E  
                                                                  postdec2 000FDD  
                                               ?_SGL_toggleAllHazardLights 0049  
                                                                _INT_vInit 1E46  
                                                                  postinc0 000FEE  
                                                                  postinc2 000FDE  
                                           SGL_BlinkPasiveState@firstEntry 0055  
                                                                _PCS_vInit 1DE8  
                                             SGL_setSideHazardLights@value 004A  
                                                       _LIGHTS_HeadLampRun 1A36  
                                                    _SCHED_vStartScheduler 184C  
                                                  _SGL_BlinkSwitchOffState 11F0  
                                                       _RS232_vSendMessage 1984  
                                                                _TRISAbits 000F92  
                                                                _TRISCbits 000F94  
                                                                _TRISEbits 000F96  
                                                                _TIM_vInit 1CE8  
                                                     ?_ADC_u16ReadAdcValue 003C  
                                                      ?_LIGHTS_HeadLampRun 0035  
                                                      ?_RS232_vSendMessage 003D  
                                                 ??_SGL_BlinkSwitchOnState 0052  
                                                                _TXSTAbits 000FAC  
                                                  _ADC_u16ReadAdcValue$501 003E  
                                                  ?_SGL_setAllHazardLights 0035  
                                                               ?_INT_vInit 0035  
                                                     ??_LIGHTS_HeadLampRun 0052  
                                        __end_of_SGL_toggleAllHazardLights 184C  
                                          SGL_toggleAllHazardLights@toggle 0049  
                                                     ??_RS232_vSendMessage 003F  
                                                           __end_of___ftge 16D4  
                                                               ?_PCS_vInit 0035  
                                                          _TASK_vTask100ms 1EB0  
                                                            __pidataCOMRAM 1EB6  
                                                 ??_SGL_HeadLightEventPoll 004C  
                                              SGL_BlinkPasiveState@counter 0028  
                                                      start_initialization 1D1C  
                                                    ??_ADC_u16ReadAdcValue 003E  
                                                               ?_TIM_vInit 0035  
                                                     SGL_isNight@prevState 002E  
                                             __end_of_SGL_BlinkPasiveState 11F0  
                                                ??_SCHED_vTickFunctionCall 0035  
                                                            ??_RS232_vInit 003C  
                                                         _sched_gTick100ms 002C  
                                                     __end_of_TASK_vTask1s 1EB0  
                                           __end_of_SGL_setAllHazardLights 1B7E  
                                                              ??_ADC_vInit 003C  
                                                ?_SGL_HeadLightActiveState 0035  
                                                                 ??___ftge 004D  
                                                        ??_SGL_BlinkersRun 0054  
                                                 _ADC_vConversionCompleted 18C2  
                                                ??_SGL_BlinkSwitchOffState 0052  
                                                   ?_SCHED_vStartScheduler 0035  
                                               PCS_vSetOutputPortD@u8Value 003C  
                                                              __pbssCOMRAM 0001  
                                               PCS_vSetOutputPortE@u8Value 003C  
                                     PCS_T16GetInputPortC@u8BitNumberValue 0045  
                                                        ?_LIGHTS_BrakeInit 0035  
                                                            _TASK_vTask1ms 1E92  
                                              IOC_T16GetInputPort@pinValue 0048  
                                                              _headLightSM 000D  
                                                       ??_LIGHTS_BrakeInit 0049  
                                                         ??_TASK_vTask10ms 0052  
                                                  __end_of_TASK_vTask100ms 1EB6  
                                                      __end_of_RS232_vInit 1E6E  
                                                       _SGL_BlinkEventPoll 1CB2  
                                                                __pintcode 0008  
                                                                _blinkerSM 0001  
                                                              ??_INT_vInit 003C  
                                              ?_SGL_toggleSideHazardLights 0049  
                                                              ??_PCS_vInit 003C  
                                                      ?_SGL_BlinkEventPoll 0035  
                                               SGL_BlinkSwitchOnState@side 0031  
                                                              __smallconst 1000  
                                                         _SGL_BlinkersInit 1C7C  
                                                              ??_TIM_vInit 003C  
                                                           ?_TASK_vTask1ms 0035  
                                                RS232_vSendMessage@u8Count 0041  
                                                     ??_SGL_BlinkEventPoll 004C  
                                                                 _IPR1bits 000F9F  
                                                                 _PIE1bits 000F9D  
                                            __end_of_INT_vInterruptHandler 004C  
                                                                 _PIR1bits 000F9E  
                                            PCS_vSetOutputPortD@u8BitValue 0041  
                                          PCS_T16GetInputPortC@u8BitNumber 0044  
                                              ??_SGL_toggleAllHazardLights 004B  
                                                     _SGL_BlinkPasiveState 1110  
                                        ADC_u16ReadAdcValue@U8ChannelValue 0040  
                                                   _SGL_BlinkSwitchOnState 1018  
                                                               _ADCON0bits 000FC2  
                                                               _ADCON1bits 000FC1  
                                                               _ADCON2bits 000FC0  
                                                            ??_SGL_isNight 0050  
                                           SGL_toggleSideHazardLights@side 004B  
                                            PCS_vSetOutputPortE@u8BitValue 0041  
                                                              _RS232_vInit 1E5A  
                                                   _SGL_HeadLightEventPoll 1D78  
                                             ADC_u16ReadAdcValue@U8Channel 0041  
                                                          _sched_gTick10ms 002D  
                                               __end_of_IOC_vSetOutputPort 1C3E  
                                                                 __Hrparam 0000  
                                                         ?_TASK_vTask100ms 0035  
                                                                 __Lrparam 0000  
                                                 ?_SGL_setSideHazardLights 0049  
                                                    ?_SGL_BlinkPasiveState 0035  
                                              SGL_BlinkSwitchOffState@side 0022  
                                        IOC_T16GetInputPort@u16ChannelMask 004A  
                                                                 ___ftpack 12C6  
                                                             _TASK_vTask1s 1EAA  
                                                                 ___lwtoft 1DA2  
                                                        ??_LIGHTS_BrakeRun 0052  
                                             __end_of_PCS_T16GetInputPortC 1984  
                                                          ??_TASK_vTask1ms 0054  
                                              RS232_vSendMessage@u8Message 003D  
                                                ?_SGL_HeadLightPasiveState 0035  
                                                      _IOC_T16GetInputPort 1A8C  
                                                                 __ptext10 11F0  
                                                  _DIAGNOSIS_ActivateError 15CE  
                                                                 __ptext11 1018  
                                                                 __ptext20 138A  
                                                                 __ptext12 1AE2  
                                                                 __ptext21 142E  
                                                                 __ptext13 14BE  
                                                                 __ptext30 1752  
                                                                 __ptext22 1546  
                                                                 __ptext14 17D0  
                                                                 __ptext31 1A8C  
                                                                 __ptext23 1D78  
                                                                 __ptext15 1B36  
                                                                 __ptext40 1984  
                                                                 __ptext32 1926  
                                                                 __ptext24 15CE  
                                                                 __ptext16 1CB2  
                                                                 __ptext41 1E80  
                                                                 __ptext33 1C3E  
                                                                 __ptext25 1DA2  
                                                                 __ptext17 1BC2  
                                                                 __ptext42 1E5A  
                                                                 __ptext34 1EB0  
                                                                 __ptext26 12C6  
                                                                 __ptext18 1EA0  
                                                                 __ptext35 1E1A  
                                                                 __ptext27 1654  
                                                                 __ptext19 1A36  
                                                                 __ptext44 1E30  
                                                                 __ptext36 1CE8  
                                                                 __ptext28 1C00  
                                                                 __ptext45 18C2  
                                                                 __ptext37 1DE8  
                                                                 __ptext29 16D4  
                                                                 __ptext46 0000  
                                                                 __ptext38 1E46  
                                                                 __ptext39 1B7E  
                                                _SGL_toggleAllHazardLights 17D0  
                                         SGL_toggleSideHazardLights@toggle 0049  
                                         __end_of_SGL_HeadLightActiveState 142E  
                                                      _PCS_vSetOutputPortD 1752  
                                                      _PCS_vSetOutputPortE 16D4  
                                                      __end_of_SGL_isNight 15CE  
                                                          _SGL_BlinkersRun 19E0  
                                               ??_ADC_vConversionCompleted 0035  
                                                     ?_IOC_T16GetInputPort 0046  
                                                                 isa$xinst 000000  
                                                     ?_PCS_vSetOutputPortD 003C  
                                                     ?_PCS_vSetOutputPortE 003C  
                                                                 int$flags 0056  
                                                  ??_SCHED_vStartScheduler 0054  
                                            SGL_BlinkSwitchOnState@counter 0026  
                                                       _g_lightStateLumini 001E  
                                              __end_of_ADC_u16ReadAdcValue 1C7C  
                                                         _g_sglStareSemnal 002A  
                                                               _INTCONbits 000FF2  
                                                                 intlevel2 1EB8  
                                          __end_of_SGL_setSideHazardLights 1B36  
                                            RS232_vSendDataByte@u8DataByte 003C  
                                                IOC_vSetOutputPort@u8Value 0046  
                                                    ??_IOC_T16GetInputPort 0048  
                                                 __end_of_SGL_BlinkersInit 1CB2  
                                                   ??_SGL_BlinkPasiveState 0052  
                                                    ??_PCS_vSetOutputPortD 003D  
                                                    ??_PCS_vSetOutputPortE 003D  
                                                         _au16AdcReadValue 0016  
                                              SGL_setAllHazardLights@value 0049  
                                                ??_DIAGNOSIS_ActivateError 0050  
                                                      _RS232_vSendDataByte 1E80  
                                                 ?_SCHED_vTickFunctionCall 0035  
                                                              _SGL_isNight 1546  
                                                  __end_of_SGL_BlinkersRun 1A36  
                                                      _LIGHTS_HeadLampInit 1D4E  
                                                 _PCS_T16GetInputPortC$843 0042  
                                                 _SGL_HeadLightActiveState 138A  
                                                     ?_RS232_vSendDataByte 0035  
                                                     _PCS_T16GetInputPortC 1926  
