

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Nov 18 22:13:41 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F6585
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    45                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    46                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    47   000000                     
    48                           ; Version 2.40
    49                           ; Generated 04/07/2022 GMT
    50                           ; 
    51                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution. Publication is not required when
    65                           ;        this file is used in an embedded application.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F6585 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83   000000                     
    84 ;; Function _LIGHTS_DemoState1 is unused but had its address taken
    85   000000                     
    86 ;; Function _LIGHTS_DemoState2 is unused but had its address taken
    87   000000                     
    88 ;; Function _LIGHTS_DemoEventPoll is unused but had its address taken
    89   000000                     
    90                           	psect	idataCOMRAM
    91   0008B6                     __pidataCOMRAM:
    92                           	callstack 0
    93                           
    94                           ;initializer for LIGHTS_BlinkSwitchOnState@firstEntry
    95   0008B6  01                 	db	1
    96                           
    97                           ;initializer for LIGHTS_BlinkPasiveState@firstEntry
    98   0008B7  01                 	db	1
    99   000000                     _PR2	set	4043
   100   000000                     _TMR2	set	4044
   101   000000                     _T2CON	set	4042
   102   000000                     _PORTC	set	3970
   103   000000                     _PORTD	set	3971
   104   000000                     _TRISAbits	set	3986
   105   000000                     _PIE1bits	set	3997
   106   000000                     _PIR1bits	set	3998
   107   000000                     _ADCON2bits	set	4032
   108   000000                     _ADCON1bits	set	4033
   109   000000                     _ADCON0bits	set	4034
   110   000000                     _ADRESL	set	4035
   111   000000                     _ADRESH	set	4036
   112   000000                     _T2CONbits	set	4042
   113   000000                     _INTCONbits	set	4082
   114   000000                     _IPR1bits	set	3999
   115   000000                     _TRISCbits	set	3988
   116   000000                     _TRISEbits	set	3990
   117   000000                     _TRISD	set	3989
   118   000000                     _PORTE	set	3972
   119                           
   120                           ; #config settings
   121                           
   122                           	psect	cinit
   123   0007CA                     __pcinit:
   124                           	callstack 0
   125   0007CA                     start_initialization:
   126                           	callstack 0
   127   0007CA                     __initialization:
   128                           	callstack 0
   129                           
   130                           ; Initialize objects allocated to COMRAM (2 bytes)
   131                           ; load TBLPTR registers with __pidataCOMRAM
   132   0007CA  0EB6               	movlw	low __pidataCOMRAM
   133   0007CC  6EF6               	movwf	tblptrl,c
   134   0007CE  0E08               	movlw	high __pidataCOMRAM
   135   0007D0  6EF7               	movwf	tblptrh,c
   136   0007D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   137   0007D4  6EF8               	movwf	tblptru,c
   138   0007D6  0009               	tblrd		*+	;fetch initializer
   139   0007D8  CFF5 F03A          	movff	tablat,__pdataCOMRAM
   140   0007DC  0009               	tblrd		*+	;fetch initializer
   141   0007DE  CFF5 F03B          	movff	tablat,__pdataCOMRAM+1
   142                           
   143                           ; Clear objects allocated to COMRAM (34 bytes)
   144   0007E2  EE00  F001         	lfsr	0,__pbssCOMRAM
   145   0007E6  0E22               	movlw	34
   146   0007E8                     clear_0:
   147   0007E8  6AEE               	clrf	postinc0,c
   148   0007EA  06E8               	decf	wreg,f,c
   149   0007EC  E1FD               	bnz	clear_0
   150   0007EE                     end_of_initialization:
   151                           	callstack 0
   152   0007EE                     __end_of__initialization:
   153                           	callstack 0
   154   0007EE  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   155   0007F0  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   156   0007F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   157   0007F4  6EF8               	movwf	tblptru,c
   158   0007F6  0100               	movlb	0
   159   0007F8  EF41  F004         	goto	_main	;jump to C main() function
   160                           
   161                           	psect	bssCOMRAM
   162   000001                     __pbssCOMRAM:
   163                           	callstack 0
   164   000001                     _blinkerSM:
   165                           	callstack 0
   166   000001                     	ds	9
   167   00000A                     _demoSM:
   168                           	callstack 0
   169   00000A                     	ds	8
   170   000012                     _au16AdcReadValue:
   171                           	callstack 0
   172   000012                     	ds	4
   173   000016                     _sched_bTicked:
   174                           	callstack 0
   175   000016                     	ds	2
   176   000018                     _sched_gTick1s:
   177                           	callstack 0
   178   000018                     	ds	2
   179   00001A                     LIGHTS_BlinkSwitchOnState@counter:
   180                           	callstack 0
   181   00001A                     	ds	2
   182   00001C                     LIGHTS_BlinkPasiveState@counter:
   183                           	callstack 0
   184   00001C                     	ds	2
   185   00001E                     _sched_gTick100ms:
   186                           	callstack 0
   187   00001E                     	ds	1
   188   00001F                     _sched_gTick10ms:
   189                           	callstack 0
   190   00001F                     	ds	1
   191   000020                     LIGHTS_BlinkSwitchOnState@side:
   192                           	callstack 0
   193   000020                     	ds	1
   194   000021                     LIGHTS_BlinkSwitchOnState@toggleLights:
   195                           	callstack 0
   196   000021                     	ds	1
   197   000022                     LIGHTS_BlinkPasiveState@toggleLights:
   198                           	callstack 0
   199   000022                     	ds	1
   200                           
   201                           	psect	dataCOMRAM
   202   00003A                     __pdataCOMRAM:
   203                           	callstack 0
   204   00003A                     LIGHTS_BlinkSwitchOnState@firstEntry:
   205                           	callstack 0
   206   00003A                     	ds	1
   207   00003B                     LIGHTS_BlinkPasiveState@firstEntry:
   208                           	callstack 0
   209   00003B                     	ds	1
   210                           
   211                           	psect	cstackCOMRAM
   212   000023                     __pcstackCOMRAM:
   213                           	callstack 0
   214   000023                     ??_ADC_vConversionCompleted:
   215   000023                     
   216                           ; 1 bytes @ 0x0
   217   000023                     	ds	3
   218   000026                     ??_INT_vInterruptHandler:
   219                           
   220                           ; 1 bytes @ 0x3
   221   000026                     	ds	4
   222   00002A                     ?_ADC_u16ReadAdcValue:
   223                           	callstack 0
   224   00002A                     ?_PCS_T16GetInputPortC:
   225                           	callstack 0
   226   00002A                     PCS_vSetOutputPortD@u8Value:
   227                           	callstack 0
   228   00002A                     PCS_vSetOutputPortE@u8Value:
   229                           	callstack 0
   230                           
   231                           ; 1 bytes @ 0x7
   232   00002A                     	ds	1
   233   00002B                     ??_PCS_vSetOutputPortD:
   234   00002B                     ??_PCS_vSetOutputPortE:
   235                           
   236                           ; 1 bytes @ 0x8
   237   00002B                     	ds	1
   238   00002C                     ??_PCS_T16GetInputPortC:
   239   00002C                     _ADC_u16ReadAdcValue$404:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0x9
   243   00002C                     	ds	1
   244   00002D                     _PCS_vSetOutputPortD$736:
   245                           	callstack 0
   246   00002D                     _PCS_vSetOutputPortE$742:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0xA
   250   00002D                     	ds	1
   251   00002E                     ADC_u16ReadAdcValue@U8ChannelValue:
   252                           	callstack 0
   253                           
   254                           ; 1 bytes @ 0xB
   255   00002E                     	ds	1
   256   00002F                     ADC_u16ReadAdcValue@U8Channel:
   257                           	callstack 0
   258   00002F                     PCS_vSetOutputPortD@u8BitValue:
   259                           	callstack 0
   260   00002F                     PCS_vSetOutputPortE@u8BitValue:
   261                           	callstack 0
   262                           
   263                           ; 1 bytes @ 0xC
   264   00002F                     	ds	1
   265   000030                     PCS_vSetOutputPortD@u8BitNumber:
   266                           	callstack 0
   267   000030                     PCS_vSetOutputPortE@u8BitNumber:
   268                           	callstack 0
   269   000030                     _PCS_T16GetInputPortC$746:
   270                           	callstack 0
   271                           
   272                           ; 2 bytes @ 0xD
   273   000030                     	ds	1
   274   000031                     PCS_vSetOutputPortD@u8BitNumberValue:
   275                           	callstack 0
   276   000031                     PCS_vSetOutputPortE@u8BitNumberValue:
   277                           	callstack 0
   278                           
   279                           ; 1 bytes @ 0xE
   280   000031                     	ds	1
   281   000032                     PCS_T16GetInputPortC@u8BitNumber:
   282                           	callstack 0
   283   000032                     IOC_vSetOutputPort@u16ChannelSelect:
   284                           	callstack 0
   285                           
   286                           ; 2 bytes @ 0xF
   287   000032                     	ds	1
   288   000033                     PCS_T16GetInputPortC@u8BitNumberValue:
   289                           	callstack 0
   290                           
   291                           ; 1 bytes @ 0x10
   292   000033                     	ds	1
   293   000034                     ?_IOC_T16GetInputPort:
   294                           	callstack 0
   295   000034                     IOC_vSetOutputPort@u8Value:
   296                           	callstack 0
   297   000034                     IOC_T16GetInputPort@u16ChannelSelect:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x11
   301   000034                     	ds	1
   302   000035                     IOC_vSetOutputPort@u16ChannelMask:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x12
   306   000035                     	ds	1
   307   000036                     IOC_T16GetInputPort@pinValue:
   308                           	callstack 0
   309                           
   310                           ; 2 bytes @ 0x13
   311   000036                     	ds	1
   312   000037                     LIGHTS_setAllHazardLights@value:
   313                           	callstack 0
   314   000037                     LIGHTS_setSideHazardLights@side:
   315                           	callstack 0
   316   000037                     LIGHTS_toggleAllHazardLights@toggle:
   317                           	callstack 0
   318   000037                     LIGHTS_toggleSideHazardLights@toggle:
   319                           	callstack 0
   320                           
   321                           ; 2 bytes @ 0x14
   322   000037                     	ds	1
   323   000038                     LIGHTS_setSideHazardLights@value:
   324                           	callstack 0
   325   000038                     IOC_T16GetInputPort@u16ChannelMask:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x15
   329   000038                     	ds	1
   330   000039                     LIGHTS_toggleSideHazardLights@side:
   331                           	callstack 0
   332                           
   333                           ; 1 bytes @ 0x16
   334   000039                     	ds	1
   335   00003A                     
   336                           ; 1 bytes @ 0x17
   337 ;;
   338 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   339 ;;
   340 ;; *************** function _main *****************
   341 ;; Defined at:
   342 ;;		line 11 in file "main.c"
   343 ;; Parameters:    Size  Location     Type
   344 ;;		None
   345 ;; Auto vars:     Size  Location     Type
   346 ;;		None
   347 ;; Return value:  Size  Location     Type
   348 ;;                  1    wreg      void 
   349 ;; Registers used:
   350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   351 ;; Tracked objects:
   352 ;;		On entry : 0/0
   353 ;;		On exit  : 0/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   360 ;;Total ram usage:        0 bytes
   361 ;; Hardware stack levels required when called: 9
   362 ;; This function calls:
   363 ;;		_SCHED_vInitSystem
   364 ;;		_SCHED_vStartScheduler
   365 ;; This function is called by:
   366 ;;		Startup code after reset
   367 ;; This function uses a non-reentrant model
   368 ;;
   369                           
   370                           	psect	text0
   371   000882                     __ptext0:
   372                           	callstack 0
   373   000882                     _main:
   374                           	callstack 0
   375   000882  FFFF               	dw	65535	; assembler added errata NOP
   376                           
   377                           ;main.c: 13: SCHED_vInitSystem();
   378                           
   379                           ;incstack = 0
   380   000884  EC21  F004         	call	_SCHED_vInitSystem	;wreg free
   381                           
   382                           ;main.c: 14: SCHED_vStartScheduler();
   383   000888  ECE6  F001         	call	_SCHED_vStartScheduler	;wreg free
   384   00088C  EF26  F000         	goto	start
   385   000890                     __end_of_main:
   386                           	callstack 0
   387                           
   388 ;; *************** function _SCHED_vStartScheduler *****************
   389 ;; Defined at:
   390 ;;		line 29 in file "sched.c"
   391 ;; Parameters:    Size  Location     Type
   392 ;;		None
   393 ;; Auto vars:     Size  Location     Type
   394 ;;		None
   395 ;; Return value:  Size  Location     Type
   396 ;;                  1    wreg      void 
   397 ;; Registers used:
   398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   399 ;; Tracked objects:
   400 ;;		On entry : 0/0
   401 ;;		On exit  : 0/0
   402 ;;		Unchanged: 0/0
   403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   408 ;;Total ram usage:        0 bytes
   409 ;; Hardware stack levels used: 1
   410 ;; Hardware stack levels required when called: 8
   411 ;; This function calls:
   412 ;;		_TASK_vTask100ms
   413 ;;		_TASK_vTask10ms
   414 ;;		_TASK_vTask1ms
   415 ;;		_TASK_vTask1s
   416 ;;		_TASK_vTaskAppInit
   417 ;; This function is called by:
   418 ;;		_main
   419 ;; This function uses a non-reentrant model
   420 ;;
   421                           
   422                           	psect	text1
   423   0003CC                     __ptext1:
   424                           	callstack 0
   425   0003CC                     _SCHED_vStartScheduler:
   426                           	callstack 0
   427   0003CC  FFFF               	dw	65535	; assembler added errata NOP
   428                           
   429                           ;sched.c: 31: sched_gTick10ms = 0;
   430                           
   431                           ;incstack = 0
   432   0003CE  0E00               	movlw	0
   433   0003D0  6E1F               	movwf	_sched_gTick10ms^0,c
   434                           
   435                           ;sched.c: 32: sched_gTick100ms = 0;
   436   0003D2  0E00               	movlw	0
   437   0003D4  6E1E               	movwf	_sched_gTick100ms^0,c
   438                           
   439                           ;sched.c: 33: sched_gTick1s = 0;
   440   0003D6  0E00               	movlw	0
   441   0003D8  6E19               	movwf	(_sched_gTick1s+1)^0,c
   442   0003DA  0E00               	movlw	0
   443   0003DC  6E18               	movwf	_sched_gTick1s^0,c
   444                           
   445                           ;sched.c: 34: sched_bTicked = 0;;
   446   0003DE  0E00               	movlw	0
   447   0003E0  6E17               	movwf	(_sched_bTicked+1)^0,c
   448   0003E2  0E00               	movlw	0
   449   0003E4  6E16               	movwf	_sched_bTicked^0,c
   450                           
   451                           ;sched.c: 36: TASK_vTaskAppInit();
   452   0003E6  EC48  F004         	call	_TASK_vTaskAppInit	;wreg free
   453   0003EA                     l1687:
   454   0003EA  FFFF               	dw	65535	; assembler added errata NOP
   455                           
   456                           ;sched.c: 39: {;sched.c: 40: if(sched_bTicked)
   457   0003EC  5016               	movf	_sched_bTicked^0,w,c
   458   0003EE  1017               	iorwf	(_sched_bTicked+1)^0,w,c
   459   0003F0  B4D8               	btfsc	status,2,c
   460   0003F2  D7FB               	goto	l1687
   461                           
   462                           ;sched.c: 41: {;sched.c: 42: sched_bTicked = 0;;
   463   0003F4  0E00               	movlw	0
   464   0003F6  6E17               	movwf	(_sched_bTicked+1)^0,c
   465   0003F8  0E00               	movlw	0
   466   0003FA  6E16               	movwf	_sched_bTicked^0,c
   467                           
   468                           ;sched.c: 43: TASK_vTask1ms();
   469   0003FC  EC4D  F004         	call	_TASK_vTask1ms	;wreg free
   470                           
   471                           ;sched.c: 45: if(sched_gTick10ms == 10)
   472   000400  0E0A               	movlw	10
   473   000402  181F               	xorwf	_sched_gTick10ms^0,w,c
   474   000404  A4D8               	btfss	status,2,c
   475   000406  D004               	goto	l1699
   476                           
   477                           ;sched.c: 46: {;sched.c: 47: sched_gTick10ms = 0;
   478   000408  0E00               	movlw	0
   479   00040A  6E1F               	movwf	_sched_gTick10ms^0,c
   480                           
   481                           ;sched.c: 48: TASK_vTask10ms();
   482   00040C  EC55  F004         	call	_TASK_vTask10ms	;wreg free
   483   000410                     l1699:
   484   000410  FFFF               	dw	65535	; assembler added errata NOP
   485                           
   486                           ;sched.c: 49: };sched.c: 50: if(sched_gTick100ms == 100)
   487   000412  0E64               	movlw	100
   488   000414  181E               	xorwf	_sched_gTick100ms^0,w,c
   489   000416  A4D8               	btfss	status,2,c
   490   000418  D004               	goto	l1705
   491                           
   492                           ;sched.c: 51: {;sched.c: 52: sched_gTick100ms = 0;
   493   00041A  0E00               	movlw	0
   494   00041C  6E1E               	movwf	_sched_gTick100ms^0,c
   495                           
   496                           ;sched.c: 53: TASK_vTask100ms();
   497   00041E  EC58  F004         	call	_TASK_vTask100ms	;wreg free
   498   000422                     l1705:
   499   000422  FFFF               	dw	65535	; assembler added errata NOP
   500                           
   501                           ;sched.c: 54: };sched.c: 55: if(sched_gTick1s == 1000)
   502   000424  0EE8               	movlw	232
   503   000426  1818               	xorwf	_sched_gTick1s^0,w,c
   504   000428  E1E0               	bnz	l1687
   505   00042A  0E03               	movlw	3
   506   00042C  1819               	xorwf	(_sched_gTick1s+1)^0,w,c
   507   00042E  A4D8               	btfss	status,2,c
   508   000430  D7DC               	goto	l1687
   509                           
   510                           ;sched.c: 56: {;sched.c: 57: sched_gTick1s = 0;
   511   000432  0E00               	movlw	0
   512   000434  6E19               	movwf	(_sched_gTick1s+1)^0,c
   513   000436  0E00               	movlw	0
   514   000438  6E18               	movwf	_sched_gTick1s^0,c
   515                           
   516                           ;sched.c: 58: TASK_vTask1s();
   517   00043A  EC52  F004         	call	_TASK_vTask1s	;wreg free
   518   00043E  D7D5               	goto	l1687
   519   000440  FFFF               	dw	65535	; errata NOP
   520   000442                     __end_of_SCHED_vStartScheduler:
   521                           	callstack 0
   522                           
   523 ;; *************** function _TASK_vTaskAppInit *****************
   524 ;; Defined at:
   525 ;;		line 5 in file "tasks.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;		None
   528 ;; Auto vars:     Size  Location     Type
   529 ;;		None
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		wreg, status,2, status,0, cstack
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   543 ;;Total ram usage:        0 bytes
   544 ;; Hardware stack levels used: 1
   545 ;; Hardware stack levels required when called: 3
   546 ;; This function calls:
   547 ;;		_LIGHTS_BlinkersInit
   548 ;; This function is called by:
   549 ;;		_SCHED_vStartScheduler
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           	psect	text2
   554   000890                     __ptext2:
   555                           	callstack 0
   556   000890                     _TASK_vTaskAppInit:
   557                           	callstack 0
   558   000890  FFFF               	dw	65535	; assembler added errata NOP
   559                           
   560                           ;tasks.c: 7: LIGHTS_BlinkersInit();
   561                           
   562                           ;incstack = 0
   563   000892  ECFE  F003         	call	_LIGHTS_BlinkersInit	;wreg free
   564   000896  0012               	return		;funcret
   565   000898  FFFF               	dw	65535	; errata NOP
   566   00089A                     __end_of_TASK_vTaskAppInit:
   567                           	callstack 0
   568                           
   569 ;; *************** function _LIGHTS_BlinkersInit *****************
   570 ;; Defined at:
   571 ;;		line 192 in file "lights.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;		None
   574 ;; Auto vars:     Size  Location     Type
   575 ;;		None
   576 ;; Return value:  Size  Location     Type
   577 ;;                  1    wreg      void 
   578 ;; Registers used:
   579 ;;		wreg, status,2, status,0
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   589 ;;Total ram usage:        0 bytes
   590 ;; Hardware stack levels used: 1
   591 ;; Hardware stack levels required when called: 2
   592 ;; This function calls:
   593 ;;		Nothing
   594 ;; This function is called by:
   595 ;;		_TASK_vTaskAppInit
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text3
   600   0007FC                     __ptext3:
   601                           	callstack 0
   602   0007FC                     _LIGHTS_BlinkersInit:
   603                           	callstack 0
   604   0007FC  FFFF               	dw	65535	; assembler added errata NOP
   605                           
   606                           ;lights.c: 194: blinkerSM._currentState = LIGHTS_BlinkPasiveState;
   607                           
   608                           ;incstack = 0
   609   0007FE  0E1A               	movlw	low _LIGHTS_BlinkPasiveState
   610   000800  6E01               	movwf	_blinkerSM^0,c
   611   000802  0E01               	movlw	high _LIGHTS_BlinkPasiveState
   612   000804  6E02               	movwf	(_blinkerSM+1)^0,c
   613                           
   614                           ;lights.c: 195: blinkerSM._pollEvents = LIGHTS_BlinkEventPoll;
   615   000806  0E60               	movlw	low _LIGHTS_BlinkEventPoll
   616   000808  6E03               	movwf	(_blinkerSM+2)^0,c
   617   00080A  0E07               	movlw	high _LIGHTS_BlinkEventPoll
   618   00080C  6E04               	movwf	(_blinkerSM+3)^0,c
   619                           
   620                           ;lights.c: 196: blinkerSM.avarie = 0;
   621   00080E  0E00               	movlw	0
   622   000810  6E07               	movwf	(_blinkerSM+6)^0,c
   623                           
   624                           ;lights.c: 197: blinkerSM.firstEntry = 1;
   625   000812  0E00               	movlw	0
   626   000814  6E06               	movwf	(_blinkerSM+5)^0,c
   627   000816  0E01               	movlw	1
   628   000818  6E05               	movwf	(_blinkerSM+4)^0,c
   629                           
   630                           ;lights.c: 198: blinkerSM.leftSwitch = 0;
   631   00081A  0E00               	movlw	0
   632   00081C  6E08               	movwf	(_blinkerSM+7)^0,c
   633                           
   634                           ;lights.c: 199: blinkerSM.rightSwitch = 0;
   635   00081E  0E00               	movlw	0
   636   000820  6E09               	movwf	(_blinkerSM+8)^0,c
   637   000822  0012               	return		;funcret
   638   000824  FFFF               	dw	65535	; errata NOP
   639   000826                     __end_of_LIGHTS_BlinkersInit:
   640                           	callstack 0
   641                           
   642 ;; *************** function _TASK_vTask1s *****************
   643 ;; Defined at:
   644 ;;		line 25 in file "tasks.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;		None
   647 ;; Auto vars:     Size  Location     Type
   648 ;;		None
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		None
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   662 ;;Total ram usage:        0 bytes
   663 ;; Hardware stack levels used: 1
   664 ;; Hardware stack levels required when called: 2
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_SCHED_vStartScheduler
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text4
   673   0008A4                     __ptext4:
   674                           	callstack 0
   675   0008A4                     _TASK_vTask1s:
   676                           	callstack 0
   677   0008A4  FFFF               	dw	65535	; assembler added errata NOP
   678                           
   679                           ;incstack = 0
   680   0008A6  0012               	return		;funcret
   681   0008A8  FFFF               	dw	65535	; errata NOP
   682   0008AA                     __end_of_TASK_vTask1s:
   683                           	callstack 0
   684                           
   685 ;; *************** function _TASK_vTask1ms *****************
   686 ;; Defined at:
   687 ;;		line 11 in file "tasks.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;		None
   690 ;; Auto vars:     Size  Location     Type
   691 ;;		None
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   705 ;;Total ram usage:        0 bytes
   706 ;; Hardware stack levels used: 1
   707 ;; Hardware stack levels required when called: 7
   708 ;; This function calls:
   709 ;;		_LIGHTS_BlinkersRun
   710 ;; This function is called by:
   711 ;;		_SCHED_vStartScheduler
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           	psect	text5
   716   00089A                     __ptext5:
   717                           	callstack 0
   718   00089A                     _TASK_vTask1ms:
   719                           	callstack 0
   720   00089A  FFFF               	dw	65535	; assembler added errata NOP
   721                           
   722                           ;tasks.c: 13: LIGHTS_BlinkersRun();
   723                           
   724                           ;incstack = 0
   725   00089C  EC83  F002         	call	_LIGHTS_BlinkersRun	;wreg free
   726   0008A0  0012               	return		;funcret
   727   0008A2  FFFF               	dw	65535	; errata NOP
   728   0008A4                     __end_of_TASK_vTask1ms:
   729                           	callstack 0
   730                           
   731 ;; *************** function _LIGHTS_BlinkersRun *****************
   732 ;; Defined at:
   733 ;;		line 201 in file "lights.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;		None
   736 ;; Auto vars:     Size  Location     Type
   737 ;;		None
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   751 ;;Total ram usage:        0 bytes
   752 ;; Hardware stack levels used: 1
   753 ;; Hardware stack levels required when called: 6
   754 ;; This function calls:
   755 ;;		_LIGHTS_BlinkEventPoll
   756 ;;		_LIGHTS_BlinkPasiveState
   757 ;;		_LIGHTS_BlinkSwitchOffState
   758 ;;		_LIGHTS_BlinkSwitchOnState
   759 ;; This function is called by:
   760 ;;		_TASK_vTask1ms
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           	psect	text6
   765   000506                     __ptext6:
   766                           	callstack 0
   767   000506                     _LIGHTS_BlinkersRun:
   768                           	callstack 0
   769   000506  FFFF               	dw	65535	; assembler added errata NOP
   770                           
   771                           ;lights.c: 203: if(0 != blinkerSM._currentState)
   772                           
   773                           ;incstack = 0
   774   000508  5001               	movf	_blinkerSM^0,w,c
   775   00050A  1002               	iorwf	(_blinkerSM+1)^0,w,c
   776   00050C  B4D8               	btfsc	status,2,c
   777   00050E  D00E               	goto	u1059
   778                           
   779                           ;lights.c: 204: {;lights.c: 205: (*blinkerSM._currentState)();
   780   000510  D801               	call	u1058
   781   000512  D00C               	goto	u1059
   782   000514                     u1058:
   783   000514  FFFF               	dw	65535	; assembler added errata NOP
   784   000516  0005               	push	
   785   000518  6EFA               	movwf	pclath,c
   786   00051A  5001               	movf	_blinkerSM^0,w,c
   787   00051C  6EFD               	movwf	tosl,c
   788   00051E  5002               	movf	(_blinkerSM+1)^0,w,c
   789   000520  6EFE               	movwf	tosh,c
   790   000522  50F8               	movf	tblptru,w,c
   791   000524  6EFF               	movwf	tosu,c
   792   000526  50FA               	movf	pclath,w,c
   793   000528  0012               	return		;indir
   794   00052A  FFFF               	dw	65535	; errata NOP
   795   00052C                     u1059:
   796   00052C  FFFF               	dw	65535	; assembler added errata NOP
   797                           
   798                           ;lights.c: 206: };lights.c: 207: if(0 != blinkerSM._pollEvents)
   799   00052E  5003               	movf	(_blinkerSM+2)^0,w,c
   800   000530  1004               	iorwf	(_blinkerSM+3)^0,w,c
   801   000532  B4D8               	btfsc	status,2,c
   802   000534  D010               	goto	u1079
   803                           
   804                           ;lights.c: 208: {;lights.c: 209: (*blinkerSM._pollEvents)();
   805   000536  EE20  F003         	lfsr	2,_blinkerSM+2
   806   00053A  D801               	call	u1078
   807   00053C  D00C               	goto	u1079
   808   00053E                     u1078:
   809   00053E  FFFF               	dw	65535	; assembler added errata NOP
   810   000540  0005               	push	
   811   000542  6EFA               	movwf	pclath,c
   812   000544  50DE               	movf	postinc2,w,c
   813   000546  6EFD               	movwf	tosl,c
   814   000548  50DE               	movf	postinc2,w,c
   815   00054A  6EFE               	movwf	tosh,c
   816   00054C  50F8               	movf	tblptru,w,c
   817   00054E  6EFF               	movwf	tosu,c
   818   000550  50FA               	movf	pclath,w,c
   819   000552  0012               	return		;indir
   820   000554  FFFF               	dw	65535	; errata NOP
   821   000556                     u1079:
   822   000556  FFFF               	dw	65535	; assembler added errata NOP
   823   000558  0012               	return		;funcret
   824   00055A  FFFF               	dw	65535	; errata NOP
   825   00055C                     __end_of_LIGHTS_BlinkersRun:
   826                           	callstack 0
   827                           
   828 ;; *************** function _LIGHTS_BlinkPasiveState *****************
   829 ;; Defined at:
   830 ;;		line 59 in file "lights.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   848 ;;Total ram usage:        0 bytes
   849 ;; Hardware stack levels used: 1
   850 ;; Hardware stack levels required when called: 5
   851 ;; This function calls:
   852 ;;		_LIGHTS_setAllHazardLights
   853 ;;		_LIGHTS_toggleAllHazardLights
   854 ;; This function is called by:
   855 ;;		_LIGHTS_BlinkSwitchOnState
   856 ;;		_LIGHTS_BlinkSwitchOffState
   857 ;;		_LIGHTS_BlinkersInit
   858 ;;		_LIGHTS_BlinkersRun
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           	psect	text7
   863   00011A                     __ptext7:
   864                           	callstack 0
   865   00011A                     _LIGHTS_BlinkPasiveState:
   866                           	callstack 0
   867   00011A  FFFF               	dw	65535	; assembler added errata NOP
   868                           
   869                           ;lights.c: 61: static T_U16 counter = 0;;lights.c: 62: static T_U8 firstEntry = 1;;light
      +                          s.c: 63: static T_U8 toggleLights = 0;;lights.c: 66: if(blinkerSM.firstEntry == 1)
   870                           
   871                           ;incstack = 0
   872   00011C  0405               	decf	(_blinkerSM+4)^0,w,c
   873   00011E  1006               	iorwf	(_blinkerSM+5)^0,w,c
   874   000120  A4D8               	btfss	status,2,c
   875   000122  D007               	goto	l1547
   876                           
   877                           ;lights.c: 67: {;lights.c: 68: LIGHTS_setAllHazardLights(0);
   878   000124  0E00               	movlw	0
   879   000126  EC2C  F003         	call	_LIGHTS_setAllHazardLights
   880                           
   881                           ;lights.c: 69: blinkerSM.firstEntry = 0;
   882   00012A  0E00               	movlw	0
   883   00012C  6E06               	movwf	(_blinkerSM+5)^0,c
   884   00012E  0E00               	movlw	0
   885   000130  6E05               	movwf	(_blinkerSM+4)^0,c
   886   000132                     l1547:
   887   000132  FFFF               	dw	65535	; assembler added errata NOP
   888                           
   889                           ;lights.c: 70: };lights.c: 73: if(1 == blinkerSM.avarie)
   890   000134  0407               	decf	(_blinkerSM+6)^0,w,c
   891   000136  A4D8               	btfss	status,2,c
   892   000138  D01E               	goto	l1563
   893                           
   894                           ;lights.c: 74: {;lights.c: 75: if(1 == firstEntry)
   895   00013A  043B               	decf	LIGHTS_BlinkPasiveState@firstEntry^0,w,c
   896   00013C  A4D8               	btfss	status,2,c
   897   00013E  D005               	goto	l1555
   898                           
   899                           ;lights.c: 76: {;lights.c: 77: LIGHTS_setAllHazardLights(1);
   900   000140  0E01               	movlw	1
   901   000142  EC2C  F003         	call	_LIGHTS_setAllHazardLights
   902                           
   903                           ;lights.c: 78: firstEntry = 0;
   904   000146  0E00               	movlw	0
   905   000148  6E3B               	movwf	LIGHTS_BlinkPasiveState@firstEntry^0,c
   906   00014A                     l1555:
   907   00014A  FFFF               	dw	65535	; assembler added errata NOP
   908                           
   909                           ;lights.c: 79: };lights.c: 80: if(500 == counter)
   910   00014C  0EF4               	movlw	244
   911   00014E  181C               	xorwf	LIGHTS_BlinkPasiveState@counter^0,w,c
   912   000150  E10E               	bnz	l1561
   913   000152  041D               	decf	(LIGHTS_BlinkPasiveState@counter+1)^0,w,c
   914   000154  A4D8               	btfss	status,2,c
   915   000156  D00B               	goto	l1561
   916                           
   917                           ;lights.c: 81: {;lights.c: 82: LIGHTS_toggleAllHazardLights(&toggleLights);
   918   000158  0E22               	movlw	low LIGHTS_BlinkPasiveState@toggleLights
   919   00015A  6E37               	movwf	LIGHTS_toggleAllHazardLights@toggle^0,c
   920   00015C  0E00               	movlw	high LIGHTS_BlinkPasiveState@toggleLights
   921   00015E  6E38               	movwf	(LIGHTS_toggleAllHazardLights@toggle+1)^0,c
   922   000160  ECA8  F001         	call	_LIGHTS_toggleAllHazardLights	;wreg free
   923                           
   924                           ;lights.c: 83: counter = 0;
   925   000164  0E00               	movlw	0
   926   000166  6E1D               	movwf	(LIGHTS_BlinkPasiveState@counter+1)^0,c
   927   000168  0E00               	movlw	0
   928   00016A  6E1C               	movwf	LIGHTS_BlinkPasiveState@counter^0,c
   929                           
   930                           ;lights.c: 84: }
   931   00016C  D010               	goto	l1571
   932   00016E                     l1561:
   933   00016E  FFFF               	dw	65535	; assembler added errata NOP
   934                           
   935                           ;lights.c: 85: else;lights.c: 86: {;lights.c: 87: counter++;
   936   000170  4A1C               	infsnz	LIGHTS_BlinkPasiveState@counter^0,f,c
   937   000172  2A1D               	incf	(LIGHTS_BlinkPasiveState@counter+1)^0,f,c
   938   000174  D00C               	goto	l1571
   939   000176                     l1563:
   940   000176  FFFF               	dw	65535	; assembler added errata NOP
   941                           
   942                           ;lights.c: 90: else;lights.c: 91: {;lights.c: 92: LIGHTS_setAllHazardLights(0);
   943   000178  0E00               	movlw	0
   944   00017A  EC2C  F003         	call	_LIGHTS_setAllHazardLights
   945                           
   946                           ;lights.c: 93: counter = 0;
   947   00017E  0E00               	movlw	0
   948   000180  6E1D               	movwf	(LIGHTS_BlinkPasiveState@counter+1)^0,c
   949   000182  0E00               	movlw	0
   950   000184  6E1C               	movwf	LIGHTS_BlinkPasiveState@counter^0,c
   951                           
   952                           ;lights.c: 94: firstEntry = 1;
   953   000186  0E01               	movlw	1
   954   000188  6E3B               	movwf	LIGHTS_BlinkPasiveState@firstEntry^0,c
   955                           
   956                           ;lights.c: 95: toggleLights = 0;
   957   00018A  0E00               	movlw	0
   958   00018C  6E22               	movwf	LIGHTS_BlinkPasiveState@toggleLights^0,c
   959   00018E                     l1571:
   960   00018E  FFFF               	dw	65535	; assembler added errata NOP
   961                           
   962                           ;lights.c: 96: };lights.c: 99: if( ((1 == blinkerSM.leftSwitch) || (1 == blinkerSM.right
      +                          Switch)) && 0 == blinkerSM.avarie )
   963   000190  0408               	decf	(_blinkerSM+7)^0,w,c
   964   000192  B4D8               	btfsc	status,2,c
   965   000194  D003               	goto	u910
   966   000196  0409               	decf	(_blinkerSM+8)^0,w,c
   967   000198  A4D8               	btfss	status,2,c
   968   00019A  D015               	goto	l44
   969   00019C                     u910:
   970   00019C  FFFF               	dw	65535	; assembler added errata NOP
   971   00019E  5007               	movf	(_blinkerSM+6)^0,w,c
   972   0001A0  A4D8               	btfss	status,2,c
   973   0001A2  D011               	goto	l44
   974                           
   975                           ;lights.c: 100: {;lights.c: 101: blinkerSM._currentState = LIGHTS_BlinkSwitchOnState;
   976   0001A4  0E50               	movlw	low _LIGHTS_BlinkSwitchOnState
   977   0001A6  6E01               	movwf	_blinkerSM^0,c
   978   0001A8  0E00               	movlw	high _LIGHTS_BlinkSwitchOnState
   979   0001AA  6E02               	movwf	(_blinkerSM+1)^0,c
   980                           
   981                           ;lights.c: 102: blinkerSM.firstEntry = 1;
   982   0001AC  0E00               	movlw	0
   983   0001AE  6E06               	movwf	(_blinkerSM+5)^0,c
   984   0001B0  0E01               	movlw	1
   985   0001B2  6E05               	movwf	(_blinkerSM+4)^0,c
   986                           
   987                           ;lights.c: 103: counter = 0;
   988   0001B4  0E00               	movlw	0
   989   0001B6  6E1D               	movwf	(LIGHTS_BlinkPasiveState@counter+1)^0,c
   990   0001B8  0E00               	movlw	0
   991   0001BA  6E1C               	movwf	LIGHTS_BlinkPasiveState@counter^0,c
   992                           
   993                           ;lights.c: 104: toggleLights = 0;
   994   0001BC  0E00               	movlw	0
   995   0001BE  6E22               	movwf	LIGHTS_BlinkPasiveState@toggleLights^0,c
   996                           
   997                           ;lights.c: 105: LIGHTS_setAllHazardLights(0);
   998   0001C0  0E00               	movlw	0
   999   0001C2  EC2C  F003         	call	_LIGHTS_setAllHazardLights
  1000   0001C6                     l44:
  1001   0001C6  FFFF               	dw	65535	; assembler added errata NOP
  1002   0001C8  0012               	return		;funcret
  1003   0001CA  FFFF               	dw	65535	; errata NOP
  1004   0001CC                     __end_of_LIGHTS_BlinkPasiveState:
  1005                           	callstack 0
  1006                           
  1007 ;; *************** function _LIGHTS_BlinkSwitchOffState *****************
  1008 ;; Defined at:
  1009 ;;		line 162 in file "lights.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;		None
  1012 ;; Auto vars:     Size  Location     Type
  1013 ;;		None
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  1    wreg      void 
  1016 ;; Registers used:
  1017 ;;		wreg, status,2, status,0, cstack
  1018 ;; Tracked objects:
  1019 ;;		On entry : 0/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1027 ;;Total ram usage:        0 bytes
  1028 ;; Hardware stack levels used: 1
  1029 ;; Hardware stack levels required when called: 5
  1030 ;; This function calls:
  1031 ;;		_LIGHTS_setAllHazardLights
  1032 ;; This function is called by:
  1033 ;;		_LIGHTS_BlinkSwitchOnState
  1034 ;;		_LIGHTS_BlinkersRun
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text8
  1039   000606                     __ptext8:
  1040                           	callstack 0
  1041   000606                     _LIGHTS_BlinkSwitchOffState:
  1042                           	callstack 0
  1043   000606  FFFF               	dw	65535	; assembler added errata NOP
  1044                           
  1045                           ;lights.c: 165: if(blinkerSM.firstEntry == 1)
  1046                           
  1047                           ;incstack = 0
  1048   000608  0405               	decf	(_blinkerSM+4)^0,w,c
  1049   00060A  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1050   00060C  A4D8               	btfss	status,2,c
  1051   00060E  D007               	goto	l1645
  1052                           
  1053                           ;lights.c: 166: {;lights.c: 167: blinkerSM.firstEntry = 0;
  1054   000610  0E00               	movlw	0
  1055   000612  6E06               	movwf	(_blinkerSM+5)^0,c
  1056   000614  0E00               	movlw	0
  1057   000616  6E05               	movwf	(_blinkerSM+4)^0,c
  1058                           
  1059                           ;lights.c: 168: LIGHTS_setAllHazardLights(0);
  1060   000618  0E00               	movlw	0
  1061   00061A  EC2C  F003         	call	_LIGHTS_setAllHazardLights
  1062   00061E                     l1645:
  1063   00061E  FFFF               	dw	65535	; assembler added errata NOP
  1064                           
  1065                           ;lights.c: 169: };lights.c: 174: if( 1 == blinkerSM.avarie )
  1066   000620  0407               	decf	(_blinkerSM+6)^0,w,c
  1067   000622  A4D8               	btfss	status,2,c
  1068   000624  D00A               	goto	l1651
  1069                           
  1070                           ;lights.c: 175: {;lights.c: 176: blinkerSM._currentState = LIGHTS_BlinkPasiveState;
  1071   000626  0E1A               	movlw	low _LIGHTS_BlinkPasiveState
  1072   000628  6E01               	movwf	_blinkerSM^0,c
  1073   00062A  0E01               	movlw	high _LIGHTS_BlinkPasiveState
  1074   00062C  FFFF               	dw	65535	; assembler added errata NOP
  1075   00062E  6E02               	movwf	(_blinkerSM+1)^0,c
  1076                           
  1077                           ;lights.c: 177: blinkerSM.firstEntry = 1;
  1078   000630  0E00               	movlw	0
  1079   000632  6E06               	movwf	(_blinkerSM+5)^0,c
  1080   000634  0E01               	movlw	1
  1081   000636  6E05               	movwf	(_blinkerSM+4)^0,c
  1082                           
  1083                           ;lights.c: 178: } else if( (1 == blinkerSM.leftSwitch) || (1 == blinkerSM.rightSwitch) )
  1084   000638  D00C               	goto	l71
  1085   00063A                     l1651:
  1086   00063A  FFFF               	dw	65535	; assembler added errata NOP
  1087   00063C  0408               	decf	(_blinkerSM+7)^0,w,c
  1088   00063E  B4D8               	btfsc	status,2,c
  1089   000640  D003               	goto	u1030
  1090   000642  0409               	decf	(_blinkerSM+8)^0,w,c
  1091   000644  A4D8               	btfss	status,2,c
  1092   000646  D005               	goto	l71
  1093   000648                     u1030:
  1094   000648  FFFF               	dw	65535	; assembler added errata NOP
  1095                           
  1096                           ;lights.c: 179: {;lights.c: 180: blinkerSM._currentState = LIGHTS_BlinkSwitchOnState;
  1097   00064A  0E50               	movlw	low _LIGHTS_BlinkSwitchOnState
  1098   00064C  6E01               	movwf	_blinkerSM^0,c
  1099   00064E  0E00               	movlw	high _LIGHTS_BlinkSwitchOnState
  1100   000650  D7ED               	goto	L1
  1101   000652                     l71:
  1102   000652  FFFF               	dw	65535	; assembler added errata NOP
  1103   000654  0012               	return		;funcret
  1104   000656  FFFF               	dw	65535	; errata NOP
  1105   000658                     __end_of_LIGHTS_BlinkSwitchOffState:
  1106                           	callstack 0
  1107                           
  1108 ;; *************** function _LIGHTS_BlinkSwitchOnState *****************
  1109 ;; Defined at:
  1110 ;;		line 110 in file "lights.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;		None
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;		None
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1128 ;;Total ram usage:        0 bytes
  1129 ;; Hardware stack levels used: 1
  1130 ;; Hardware stack levels required when called: 5
  1131 ;; This function calls:
  1132 ;;		_LIGHTS_setAllHazardLights
  1133 ;;		_LIGHTS_setSideHazardLights
  1134 ;;		_LIGHTS_toggleSideHazardLights
  1135 ;; This function is called by:
  1136 ;;		_LIGHTS_BlinkPasiveState
  1137 ;;		_LIGHTS_BlinkSwitchOffState
  1138 ;;		_LIGHTS_BlinkersRun
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text9
  1143   000050                     __ptext9:
  1144                           	callstack 0
  1145   000050                     _LIGHTS_BlinkSwitchOnState:
  1146                           	callstack 0
  1147   000050  FFFF               	dw	65535	; assembler added errata NOP
  1148                           
  1149                           ;lights.c: 112: static T_U8 side = 0;;lights.c: 113: static T_U16 counter = 0;;lights.c:
      +                           114: static T_U8 firstEntry = 1;;lights.c: 115: static T_U8 toggleLights = 0;;lights.c:
      +                           118: if(blinkerSM.firstEntry == 1)
  1150                           
  1151                           ;incstack = 0
  1152   000052  0405               	decf	(_blinkerSM+4)^0,w,c
  1153   000054  1006               	iorwf	(_blinkerSM+5)^0,w,c
  1154   000056  A4D8               	btfss	status,2,c
  1155   000058  D006               	goto	l1593
  1156                           
  1157                           ;lights.c: 119: {;lights.c: 121: side = blinkerSM.rightSwitch;
  1158   00005A  C009  F020         	movff	_blinkerSM+8,LIGHTS_BlinkSwitchOnState@side
  1159                           
  1160                           ;lights.c: 122: blinkerSM.firstEntry = 0;
  1161   00005E  0E00               	movlw	0
  1162   000060  6E06               	movwf	(_blinkerSM+5)^0,c
  1163   000062  0E00               	movlw	0
  1164   000064  6E05               	movwf	(_blinkerSM+4)^0,c
  1165   000066                     l1593:
  1166   000066  FFFF               	dw	65535	; assembler added errata NOP
  1167                           
  1168                           ;lights.c: 123: };lights.c: 126: if(1 == firstEntry)
  1169   000068  043A               	decf	LIGHTS_BlinkSwitchOnState@firstEntry^0,w,c
  1170   00006A  A4D8               	btfss	status,2,c
  1171   00006C  D007               	goto	l1599
  1172                           
  1173                           ;lights.c: 127: {;lights.c: 128: LIGHTS_setSideHazardLights(1, side);
  1174   00006E  C020  F037         	movff	LIGHTS_BlinkSwitchOnState@side,LIGHTS_setSideHazardLights@side
  1175   000072  0E01               	movlw	1
  1176   000074  ECD9  F002         	call	_LIGHTS_setSideHazardLights
  1177                           
  1178                           ;lights.c: 129: firstEntry = 0;
  1179   000078  0E00               	movlw	0
  1180   00007A  6E3A               	movwf	LIGHTS_BlinkSwitchOnState@firstEntry^0,c
  1181   00007C                     l1599:
  1182   00007C  FFFF               	dw	65535	; assembler added errata NOP
  1183                           
  1184                           ;lights.c: 130: };lights.c: 131: if(500 == counter)
  1185   00007E  0EF4               	movlw	244
  1186   000080  181A               	xorwf	LIGHTS_BlinkSwitchOnState@counter^0,w,c
  1187   000082  E110               	bnz	l1605
  1188   000084  041B               	decf	(LIGHTS_BlinkSwitchOnState@counter+1)^0,w,c
  1189   000086  A4D8               	btfss	status,2,c
  1190   000088  D00D               	goto	l1605
  1191                           
  1192                           ;lights.c: 132: {;lights.c: 133: LIGHTS_toggleSideHazardLights(&toggleLights, side);
  1193   00008A  0E21               	movlw	low LIGHTS_BlinkSwitchOnState@toggleLights
  1194   00008C  6E37               	movwf	LIGHTS_toggleSideHazardLights@toggle^0,c
  1195   00008E  0E00               	movlw	high LIGHTS_BlinkSwitchOnState@toggleLights
  1196   000090  6E38               	movwf	(LIGHTS_toggleSideHazardLights@toggle+1)^0,c
  1197   000092  C020  F039         	movff	LIGHTS_BlinkSwitchOnState@side,LIGHTS_toggleSideHazardLights@side
  1198   000096  ECE6  F000         	call	_LIGHTS_toggleSideHazardLights	;wreg free
  1199                           
  1200                           ;lights.c: 134: counter = 0;
  1201   00009A  0E00               	movlw	0
  1202   00009C  6E1B               	movwf	(LIGHTS_BlinkSwitchOnState@counter+1)^0,c
  1203   00009E  0E00               	movlw	0
  1204   0000A0  6E1A               	movwf	LIGHTS_BlinkSwitchOnState@counter^0,c
  1205                           
  1206                           ;lights.c: 135: }
  1207   0000A2  D003               	goto	l1607
  1208   0000A4                     l1605:
  1209   0000A4  FFFF               	dw	65535	; assembler added errata NOP
  1210                           
  1211                           ;lights.c: 136: else;lights.c: 137: {;lights.c: 138: counter++;
  1212   0000A6  4A1A               	infsnz	LIGHTS_BlinkSwitchOnState@counter^0,f,c
  1213   0000A8  2A1B               	incf	(LIGHTS_BlinkSwitchOnState@counter+1)^0,f,c
  1214   0000AA                     l1607:
  1215   0000AA  FFFF               	dw	65535	; assembler added errata NOP
  1216                           
  1217                           ;lights.c: 139: };lights.c: 142: if( 1 == blinkerSM.avarie )
  1218   0000AC  0407               	decf	(_blinkerSM+6)^0,w,c
  1219   0000AE  A4D8               	btfss	status,2,c
  1220   0000B0  D014               	goto	l1621
  1221                           
  1222                           ;lights.c: 143: {;lights.c: 144: blinkerSM._currentState = LIGHTS_BlinkPasiveState;
  1223   0000B2  0E1A               	movlw	low _LIGHTS_BlinkPasiveState
  1224   0000B4  6E01               	movwf	_blinkerSM^0,c
  1225   0000B6  0E01               	movlw	high _LIGHTS_BlinkPasiveState
  1226   0000B8  6E02               	movwf	(_blinkerSM+1)^0,c
  1227                           
  1228                           ;lights.c: 145: blinkerSM.firstEntry = 1;
  1229   0000BA  0E00               	movlw	0
  1230   0000BC  6E06               	movwf	(_blinkerSM+5)^0,c
  1231   0000BE  0E01               	movlw	1
  1232   0000C0  6E05               	movwf	(_blinkerSM+4)^0,c
  1233                           
  1234                           ;lights.c: 146: counter = 0;
  1235   0000C2  0E00               	movlw	0
  1236   0000C4  6E1B               	movwf	(LIGHTS_BlinkSwitchOnState@counter+1)^0,c
  1237   0000C6  0E00               	movlw	0
  1238   0000C8  6E1A               	movwf	LIGHTS_BlinkSwitchOnState@counter^0,c
  1239                           
  1240                           ;lights.c: 147: toggleLights = 0;
  1241   0000CA  0E00               	movlw	0
  1242   0000CC  6E21               	movwf	LIGHTS_BlinkSwitchOnState@toggleLights^0,c
  1243                           
  1244                           ;lights.c: 148: firstEntry = 1;
  1245   0000CE  0E01               	movlw	1
  1246   0000D0  6E3A               	movwf	LIGHTS_BlinkSwitchOnState@firstEntry^0,c
  1247                           
  1248                           ;lights.c: 149: LIGHTS_setAllHazardLights(0);
  1249   0000D2  0E00               	movlw	0
  1250   0000D4  EC2C  F003         	call	_LIGHTS_setAllHazardLights
  1251                           
  1252                           ;lights.c: 150: }else if( (0 == blinkerSM.avarie) && (0 == blinkerSM.leftSwitch) && (0 =
      +                          = blinkerSM.rightSwitch) )
  1253   0000D8  D01D               	goto	l62
  1254   0000DA                     l1621:
  1255   0000DA  FFFF               	dw	65535	; assembler added errata NOP
  1256   0000DC  5007               	movf	(_blinkerSM+6)^0,w,c
  1257   0000DE  A4D8               	btfss	status,2,c
  1258   0000E0  D019               	goto	l62
  1259   0000E2  5008               	movf	(_blinkerSM+7)^0,w,c
  1260   0000E4  A4D8               	btfss	status,2,c
  1261   0000E6  D016               	goto	l62
  1262   0000E8  5009               	movf	(_blinkerSM+8)^0,w,c
  1263   0000EA  A4D8               	btfss	status,2,c
  1264   0000EC  D013               	goto	l62
  1265                           
  1266                           ;lights.c: 151: {;lights.c: 152: blinkerSM._currentState = LIGHTS_BlinkSwitchOffState;
  1267   0000EE  0E06               	movlw	low _LIGHTS_BlinkSwitchOffState
  1268   0000F0  6E01               	movwf	_blinkerSM^0,c
  1269   0000F2  0E06               	movlw	high _LIGHTS_BlinkSwitchOffState
  1270   0000F4  6E02               	movwf	(_blinkerSM+1)^0,c
  1271                           
  1272                           ;lights.c: 153: blinkerSM.firstEntry = 1;
  1273   0000F6  0E00               	movlw	0
  1274   0000F8  6E06               	movwf	(_blinkerSM+5)^0,c
  1275   0000FA  0E01               	movlw	1
  1276   0000FC  6E05               	movwf	(_blinkerSM+4)^0,c
  1277                           
  1278                           ;lights.c: 154: counter = 0;
  1279   0000FE  0E00               	movlw	0
  1280   000100  6E1B               	movwf	(LIGHTS_BlinkSwitchOnState@counter+1)^0,c
  1281   000102  0E00               	movlw	0
  1282   000104  6E1A               	movwf	LIGHTS_BlinkSwitchOnState@counter^0,c
  1283                           
  1284                           ;lights.c: 155: toggleLights = 0;
  1285   000106  0E00               	movlw	0
  1286   000108  6E21               	movwf	LIGHTS_BlinkSwitchOnState@toggleLights^0,c
  1287                           
  1288                           ;lights.c: 156: firstEntry = 1;
  1289   00010A  0E01               	movlw	1
  1290   00010C  6E3A               	movwf	LIGHTS_BlinkSwitchOnState@firstEntry^0,c
  1291                           
  1292                           ;lights.c: 157: LIGHTS_setAllHazardLights(0);
  1293   00010E  0E00               	movlw	0
  1294   000110  EC2C  F003         	call	_LIGHTS_setAllHazardLights
  1295   000114                     l62:
  1296   000114  FFFF               	dw	65535	; assembler added errata NOP
  1297   000116  0012               	return		;funcret
  1298   000118  FFFF               	dw	65535	; errata NOP
  1299   00011A                     __end_of_LIGHTS_BlinkSwitchOnState:
  1300                           	callstack 0
  1301                           
  1302 ;; *************** function _LIGHTS_toggleSideHazardLights *****************
  1303 ;; Defined at:
  1304 ;;		line 20 in file "lights.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  toggle          2   20[COMRAM] PTR unsigned char 
  1307 ;;		 -> LIGHTS_BlinkSwitchOnState@toggleLights(1), 
  1308 ;;  side            1   22[COMRAM] unsigned char 
  1309 ;; Auto vars:     Size  Location     Type
  1310 ;;		None
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  1    wreg      void 
  1313 ;; Registers used:
  1314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1320 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1323 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1324 ;;Total ram usage:        3 bytes
  1325 ;; Hardware stack levels used: 1
  1326 ;; Hardware stack levels required when called: 4
  1327 ;; This function calls:
  1328 ;;		_IOC_vSetOutputPort
  1329 ;; This function is called by:
  1330 ;;		_LIGHTS_BlinkSwitchOnState
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           	psect	text10
  1335   0001CC                     __ptext10:
  1336                           	callstack 0
  1337   0001CC                     _LIGHTS_toggleSideHazardLights:
  1338                           	callstack 0
  1339   0001CC  FFFF               	dw	65535	; assembler added errata NOP
  1340                           
  1341                           ;lights.c: 22: if(0 == side)
  1342                           
  1343                           ;incstack = 0
  1344   0001CE  5039               	movf	LIGHTS_toggleSideHazardLights@side^0,w,c
  1345   0001D0  A4D8               	btfss	status,2,c
  1346   0001D2  D019               	goto	l1513
  1347                           
  1348                           ;lights.c: 23: {;lights.c: 24: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1349   0001D4  0E01               	movlw	1
  1350   0001D6  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1351   0001D8  0E03               	movlw	3
  1352   0001DA  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1353   0001DC  C037  FFD9         	movff	LIGHTS_toggleSideHazardLights@toggle,fsr2l
  1354   0001E0  C038  FFDA         	movff	LIGHTS_toggleSideHazardLights@toggle+1,fsr2h
  1355   0001E4  50DF               	movf	indf2,w,c
  1356   0001E6  6E34               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1357   0001E8  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1358                           
  1359                           ;lights.c: 25: IOC_vSetOutputPort(IOC_SSS, *toggle);
  1360   0001EC  0E01               	movlw	1
  1361   0001EE  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1362   0001F0  0E07               	movlw	7
  1363   0001F2  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1364   0001F4  C037  FFD9         	movff	LIGHTS_toggleSideHazardLights@toggle,fsr2l
  1365   0001F8  C038  FFDA         	movff	LIGHTS_toggleSideHazardLights@toggle+1,fsr2h
  1366   0001FC  50DF               	movf	indf2,w,c
  1367   0001FE  6E34               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1368   000200  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1369                           
  1370                           ;lights.c: 26: }
  1371   000204  D019               	goto	l1515
  1372   000206                     l1513:
  1373   000206  FFFF               	dw	65535	; assembler added errata NOP
  1374                           
  1375                           ;lights.c: 27: else;lights.c: 28: {;lights.c: 29: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1376   000208  0E01               	movlw	1
  1377   00020A  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1378   00020C  0E00               	movlw	0
  1379   00020E  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1380   000210  C037  FFD9         	movff	LIGHTS_toggleSideHazardLights@toggle,fsr2l
  1381   000214  C038  FFDA         	movff	LIGHTS_toggleSideHazardLights@toggle+1,fsr2h
  1382   000218  50DF               	movf	indf2,w,c
  1383   00021A  6E34               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1384   00021C  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1385                           
  1386                           ;lights.c: 30: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1387   000220  0E01               	movlw	1
  1388   000222  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1389   000224  0E04               	movlw	4
  1390   000226  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1391   000228  C037  FFD9         	movff	LIGHTS_toggleSideHazardLights@toggle,fsr2l
  1392   00022C  C038  FFDA         	movff	LIGHTS_toggleSideHazardLights@toggle+1,fsr2h
  1393   000230  50DF               	movf	indf2,w,c
  1394   000232  6E34               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1395   000234  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1396   000238                     l1515:
  1397   000238  FFFF               	dw	65535	; assembler added errata NOP
  1398                           
  1399                           ;lights.c: 31: };lights.c: 32: *toggle = *toggle ^ 1;
  1400   00023A  C037  FFD9         	movff	LIGHTS_toggleSideHazardLights@toggle,fsr2l
  1401   00023E  C038  FFDA         	movff	LIGHTS_toggleSideHazardLights@toggle+1,fsr2h
  1402   000242  50DF               	movf	indf2,w,c
  1403   000244  0A01               	xorlw	1
  1404   000246  C037  FFD9         	movff	LIGHTS_toggleSideHazardLights@toggle,fsr2l
  1405   00024A  C038  FFDA         	movff	LIGHTS_toggleSideHazardLights@toggle+1,fsr2h
  1406   00024E  6EDF               	movwf	indf2,c
  1407   000250  0012               	return		;funcret
  1408   000252  FFFF               	dw	65535	; errata NOP
  1409   000254                     __end_of_LIGHTS_toggleSideHazardLights:
  1410                           	callstack 0
  1411                           
  1412 ;; *************** function _LIGHTS_setSideHazardLights *****************
  1413 ;; Defined at:
  1414 ;;		line 43 in file "lights.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  value           1    wreg     unsigned char 
  1417 ;;  side            1   20[COMRAM] unsigned char 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  value           1   21[COMRAM] unsigned char 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      void 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1429 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1432 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1433 ;;Total ram usage:        2 bytes
  1434 ;; Hardware stack levels used: 1
  1435 ;; Hardware stack levels required when called: 4
  1436 ;; This function calls:
  1437 ;;		_IOC_vSetOutputPort
  1438 ;; This function is called by:
  1439 ;;		_LIGHTS_BlinkSwitchOnState
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text11
  1444   0005B2                     __ptext11:
  1445                           	callstack 0
  1446   0005B2                     _LIGHTS_setSideHazardLights:
  1447                           	callstack 0
  1448   0005B2  FFFF               	dw	65535	; assembler added errata NOP
  1449                           
  1450                           ;incstack = 0
  1451                           ;LIGHTS_setSideHazardLights@value stored from wreg
  1452   0005B4  6E38               	movwf	LIGHTS_setSideHazardLights@value^0,c
  1453                           
  1454                           ;lights.c: 45: if(0 == side)
  1455   0005B6  5037               	movf	LIGHTS_setSideHazardLights@side^0,w,c
  1456   0005B8  A4D8               	btfss	status,2,c
  1457   0005BA  D011               	goto	l1523
  1458                           
  1459                           ;lights.c: 46: {;lights.c: 47: IOC_vSetOutputPort(IOC_SFS, value);
  1460   0005BC  0E01               	movlw	1
  1461   0005BE  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1462   0005C0  0E03               	movlw	3
  1463   0005C2  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1464   0005C4  C038  F034         	movff	LIGHTS_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1465   0005C8  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1466                           
  1467                           ;lights.c: 48: IOC_vSetOutputPort(IOC_SSS, value);
  1468   0005CC  0E01               	movlw	1
  1469   0005CE  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1470   0005D0  0E07               	movlw	7
  1471   0005D2  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1472   0005D4  C038  F034         	movff	LIGHTS_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1473   0005D8  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1474                           
  1475                           ;lights.c: 49: }
  1476   0005DC  D011               	goto	l26
  1477   0005DE                     l1523:
  1478   0005DE  FFFF               	dw	65535	; assembler added errata NOP
  1479                           
  1480                           ;lights.c: 50: else;lights.c: 51: {;lights.c: 52: IOC_vSetOutputPort(IOC_SFD, value);
  1481   0005E0  0E01               	movlw	1
  1482   0005E2  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1483   0005E4  0E00               	movlw	0
  1484   0005E6  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1485   0005E8  C038  F034         	movff	LIGHTS_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1486   0005EC  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1487                           
  1488                           ;lights.c: 53: IOC_vSetOutputPort(IOC_SSD, value);
  1489   0005F0  0E01               	movlw	1
  1490   0005F2  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1491   0005F4  0E04               	movlw	4
  1492   0005F6  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1493   0005F8  C038  F034         	movff	LIGHTS_setSideHazardLights@value,IOC_vSetOutputPort@u8Value
  1494   0005FC  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1495   000600                     l26:
  1496   000600  FFFF               	dw	65535	; assembler added errata NOP
  1497   000602  0012               	return		;funcret
  1498   000604  FFFF               	dw	65535	; errata NOP
  1499   000606                     __end_of_LIGHTS_setSideHazardLights:
  1500                           	callstack 0
  1501                           
  1502 ;; *************** function _LIGHTS_toggleAllHazardLights *****************
  1503 ;; Defined at:
  1504 ;;		line 11 in file "lights.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;  toggle          2   20[COMRAM] PTR unsigned char 
  1507 ;;		 -> LIGHTS_BlinkPasiveState@toggleLights(1), 
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1519 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1522 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1523 ;;Total ram usage:        2 bytes
  1524 ;; Hardware stack levels used: 1
  1525 ;; Hardware stack levels required when called: 4
  1526 ;; This function calls:
  1527 ;;		_IOC_vSetOutputPort
  1528 ;; This function is called by:
  1529 ;;		_LIGHTS_BlinkPasiveState
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text12
  1534   000350                     __ptext12:
  1535                           	callstack 0
  1536   000350                     _LIGHTS_toggleAllHazardLights:
  1537                           	callstack 0
  1538   000350  FFFF               	dw	65535	; assembler added errata NOP
  1539                           
  1540                           ;lights.c: 13: IOC_vSetOutputPort(IOC_SFD, *toggle);
  1541                           
  1542                           ;incstack = 0
  1543   000352  0E01               	movlw	1
  1544   000354  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1545   000356  0E00               	movlw	0
  1546   000358  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1547   00035A  C037  FFD9         	movff	LIGHTS_toggleAllHazardLights@toggle,fsr2l
  1548   00035E  C038  FFDA         	movff	LIGHTS_toggleAllHazardLights@toggle+1,fsr2h
  1549   000362  50DF               	movf	indf2,w,c
  1550   000364  6E34               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1551   000366  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1552                           
  1553                           ;lights.c: 14: IOC_vSetOutputPort(IOC_SFS, *toggle);
  1554   00036A  0E01               	movlw	1
  1555   00036C  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1556   00036E  0E03               	movlw	3
  1557   000370  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1558   000372  C037  FFD9         	movff	LIGHTS_toggleAllHazardLights@toggle,fsr2l
  1559   000376  C038  FFDA         	movff	LIGHTS_toggleAllHazardLights@toggle+1,fsr2h
  1560   00037A  50DF               	movf	indf2,w,c
  1561   00037C  6E34               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1562   00037E  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1563                           
  1564                           ;lights.c: 15: IOC_vSetOutputPort(IOC_SSD, *toggle);
  1565   000382  0E01               	movlw	1
  1566   000384  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1567   000386  0E04               	movlw	4
  1568   000388  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1569   00038A  C037  FFD9         	movff	LIGHTS_toggleAllHazardLights@toggle,fsr2l
  1570   00038E  C038  FFDA         	movff	LIGHTS_toggleAllHazardLights@toggle+1,fsr2h
  1571   000392  50DF               	movf	indf2,w,c
  1572   000394  6E34               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1573   000396  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1574                           
  1575                           ;lights.c: 16: IOC_vSetOutputPort(IOC_SSS, *toggle);
  1576   00039A  0E01               	movlw	1
  1577   00039C  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1578   00039E  0E07               	movlw	7
  1579   0003A0  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1580   0003A2  C037  FFD9         	movff	LIGHTS_toggleAllHazardLights@toggle,fsr2l
  1581   0003A6  C038  FFDA         	movff	LIGHTS_toggleAllHazardLights@toggle+1,fsr2h
  1582   0003AA  50DF               	movf	indf2,w,c
  1583   0003AC  6E34               	movwf	IOC_vSetOutputPort@u8Value^0,c
  1584   0003AE  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1585                           
  1586                           ;lights.c: 17: *toggle = *toggle ^ 1;
  1587   0003B2  C037  FFD9         	movff	LIGHTS_toggleAllHazardLights@toggle,fsr2l
  1588   0003B6  C038  FFDA         	movff	LIGHTS_toggleAllHazardLights@toggle+1,fsr2h
  1589   0003BA  50DF               	movf	indf2,w,c
  1590   0003BC  0A01               	xorlw	1
  1591   0003BE  C037  FFD9         	movff	LIGHTS_toggleAllHazardLights@toggle,fsr2l
  1592   0003C2  C038  FFDA         	movff	LIGHTS_toggleAllHazardLights@toggle+1,fsr2h
  1593   0003C6  6EDF               	movwf	indf2,c
  1594   0003C8  0012               	return		;funcret
  1595   0003CA  FFFF               	dw	65535	; errata NOP
  1596   0003CC                     __end_of_LIGHTS_toggleAllHazardLights:
  1597                           	callstack 0
  1598                           
  1599 ;; *************** function _LIGHTS_setAllHazardLights *****************
  1600 ;; Defined at:
  1601 ;;		line 35 in file "lights.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  value           1    wreg     unsigned char 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  value           1   20[COMRAM] unsigned char 
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		wreg, status,2, status,0, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1618 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1619 ;;Total ram usage:        1 bytes
  1620 ;; Hardware stack levels used: 1
  1621 ;; Hardware stack levels required when called: 4
  1622 ;; This function calls:
  1623 ;;		_IOC_vSetOutputPort
  1624 ;; This function is called by:
  1625 ;;		_LIGHTS_BlinkPasiveState
  1626 ;;		_LIGHTS_BlinkSwitchOnState
  1627 ;;		_LIGHTS_BlinkSwitchOffState
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text13
  1632   000658                     __ptext13:
  1633                           	callstack 0
  1634   000658                     _LIGHTS_setAllHazardLights:
  1635                           	callstack 0
  1636   000658  FFFF               	dw	65535	; assembler added errata NOP
  1637                           
  1638                           ;incstack = 0
  1639                           ;LIGHTS_setAllHazardLights@value stored from wreg
  1640   00065A  6E37               	movwf	LIGHTS_setAllHazardLights@value^0,c
  1641                           
  1642                           ;lights.c: 37: IOC_vSetOutputPort(IOC_SFD, value);
  1643   00065C  0E01               	movlw	1
  1644   00065E  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1645   000660  0E00               	movlw	0
  1646   000662  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1647   000664  C037  F034         	movff	LIGHTS_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  1648   000668  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1649                           
  1650                           ;lights.c: 38: IOC_vSetOutputPort(IOC_SFS, value);
  1651   00066C  0E01               	movlw	1
  1652   00066E  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1653   000670  0E03               	movlw	3
  1654   000672  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1655   000674  C037  F034         	movff	LIGHTS_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  1656   000678  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1657                           
  1658                           ;lights.c: 39: IOC_vSetOutputPort(IOC_SSD, value);
  1659   00067C  0E01               	movlw	1
  1660   00067E  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1661   000680  0E04               	movlw	4
  1662   000682  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1663   000684  C037  F034         	movff	LIGHTS_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  1664   000688  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1665                           
  1666                           ;lights.c: 40: IOC_vSetOutputPort(IOC_SSS, value);
  1667   00068C  0E01               	movlw	1
  1668   00068E  6E33               	movwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,c
  1669   000690  0E07               	movlw	7
  1670   000692  6E32               	movwf	IOC_vSetOutputPort@u16ChannelSelect^0,c
  1671   000694  C037  F034         	movff	LIGHTS_setAllHazardLights@value,IOC_vSetOutputPort@u8Value
  1672   000698  EC72  F003         	call	_IOC_vSetOutputPort	;wreg free
  1673   00069C  0012               	return		;funcret
  1674   00069E  FFFF               	dw	65535	; errata NOP
  1675   0006A0                     __end_of_LIGHTS_setAllHazardLights:
  1676                           	callstack 0
  1677                           
  1678 ;; *************** function _IOC_vSetOutputPort *****************
  1679 ;; Defined at:
  1680 ;;		line 5 in file "ioc.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;  u16ChannelSe    2   15[COMRAM] const enum E10327
  1683 ;;  u8Value         1   17[COMRAM] const unsigned char 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  u16ChannelMa    2   18[COMRAM] unsigned int 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, status,2, status,0, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1695 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1696 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1698 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1699 ;;Total ram usage:        5 bytes
  1700 ;; Hardware stack levels used: 1
  1701 ;; Hardware stack levels required when called: 3
  1702 ;; This function calls:
  1703 ;;		_PCS_vSetOutputPortD
  1704 ;;		_PCS_vSetOutputPortE
  1705 ;; This function is called by:
  1706 ;;		_LIGHTS_toggleAllHazardLights
  1707 ;;		_LIGHTS_toggleSideHazardLights
  1708 ;;		_LIGHTS_setAllHazardLights
  1709 ;;		_LIGHTS_setSideHazardLights
  1710 ;;		_LIGHTS_DemoState1
  1711 ;;		_LIGHTS_DemoState2
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text14
  1716   0006E4                     __ptext14:
  1717                           	callstack 0
  1718   0006E4                     _IOC_vSetOutputPort:
  1719                           	callstack 0
  1720   0006E4  FFFF               	dw	65535	; assembler added errata NOP
  1721                           
  1722                           ;ioc.c: 7: T_U16 u16ChannelMask = (u16ChannelSelect&0xFF00);
  1723                           
  1724                           ;incstack = 0
  1725   0006E6  0E00               	movlw	0
  1726   0006E8  1432               	andwf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  1727   0006EA  6E35               	movwf	IOC_vSetOutputPort@u16ChannelMask^0,c
  1728   0006EC  0EFF               	movlw	255
  1729   0006EE  1433               	andwf	(IOC_vSetOutputPort@u16ChannelSelect+1)^0,w,c
  1730   0006F0  6E36               	movwf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,c
  1731                           
  1732                           ;ioc.c: 9: if(u16ChannelMask == IOC_PORTD)
  1733   0006F2  0436               	decf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,w,c
  1734   0006F4  1035               	iorwf	IOC_vSetOutputPort@u16ChannelMask^0,w,c
  1735   0006F6  A4D8               	btfss	status,2,c
  1736   0006F8  D006               	goto	l1485
  1737                           
  1738                           ;ioc.c: 10: {;ioc.c: 11: PCS_vSetOutputPortD(u16ChannelSelect, u8Value);
  1739   0006FA  C034  F02A         	movff	IOC_vSetOutputPort@u8Value,PCS_vSetOutputPortD@u8Value
  1740   0006FE  5032               	movf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  1741   000700  EC69  F001         	call	_PCS_vSetOutputPortD
  1742                           
  1743                           ;ioc.c: 12: }
  1744   000704  D00B               	goto	l267
  1745   000706                     l1485:
  1746   000706  FFFF               	dw	65535	; assembler added errata NOP
  1747                           
  1748                           ;ioc.c: 13: else if(u16ChannelMask == IOC_PORTE)
  1749   000708  0E02               	movlw	2
  1750   00070A  1836               	xorwf	(IOC_vSetOutputPort@u16ChannelMask+1)^0,w,c
  1751   00070C  1035               	iorwf	IOC_vSetOutputPort@u16ChannelMask^0,w,c
  1752   00070E  A4D8               	btfss	status,2,c
  1753   000710  D005               	goto	l267
  1754                           
  1755                           ;ioc.c: 14: {;ioc.c: 15: PCS_vSetOutputPortE(u16ChannelSelect, u8Value);
  1756   000712  C034  F02A         	movff	IOC_vSetOutputPort@u8Value,PCS_vSetOutputPortE@u8Value
  1757   000716  5032               	movf	IOC_vSetOutputPort@u16ChannelSelect^0,w,c
  1758   000718  EC2A  F001         	call	_PCS_vSetOutputPortE
  1759   00071C                     l267:
  1760   00071C  FFFF               	dw	65535	; assembler added errata NOP
  1761   00071E  0012               	return		;funcret
  1762   000720  FFFF               	dw	65535	; errata NOP
  1763   000722                     __end_of_IOC_vSetOutputPort:
  1764                           	callstack 0
  1765                           
  1766 ;; *************** function _PCS_vSetOutputPortE *****************
  1767 ;; Defined at:
  1768 ;;		line 35 in file "pcs.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;  u8BitNumber     1    wreg     const unsigned char 
  1771 ;;  u8Value         1    7[COMRAM] const unsigned char 
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  u8BitNumber     1   13[COMRAM] const unsigned char 
  1774 ;;  u8BitNumberV    1   14[COMRAM] unsigned char 
  1775 ;;  u8BitValue      1   12[COMRAM] unsigned char 
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      void 
  1778 ;; Registers used:
  1779 ;;		wreg, status,2, status,0
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1785 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1786 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1787 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1788 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1789 ;;Total ram usage:        8 bytes
  1790 ;; Hardware stack levels used: 1
  1791 ;; Hardware stack levels required when called: 2
  1792 ;; This function calls:
  1793 ;;		Nothing
  1794 ;; This function is called by:
  1795 ;;		_IOC_vSetOutputPort
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text15
  1800   000254                     __ptext15:
  1801                           	callstack 0
  1802   000254                     _PCS_vSetOutputPortE:
  1803                           	callstack 0
  1804   000254  FFFF               	dw	65535	; assembler added errata NOP
  1805                           
  1806                           ;incstack = 0
  1807                           ;PCS_vSetOutputPortE@u8BitNumber stored from wreg
  1808   000256  6E30               	movwf	PCS_vSetOutputPortE@u8BitNumber^0,c
  1809                           
  1810                           ;pcs.c: 37: T_U8 u8BitValue = u8Value>0 ? 1 : 0;
  1811   000258  502A               	movf	PCS_vSetOutputPortE@u8Value^0,w,c
  1812   00025A  B4D8               	btfsc	status,2,c
  1813   00025C  D002               	goto	u700
  1814   00025E  0E01               	movlw	1
  1815   000260  D002               	goto	u710
  1816   000262                     u700:
  1817   000262  FFFF               	dw	65535	; assembler added errata NOP
  1818   000264  0E00               	movlw	0
  1819   000266                     u710:
  1820   000266  FFFF               	dw	65535	; assembler added errata NOP
  1821   000268  6E2F               	movwf	PCS_vSetOutputPortE@u8BitValue^0,c
  1822                           
  1823                           ;pcs.c: 38: T_U8 u8BitNumberValue = u8BitNumber<=1 ? u8BitNumber : 1;
  1824   00026A  0E01               	movlw	1
  1825   00026C  6430               	cpfsgt	PCS_vSetOutputPortE@u8BitNumber^0,c
  1826   00026E  D005               	goto	l171
  1827   000270  0E00               	movlw	0
  1828   000272  6E2E               	movwf	(_PCS_vSetOutputPortE$742+1)^0,c
  1829   000274  0E01               	movlw	1
  1830   000276  6E2D               	movwf	_PCS_vSetOutputPortE$742^0,c
  1831   000278  D004               	goto	l173
  1832   00027A                     l171:
  1833   00027A  FFFF               	dw	65535	; assembler added errata NOP
  1834   00027C  C030  F02D         	movff	PCS_vSetOutputPortE@u8BitNumber,_PCS_vSetOutputPortE$742
  1835   000280  6A2E               	clrf	(_PCS_vSetOutputPortE$742+1)^0,c
  1836   000282                     l173:
  1837   000282  FFFF               	dw	65535	; assembler added errata NOP
  1838   000284  C02D  F031         	movff	_PCS_vSetOutputPortE$742,PCS_vSetOutputPortE@u8BitNumberValue
  1839                           
  1840                           ;pcs.c: 40: if(1 == u8BitValue)
  1841   000288  042F               	decf	PCS_vSetOutputPortE@u8BitValue^0,w,c
  1842   00028A  A4D8               	btfss	status,2,c
  1843   00028C  D00F               	goto	l1479
  1844                           
  1845                           ;pcs.c: 41: {;pcs.c: 42: PORTE |= (0x01<<u8BitNumberValue);
  1846   00028E  C031  F02B         	movff	PCS_vSetOutputPortE@u8BitNumberValue,??_PCS_vSetOutputPortE
  1847   000292  0E01               	movlw	1
  1848   000294  6E2C               	movwf	(??_PCS_vSetOutputPortE+1)^0,c
  1849   000296  2A2B               	incf	??_PCS_vSetOutputPortE^0,f,c
  1850   000298  D003               	goto	u744
  1851   00029A                     u745:
  1852   00029A  FFFF               	dw	65535	; assembler added errata NOP
  1853   00029C  90D8               	bcf	status,0,c
  1854   00029E  362C               	rlcf	(??_PCS_vSetOutputPortE+1)^0,f,c
  1855   0002A0                     u744:
  1856   0002A0  FFFF               	dw	65535	; assembler added errata NOP
  1857   0002A2  2E2B               	decfsz	??_PCS_vSetOutputPortE^0,f,c
  1858   0002A4  D7FA               	goto	u745
  1859   0002A6  502C               	movf	(??_PCS_vSetOutputPortE+1)^0,w,c
  1860   0002A8  1284               	iorwf	132,f,c	;volatile
  1861                           
  1862                           ;pcs.c: 43: }
  1863   0002AA  D010               	goto	l176
  1864   0002AC                     l1479:
  1865   0002AC  FFFF               	dw	65535	; assembler added errata NOP
  1866                           
  1867                           ;pcs.c: 44: else;pcs.c: 45: {;pcs.c: 46: PORTE &= ~(0x01<<u8BitNumberValue);
  1868   0002AE  C031  F02B         	movff	PCS_vSetOutputPortE@u8BitNumberValue,??_PCS_vSetOutputPortE
  1869   0002B2  0E01               	movlw	1
  1870   0002B4  6E2C               	movwf	(??_PCS_vSetOutputPortE+1)^0,c
  1871   0002B6  2A2B               	incf	??_PCS_vSetOutputPortE^0,f,c
  1872   0002B8  D003               	goto	u754
  1873   0002BA                     u755:
  1874   0002BA  FFFF               	dw	65535	; assembler added errata NOP
  1875   0002BC  90D8               	bcf	status,0,c
  1876   0002BE  362C               	rlcf	(??_PCS_vSetOutputPortE+1)^0,f,c
  1877   0002C0                     u754:
  1878   0002C0  FFFF               	dw	65535	; assembler added errata NOP
  1879   0002C2  2E2B               	decfsz	??_PCS_vSetOutputPortE^0,f,c
  1880   0002C4  D7FA               	goto	u755
  1881   0002C6  502C               	movf	(??_PCS_vSetOutputPortE+1)^0,w,c
  1882   0002C8  0AFF               	xorlw	255
  1883   0002CA  1684               	andwf	132,f,c	;volatile
  1884   0002CC                     l176:
  1885   0002CC  FFFF               	dw	65535	; assembler added errata NOP
  1886   0002CE  0012               	return		;funcret
  1887   0002D0  FFFF               	dw	65535	; errata NOP
  1888   0002D2                     __end_of_PCS_vSetOutputPortE:
  1889                           	callstack 0
  1890                           
  1891 ;; *************** function _PCS_vSetOutputPortD *****************
  1892 ;; Defined at:
  1893 ;;		line 20 in file "pcs.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;  u8BitNumber     1    wreg     const unsigned char 
  1896 ;;  u8Value         1    7[COMRAM] const unsigned char 
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;  u8BitNumber     1   13[COMRAM] const unsigned char 
  1899 ;;  u8BitNumberV    1   14[COMRAM] unsigned char 
  1900 ;;  u8BitValue      1   12[COMRAM] unsigned char 
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1910 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1911 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1912 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1913 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1914 ;;Total ram usage:        8 bytes
  1915 ;; Hardware stack levels used: 1
  1916 ;; Hardware stack levels required when called: 2
  1917 ;; This function calls:
  1918 ;;		Nothing
  1919 ;; This function is called by:
  1920 ;;		_IOC_vSetOutputPort
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           	psect	text16
  1925   0002D2                     __ptext16:
  1926                           	callstack 0
  1927   0002D2                     _PCS_vSetOutputPortD:
  1928                           	callstack 0
  1929   0002D2  FFFF               	dw	65535	; assembler added errata NOP
  1930                           
  1931                           ;incstack = 0
  1932                           ;PCS_vSetOutputPortD@u8BitNumber stored from wreg
  1933   0002D4  6E30               	movwf	PCS_vSetOutputPortD@u8BitNumber^0,c
  1934                           
  1935                           ;pcs.c: 22: T_U8 u8BitValue = u8Value>0 ? 1 : 0;
  1936   0002D6  502A               	movf	PCS_vSetOutputPortD@u8Value^0,w,c
  1937   0002D8  B4D8               	btfsc	status,2,c
  1938   0002DA  D002               	goto	u640
  1939   0002DC  0E01               	movlw	1
  1940   0002DE  D002               	goto	u650
  1941   0002E0                     u640:
  1942   0002E0  FFFF               	dw	65535	; assembler added errata NOP
  1943   0002E2  0E00               	movlw	0
  1944   0002E4                     u650:
  1945   0002E4  FFFF               	dw	65535	; assembler added errata NOP
  1946   0002E6  6E2F               	movwf	PCS_vSetOutputPortD@u8BitValue^0,c
  1947                           
  1948                           ;pcs.c: 23: T_U8 u8BitNumberValue = u8BitNumber<=7 ? u8BitNumber : 7;
  1949   0002E8  0E07               	movlw	7
  1950   0002EA  6430               	cpfsgt	PCS_vSetOutputPortD@u8BitNumber^0,c
  1951   0002EC  D005               	goto	l162
  1952   0002EE  0E00               	movlw	0
  1953   0002F0  6E2E               	movwf	(_PCS_vSetOutputPortD$736+1)^0,c
  1954   0002F2  0E07               	movlw	7
  1955   0002F4  6E2D               	movwf	_PCS_vSetOutputPortD$736^0,c
  1956   0002F6  D004               	goto	l164
  1957   0002F8                     l162:
  1958   0002F8  FFFF               	dw	65535	; assembler added errata NOP
  1959   0002FA  C030  F02D         	movff	PCS_vSetOutputPortD@u8BitNumber,_PCS_vSetOutputPortD$736
  1960   0002FE  6A2E               	clrf	(_PCS_vSetOutputPortD$736+1)^0,c
  1961   000300                     l164:
  1962   000300  FFFF               	dw	65535	; assembler added errata NOP
  1963   000302  C02D  F031         	movff	_PCS_vSetOutputPortD$736,PCS_vSetOutputPortD@u8BitNumberValue
  1964                           
  1965                           ;pcs.c: 25: if(1 == u8BitValue)
  1966   000306  042F               	decf	PCS_vSetOutputPortD@u8BitValue^0,w,c
  1967   000308  A4D8               	btfss	status,2,c
  1968   00030A  D00F               	goto	l1467
  1969                           
  1970                           ;pcs.c: 26: {;pcs.c: 27: PORTD |= (0x01<<u8BitNumberValue);
  1971   00030C  C031  F02B         	movff	PCS_vSetOutputPortD@u8BitNumberValue,??_PCS_vSetOutputPortD
  1972   000310  0E01               	movlw	1
  1973   000312  6E2C               	movwf	(??_PCS_vSetOutputPortD+1)^0,c
  1974   000314  2A2B               	incf	??_PCS_vSetOutputPortD^0,f,c
  1975   000316  D003               	goto	u684
  1976   000318                     u685:
  1977   000318  FFFF               	dw	65535	; assembler added errata NOP
  1978   00031A  90D8               	bcf	status,0,c
  1979   00031C  362C               	rlcf	(??_PCS_vSetOutputPortD+1)^0,f,c
  1980   00031E                     u684:
  1981   00031E  FFFF               	dw	65535	; assembler added errata NOP
  1982   000320  2E2B               	decfsz	??_PCS_vSetOutputPortD^0,f,c
  1983   000322  D7FA               	goto	u685
  1984   000324  502C               	movf	(??_PCS_vSetOutputPortD+1)^0,w,c
  1985   000326  1283               	iorwf	131,f,c	;volatile
  1986                           
  1987                           ;pcs.c: 28: }
  1988   000328  D010               	goto	l167
  1989   00032A                     l1467:
  1990   00032A  FFFF               	dw	65535	; assembler added errata NOP
  1991                           
  1992                           ;pcs.c: 29: else;pcs.c: 30: {;pcs.c: 31: PORTD &= ~(0x01<<u8BitNumberValue);
  1993   00032C  C031  F02B         	movff	PCS_vSetOutputPortD@u8BitNumberValue,??_PCS_vSetOutputPortD
  1994   000330  0E01               	movlw	1
  1995   000332  6E2C               	movwf	(??_PCS_vSetOutputPortD+1)^0,c
  1996   000334  2A2B               	incf	??_PCS_vSetOutputPortD^0,f,c
  1997   000336  D003               	goto	u694
  1998   000338                     u695:
  1999   000338  FFFF               	dw	65535	; assembler added errata NOP
  2000   00033A  90D8               	bcf	status,0,c
  2001   00033C  362C               	rlcf	(??_PCS_vSetOutputPortD+1)^0,f,c
  2002   00033E                     u694:
  2003   00033E  FFFF               	dw	65535	; assembler added errata NOP
  2004   000340  2E2B               	decfsz	??_PCS_vSetOutputPortD^0,f,c
  2005   000342  D7FA               	goto	u695
  2006   000344  502C               	movf	(??_PCS_vSetOutputPortD+1)^0,w,c
  2007   000346  0AFF               	xorlw	255
  2008   000348  1683               	andwf	131,f,c	;volatile
  2009   00034A                     l167:
  2010   00034A  FFFF               	dw	65535	; assembler added errata NOP
  2011   00034C  0012               	return		;funcret
  2012   00034E  FFFF               	dw	65535	; errata NOP
  2013   000350                     __end_of_PCS_vSetOutputPortD:
  2014                           	callstack 0
  2015                           
  2016 ;; *************** function _LIGHTS_BlinkEventPoll *****************
  2017 ;; Defined at:
  2018 ;;		line 185 in file "lights.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;		None
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2036 ;;Total ram usage:        0 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; Hardware stack levels required when called: 4
  2039 ;; This function calls:
  2040 ;;		_IOC_T16GetInputPort
  2041 ;; This function is called by:
  2042 ;;		_LIGHTS_BlinkersInit
  2043 ;;		_LIGHTS_BlinkersRun
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           	psect	text17
  2048   000760                     __ptext17:
  2049                           	callstack 0
  2050   000760                     _LIGHTS_BlinkEventPoll:
  2051                           	callstack 0
  2052   000760  FFFF               	dw	65535	; assembler added errata NOP
  2053                           
  2054                           ;lights.c: 187: blinkerSM.avarie = IOC_T16GetInputPort(IOC_AVARII);
  2055                           
  2056                           ;incstack = 0
  2057   000762  0E00               	movlw	0
  2058   000764  6E35               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2059   000766  0E02               	movlw	2
  2060   000768  6E34               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2061   00076A  ECAE  F002         	call	_IOC_T16GetInputPort	;wreg free
  2062   00076E  5034               	movf	?_IOC_T16GetInputPort^0,w,c
  2063   000770  6E07               	movwf	(_blinkerSM+6)^0,c
  2064                           
  2065                           ;lights.c: 188: blinkerSM.leftSwitch = IOC_T16GetInputPort(IOC_SEM_S);
  2066   000772  0E00               	movlw	0
  2067   000774  6E35               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2068   000776  0E04               	movlw	4
  2069   000778  6E34               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2070   00077A  ECAE  F002         	call	_IOC_T16GetInputPort	;wreg free
  2071   00077E  5034               	movf	?_IOC_T16GetInputPort^0,w,c
  2072   000780  6E08               	movwf	(_blinkerSM+7)^0,c
  2073                           
  2074                           ;lights.c: 189: blinkerSM.rightSwitch = IOC_T16GetInputPort(IOC_SEM_D);
  2075   000782  0E00               	movlw	0
  2076   000784  6E35               	movwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,c
  2077   000786  0E03               	movlw	3
  2078   000788  6E34               	movwf	IOC_T16GetInputPort@u16ChannelSelect^0,c
  2079   00078A  ECAE  F002         	call	_IOC_T16GetInputPort	;wreg free
  2080   00078E  5034               	movf	?_IOC_T16GetInputPort^0,w,c
  2081   000790  6E09               	movwf	(_blinkerSM+8)^0,c
  2082   000792  0012               	return		;funcret
  2083   000794  FFFF               	dw	65535	; errata NOP
  2084   000796                     __end_of_LIGHTS_BlinkEventPoll:
  2085                           	callstack 0
  2086                           
  2087 ;; *************** function _IOC_T16GetInputPort *****************
  2088 ;; Defined at:
  2089 ;;		line 19 in file "ioc.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  u16ChannelSe    2   17[COMRAM] const enum E10339
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  u16ChannelMa    2   21[COMRAM] unsigned int 
  2094 ;;  pinValue        2   19[COMRAM] unsigned int 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  2   17[COMRAM] unsigned int 
  2097 ;; Registers used:
  2098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2104 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2105 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2107 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2108 ;;Total ram usage:        6 bytes
  2109 ;; Hardware stack levels used: 1
  2110 ;; Hardware stack levels required when called: 3
  2111 ;; This function calls:
  2112 ;;		_ADC_u16ReadAdcValue
  2113 ;;		_PCS_T16GetInputPortC
  2114 ;; This function is called by:
  2115 ;;		_LIGHTS_BlinkEventPoll
  2116 ;;		_LIGHTS_DemoEventPoll
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text18
  2121   00055C                     __ptext18:
  2122                           	callstack 0
  2123   00055C                     _IOC_T16GetInputPort:
  2124                           	callstack 0
  2125   00055C  FFFF               	dw	65535	; assembler added errata NOP
  2126                           
  2127                           ;ioc.c: 21: T_U16 pinValue = 0;
  2128                           
  2129                           ;incstack = 0
  2130   00055E  0E00               	movlw	0
  2131   000560  6E37               	movwf	(IOC_T16GetInputPort@pinValue+1)^0,c
  2132   000562  0E00               	movlw	0
  2133   000564  6E36               	movwf	IOC_T16GetInputPort@pinValue^0,c
  2134                           
  2135                           ;ioc.c: 22: T_U16 u16ChannelMask = (u16ChannelSelect&0xFF00);
  2136   000566  0E00               	movlw	0
  2137   000568  1434               	andwf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  2138   00056A  6E38               	movwf	IOC_T16GetInputPort@u16ChannelMask^0,c
  2139   00056C  0EFF               	movlw	255
  2140   00056E  1435               	andwf	(IOC_T16GetInputPort@u16ChannelSelect+1)^0,w,c
  2141   000570  6E39               	movwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,c
  2142                           
  2143                           ;ioc.c: 24: if(u16ChannelMask == IOC_PORTC)
  2144   000572  5038               	movf	IOC_T16GetInputPort@u16ChannelMask^0,w,c
  2145   000574  1039               	iorwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,w,c
  2146   000576  A4D8               	btfss	status,2,c
  2147   000578  D008               	goto	l1533
  2148                           
  2149                           ;ioc.c: 25: {;ioc.c: 26: pinValue = PCS_T16GetInputPortC(u16ChannelSelect);
  2150   00057A  5034               	movf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  2151   00057C  EC54  F002         	call	_PCS_T16GetInputPortC
  2152   000580  C02A  F036         	movff	?_PCS_T16GetInputPortC,IOC_T16GetInputPort@pinValue
  2153   000584  C02B  F037         	movff	?_PCS_T16GetInputPortC+1,IOC_T16GetInputPort@pinValue+1
  2154                           
  2155                           ;ioc.c: 27: }
  2156   000588  D00D               	goto	l1537
  2157   00058A                     l1533:
  2158   00058A  FFFF               	dw	65535	; assembler added errata NOP
  2159                           
  2160                           ;ioc.c: 28: else if(u16ChannelMask == IOC_PORTA)
  2161   00058C  0E03               	movlw	3
  2162   00058E  1839               	xorwf	(IOC_T16GetInputPort@u16ChannelMask+1)^0,w,c
  2163   000590  1038               	iorwf	IOC_T16GetInputPort@u16ChannelMask^0,w,c
  2164   000592  A4D8               	btfss	status,2,c
  2165   000594  D007               	goto	l1537
  2166                           
  2167                           ;ioc.c: 29: {;ioc.c: 30: pinValue = ADC_u16ReadAdcValue(u16ChannelSelect);
  2168   000596  5034               	movf	IOC_T16GetInputPort@u16ChannelSelect^0,w,c
  2169   000598  EC91  F003         	call	_ADC_u16ReadAdcValue
  2170   00059C  C02A  F036         	movff	?_ADC_u16ReadAdcValue,IOC_T16GetInputPort@pinValue
  2171   0005A0  C02B  F037         	movff	?_ADC_u16ReadAdcValue+1,IOC_T16GetInputPort@pinValue+1
  2172   0005A4                     l1537:
  2173   0005A4  FFFF               	dw	65535	; assembler added errata NOP
  2174                           
  2175                           ;ioc.c: 31: };ioc.c: 33: return pinValue;
  2176   0005A6  C036  F034         	movff	IOC_T16GetInputPort@pinValue,?_IOC_T16GetInputPort
  2177   0005AA  C037  F035         	movff	IOC_T16GetInputPort@pinValue+1,?_IOC_T16GetInputPort+1
  2178   0005AE  0012               	return		;funcret
  2179   0005B0  FFFF               	dw	65535	; errata NOP
  2180   0005B2                     __end_of_IOC_T16GetInputPort:
  2181                           	callstack 0
  2182                           
  2183 ;; *************** function _PCS_T16GetInputPortC *****************
  2184 ;; Defined at:
  2185 ;;		line 50 in file "pcs.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;  u8BitNumber     1    wreg     const unsigned char 
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  u8BitNumber     1   15[COMRAM] const unsigned char 
  2190 ;;  u8BitNumberV    1   16[COMRAM] unsigned char 
  2191 ;; Return value:  Size  Location     Type
  2192 ;;                  2    7[COMRAM] unsigned int 
  2193 ;; Registers used:
  2194 ;;		wreg, status,2, status,0
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2200 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2201 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2202 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2203 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2204 ;;Total ram usage:       10 bytes
  2205 ;; Hardware stack levels used: 1
  2206 ;; Hardware stack levels required when called: 2
  2207 ;; This function calls:
  2208 ;;		Nothing
  2209 ;; This function is called by:
  2210 ;;		_IOC_T16GetInputPort
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text19
  2215   0004A8                     __ptext19:
  2216                           	callstack 0
  2217   0004A8                     _PCS_T16GetInputPortC:
  2218                           	callstack 0
  2219   0004A8  FFFF               	dw	65535	; assembler added errata NOP
  2220                           
  2221                           ;incstack = 0
  2222                           ;PCS_T16GetInputPortC@u8BitNumber stored from wreg
  2223   0004AA  6E32               	movwf	PCS_T16GetInputPortC@u8BitNumber^0,c
  2224                           
  2225                           ;pcs.c: 52: T_U8 u8BitNumberValue = u8BitNumber<=4 ? u8BitNumber : 4;
  2226   0004AC  0E04               	movlw	4
  2227   0004AE  6432               	cpfsgt	PCS_T16GetInputPortC@u8BitNumber^0,c
  2228   0004B0  D005               	goto	l180
  2229   0004B2  0E00               	movlw	0
  2230   0004B4  6E31               	movwf	(_PCS_T16GetInputPortC$746+1)^0,c
  2231   0004B6  0E04               	movlw	4
  2232   0004B8  6E30               	movwf	_PCS_T16GetInputPortC$746^0,c
  2233   0004BA  D004               	goto	l182
  2234   0004BC                     l180:
  2235   0004BC  FFFF               	dw	65535	; assembler added errata NOP
  2236   0004BE  C032  F030         	movff	PCS_T16GetInputPortC@u8BitNumber,_PCS_T16GetInputPortC$746
  2237   0004C2  6A31               	clrf	(_PCS_T16GetInputPortC$746+1)^0,c
  2238   0004C4                     l182:
  2239   0004C4  FFFF               	dw	65535	; assembler added errata NOP
  2240   0004C6  C030  F033         	movff	_PCS_T16GetInputPortC$746,PCS_T16GetInputPortC@u8BitNumberValue
  2241                           
  2242                           ;pcs.c: 53: return (PORTC & 0x01<<u8BitNumberValue)>>u8BitNumberValue;
  2243   0004CA  C033  F02C         	movff	PCS_T16GetInputPortC@u8BitNumberValue,??_PCS_T16GetInputPortC
  2244   0004CE  C033  F02D         	movff	PCS_T16GetInputPortC@u8BitNumberValue,??_PCS_T16GetInputPortC+1
  2245   0004D2  0E01               	movlw	1
  2246   0004D4  6E2E               	movwf	(??_PCS_T16GetInputPortC+2)^0,c
  2247   0004D6  2A2D               	incf	(??_PCS_T16GetInputPortC+1)^0,f,c
  2248   0004D8  D003               	goto	u804
  2249   0004DA                     u805:
  2250   0004DA  FFFF               	dw	65535	; assembler added errata NOP
  2251   0004DC  90D8               	bcf	status,0,c
  2252   0004DE  362E               	rlcf	(??_PCS_T16GetInputPortC+2)^0,f,c
  2253   0004E0                     u804:
  2254   0004E0  FFFF               	dw	65535	; assembler added errata NOP
  2255   0004E2  2E2D               	decfsz	(??_PCS_T16GetInputPortC+1)^0,f,c
  2256   0004E4  D7FA               	goto	u805
  2257   0004E6  502E               	movf	(??_PCS_T16GetInputPortC+2)^0,w,c
  2258   0004E8  1482               	andwf	130,w,c	;volatile
  2259   0004EA  6E2F               	movwf	(??_PCS_T16GetInputPortC+3)^0,c
  2260   0004EC  2A2C               	incf	??_PCS_T16GetInputPortC^0,f,c
  2261   0004EE  D003               	goto	u814
  2262   0004F0                     u815:
  2263   0004F0  FFFF               	dw	65535	; assembler added errata NOP
  2264   0004F2  90D8               	bcf	status,0,c
  2265   0004F4  322F               	rrcf	(??_PCS_T16GetInputPortC+3)^0,f,c
  2266   0004F6                     u814:
  2267   0004F6  FFFF               	dw	65535	; assembler added errata NOP
  2268   0004F8  2E2C               	decfsz	??_PCS_T16GetInputPortC^0,f,c
  2269   0004FA  D7FA               	goto	u815
  2270   0004FC  502F               	movf	(??_PCS_T16GetInputPortC+3)^0,w,c
  2271   0004FE  6E2A               	movwf	?_PCS_T16GetInputPortC^0,c
  2272   000500  6A2B               	clrf	(?_PCS_T16GetInputPortC+1)^0,c
  2273   000502  0012               	return		;funcret
  2274   000504  FFFF               	dw	65535	; errata NOP
  2275   000506                     __end_of_PCS_T16GetInputPortC:
  2276                           	callstack 0
  2277                           
  2278 ;; *************** function _ADC_u16ReadAdcValue *****************
  2279 ;; Defined at:
  2280 ;;		line 48 in file "adc.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;  U8Channel       1    wreg     const unsigned char 
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  U8Channel       1   12[COMRAM] const unsigned char 
  2285 ;;  U8ChannelVal    1   11[COMRAM] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  2    7[COMRAM] unsigned int 
  2288 ;; Registers used:
  2289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2295 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2296 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2298 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2299 ;;Total ram usage:        6 bytes
  2300 ;; Hardware stack levels used: 1
  2301 ;; Hardware stack levels required when called: 2
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_IOC_T16GetInputPort
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text20
  2310   000722                     __ptext20:
  2311                           	callstack 0
  2312   000722                     _ADC_u16ReadAdcValue:
  2313                           	callstack 0
  2314   000722  FFFF               	dw	65535	; assembler added errata NOP
  2315                           
  2316                           ;incstack = 0
  2317                           ;ADC_u16ReadAdcValue@U8Channel stored from wreg
  2318   000724  6E2F               	movwf	ADC_u16ReadAdcValue@U8Channel^0,c
  2319                           
  2320                           ;adc.c: 50: T_U8 U8ChannelValue = U8Channel<=1 ? U8Channel : 1;
  2321   000726  0E01               	movlw	1
  2322   000728  642F               	cpfsgt	ADC_u16ReadAdcValue@U8Channel^0,c
  2323   00072A  D005               	goto	l112
  2324   00072C  0E00               	movlw	0
  2325   00072E  6E2D               	movwf	(_ADC_u16ReadAdcValue$404+1)^0,c
  2326   000730  0E01               	movlw	1
  2327   000732  6E2C               	movwf	_ADC_u16ReadAdcValue$404^0,c
  2328   000734  D004               	goto	l114
  2329   000736                     l112:
  2330   000736  FFFF               	dw	65535	; assembler added errata NOP
  2331   000738  C02F  F02C         	movff	ADC_u16ReadAdcValue@U8Channel,_ADC_u16ReadAdcValue$404
  2332   00073C  6A2D               	clrf	(_ADC_u16ReadAdcValue$404+1)^0,c
  2333   00073E                     l114:
  2334   00073E  FFFF               	dw	65535	; assembler added errata NOP
  2335   000740  C02C  F02E         	movff	_ADC_u16ReadAdcValue$404,ADC_u16ReadAdcValue@U8ChannelValue
  2336                           
  2337                           ;adc.c: 51: return au16AdcReadValue[U8ChannelValue];
  2338   000744  502E               	movf	ADC_u16ReadAdcValue@U8ChannelValue^0,w,c
  2339   000746  0D02               	mullw	2
  2340   000748  0E12               	movlw	low _au16AdcReadValue
  2341   00074A  24F3               	addwf	243,w,c
  2342   00074C  6ED9               	movwf	fsr2l,c
  2343   00074E  0E00               	movlw	high _au16AdcReadValue
  2344   000750  20F4               	addwfc	prodh,w,c
  2345   000752  6EDA               	movwf	fsr2h,c
  2346   000754  CFDE F02A          	movff	postinc2,?_ADC_u16ReadAdcValue
  2347   000758  CFDD F02B          	movff	postdec2,?_ADC_u16ReadAdcValue+1
  2348   00075C  0012               	return		;funcret
  2349   00075E  FFFF               	dw	65535	; errata NOP
  2350   000760                     __end_of_ADC_u16ReadAdcValue:
  2351                           	callstack 0
  2352                           
  2353 ;; *************** function _TASK_vTask10ms *****************
  2354 ;; Defined at:
  2355 ;;		line 17 in file "tasks.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;		None
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;		None
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  1    wreg      void 
  2362 ;; Registers used:
  2363 ;;		None
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2373 ;;Total ram usage:        0 bytes
  2374 ;; Hardware stack levels used: 1
  2375 ;; Hardware stack levels required when called: 2
  2376 ;; This function calls:
  2377 ;;		Nothing
  2378 ;; This function is called by:
  2379 ;;		_SCHED_vStartScheduler
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text21
  2384   0008AA                     __ptext21:
  2385                           	callstack 0
  2386   0008AA                     _TASK_vTask10ms:
  2387                           	callstack 0
  2388   0008AA  FFFF               	dw	65535	; assembler added errata NOP
  2389                           
  2390                           ;incstack = 0
  2391   0008AC  0012               	return		;funcret
  2392   0008AE  FFFF               	dw	65535	; errata NOP
  2393   0008B0                     __end_of_TASK_vTask10ms:
  2394                           	callstack 0
  2395                           
  2396 ;; *************** function _TASK_vTask100ms *****************
  2397 ;; Defined at:
  2398 ;;		line 21 in file "tasks.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      void 
  2405 ;; Registers used:
  2406 ;;		None
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2416 ;;Total ram usage:        0 bytes
  2417 ;; Hardware stack levels used: 1
  2418 ;; Hardware stack levels required when called: 2
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_SCHED_vStartScheduler
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text22
  2427   0008B0                     __ptext22:
  2428                           	callstack 0
  2429   0008B0                     _TASK_vTask100ms:
  2430                           	callstack 0
  2431   0008B0  FFFF               	dw	65535	; assembler added errata NOP
  2432                           
  2433                           ;incstack = 0
  2434   0008B2  0012               	return		;funcret
  2435   0008B4  FFFF               	dw	65535	; errata NOP
  2436   0008B6                     __end_of_TASK_vTask100ms:
  2437                           	callstack 0
  2438                           
  2439 ;; *************** function _SCHED_vInitSystem *****************
  2440 ;; Defined at:
  2441 ;;		line 13 in file "sched.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;		None
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;		None
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  1    wreg      void 
  2448 ;; Registers used:
  2449 ;;		wreg, status,2, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2459 ;;Total ram usage:        0 bytes
  2460 ;; Hardware stack levels used: 1
  2461 ;; Hardware stack levels required when called: 3
  2462 ;; This function calls:
  2463 ;;		_ADC_vInit
  2464 ;;		_INT_vInit
  2465 ;;		_PCS_vInit
  2466 ;;		_TIM_vInit
  2467 ;; This function is called by:
  2468 ;;		_main
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text23
  2473   000842                     __ptext23:
  2474                           	callstack 0
  2475   000842                     _SCHED_vInitSystem:
  2476                           	callstack 0
  2477   000842  FFFF               	dw	65535	; assembler added errata NOP
  2478                           
  2479                           ;sched.c: 15: PCS_vInit();
  2480                           
  2481                           ;incstack = 0
  2482   000844  EC13  F004         	call	_PCS_vInit	;wreg free
  2483                           
  2484                           ;sched.c: 16: INT_vInit();
  2485   000848  EC37  F004         	call	_INT_vInit	;wreg free
  2486                           
  2487                           ;sched.c: 17: ADC_vInit();
  2488   00084C  EC50  F003         	call	_ADC_vInit	;wreg free
  2489                           
  2490                           ;sched.c: 18: TIM_vInit();
  2491   000850  ECCB  F003         	call	_TIM_vInit	;wreg free
  2492   000854  0012               	return		;funcret
  2493   000856  FFFF               	dw	65535	; errata NOP
  2494   000858                     __end_of_SCHED_vInitSystem:
  2495                           	callstack 0
  2496                           
  2497 ;; *************** function _TIM_vInit *****************
  2498 ;; Defined at:
  2499 ;;		line 3 in file "tim.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;		None
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;		None
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      void 
  2506 ;; Registers used:
  2507 ;;		wreg, status,2
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2517 ;;Total ram usage:        0 bytes
  2518 ;; Hardware stack levels used: 1
  2519 ;; Hardware stack levels required when called: 2
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_SCHED_vInitSystem
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           	psect	text24
  2528   000796                     __ptext24:
  2529                           	callstack 0
  2530   000796                     _TIM_vInit:
  2531                           	callstack 0
  2532   000796  FFFF               	dw	65535	; assembler added errata NOP
  2533                           
  2534                           ;tim.c: 5: T2CONbits.TMR2ON = 0b0;
  2535                           
  2536                           ;incstack = 0
  2537   000798  94CA               	bcf	202,2,c	;volatile
  2538                           
  2539                           ;tim.c: 6: TMR2 = 0x00;
  2540   00079A  0E00               	movlw	0
  2541   00079C  6ECC               	movwf	204,c	;volatile
  2542                           
  2543                           ;tim.c: 7: T2CON = 0x00;
  2544   00079E  0E00               	movlw	0
  2545   0007A0  6ECA               	movwf	202,c	;volatile
  2546                           
  2547                           ;tim.c: 8: PR2 = 0x00;
  2548   0007A2  0E00               	movlw	0
  2549   0007A4  6ECB               	movwf	203,c	;volatile
  2550                           
  2551                           ;tim.c: 10: T2CONbits.TOUTPS = 0b0100;
  2552   0007A6  50CA               	movf	202,w,c	;volatile
  2553   0007A8  0B87               	andlw	-121
  2554   0007AA  0920               	iorlw	32
  2555   0007AC  6ECA               	movwf	202,c	;volatile
  2556                           
  2557                           ;tim.c: 11: T2CONbits.T2CKPS = 0b01;
  2558   0007AE  50CA               	movf	202,w,c	;volatile
  2559   0007B0  0BFC               	andlw	-4
  2560   0007B2  0901               	iorlw	1
  2561   0007B4  6ECA               	movwf	202,c	;volatile
  2562                           
  2563                           ;tim.c: 12: PR2 = 125;
  2564   0007B6  0E7D               	movlw	125
  2565   0007B8  6ECB               	movwf	203,c	;volatile
  2566                           
  2567                           ;tim.c: 14: PIR1bits.TMR2IF = 0b0;
  2568   0007BA  929E               	bcf	158,1,c	;volatile
  2569                           
  2570                           ;tim.c: 15: IPR1bits.TMR2IP = 0b1;
  2571   0007BC  829F               	bsf	159,1,c	;volatile
  2572                           
  2573                           ;tim.c: 16: PIE1bits.TMR2IE = 0b1;
  2574   0007BE  829D               	bsf	157,1,c	;volatile
  2575                           
  2576                           ;tim.c: 17: INTCONbits.PEIE = 1;
  2577   0007C0  8CF2               	bsf	242,6,c	;volatile
  2578                           
  2579                           ;tim.c: 18: INTCONbits.GIE = 1;
  2580   0007C2  8EF2               	bsf	242,7,c	;volatile
  2581                           
  2582                           ;tim.c: 20: T2CONbits.TMR2ON = 0b1;
  2583   0007C4  84CA               	bsf	202,2,c	;volatile
  2584   0007C6  0012               	return		;funcret
  2585   0007C8  FFFF               	dw	65535	; errata NOP
  2586   0007CA                     __end_of_TIM_vInit:
  2587                           	callstack 0
  2588                           
  2589 ;; *************** function _PCS_vInit *****************
  2590 ;; Defined at:
  2591 ;;		line 3 in file "pcs.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;		None
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;		None
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  1    wreg      void 
  2598 ;; Registers used:
  2599 ;;		wreg, status,2
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2609 ;;Total ram usage:        0 bytes
  2610 ;; Hardware stack levels used: 1
  2611 ;; Hardware stack levels required when called: 2
  2612 ;; This function calls:
  2613 ;;		Nothing
  2614 ;; This function is called by:
  2615 ;;		_SCHED_vInitSystem
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text25
  2620   000826                     __ptext25:
  2621                           	callstack 0
  2622   000826                     _PCS_vInit:
  2623                           	callstack 0
  2624   000826  FFFF               	dw	65535	; assembler added errata NOP
  2625                           
  2626                           ;pcs.c: 5: TRISAbits.RA0 = 1;
  2627                           
  2628                           ;incstack = 0
  2629   000828  8092               	bsf	146,0,c	;volatile
  2630                           
  2631                           ;pcs.c: 6: TRISAbits.RA1 = 1;
  2632   00082A  8292               	bsf	146,1,c	;volatile
  2633                           
  2634                           ;pcs.c: 8: TRISCbits.RC0 = 1;
  2635   00082C  8094               	bsf	148,0,c	;volatile
  2636                           
  2637                           ;pcs.c: 9: TRISCbits.RC1 = 1;
  2638   00082E  8294               	bsf	148,1,c	;volatile
  2639                           
  2640                           ;pcs.c: 10: TRISCbits.RC2 = 1;
  2641   000830  8494               	bsf	148,2,c	;volatile
  2642                           
  2643                           ;pcs.c: 11: TRISCbits.RC3 = 1;
  2644   000832  8694               	bsf	148,3,c	;volatile
  2645                           
  2646                           ;pcs.c: 12: TRISCbits.RC4 = 1;
  2647   000834  8894               	bsf	148,4,c	;volatile
  2648                           
  2649                           ;pcs.c: 14: TRISD = 0x00;
  2650   000836  0E00               	movlw	0
  2651   000838  6E95               	movwf	149,c	;volatile
  2652                           
  2653                           ;pcs.c: 16: TRISEbits.RE0 = 0;
  2654   00083A  9096               	bcf	150,0,c	;volatile
  2655                           
  2656                           ;pcs.c: 17: TRISEbits.RE1 = 0;
  2657   00083C  9296               	bcf	150,1,c	;volatile
  2658   00083E  0012               	return		;funcret
  2659   000840  FFFF               	dw	65535	; errata NOP
  2660   000842                     __end_of_PCS_vInit:
  2661                           	callstack 0
  2662                           
  2663 ;; *************** function _INT_vInit *****************
  2664 ;; Defined at:
  2665 ;;		line 6 in file "int.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;		None
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;		None
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      void 
  2672 ;; Registers used:
  2673 ;;		None
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2683 ;;Total ram usage:        0 bytes
  2684 ;; Hardware stack levels used: 1
  2685 ;; Hardware stack levels required when called: 2
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_SCHED_vInitSystem
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text26
  2694   00086E                     __ptext26:
  2695                           	callstack 0
  2696   00086E                     _INT_vInit:
  2697                           	callstack 0
  2698   00086E  FFFF               	dw	65535	; assembler added errata NOP
  2699                           
  2700                           ;int.c: 9: PIR1bits.ADIF = 0;
  2701                           
  2702                           ;incstack = 0
  2703   000870  9C9E               	bcf	158,6,c	;volatile
  2704                           
  2705                           ;int.c: 10: PIE1bits.ADIE = 1;
  2706   000872  8C9D               	bsf	157,6,c	;volatile
  2707                           
  2708                           ;int.c: 13: PIR1bits.TMR2IF = 0b0;
  2709   000874  929E               	bcf	158,1,c	;volatile
  2710                           
  2711                           ;int.c: 14: IPR1bits.TMR2IP = 0b1;
  2712   000876  829F               	bsf	159,1,c	;volatile
  2713                           
  2714                           ;int.c: 15: PIE1bits.TMR2IE = 0b1;
  2715   000878  829D               	bsf	157,1,c	;volatile
  2716                           
  2717                           ;int.c: 18: INTCONbits.PEIE = 1;
  2718   00087A  8CF2               	bsf	242,6,c	;volatile
  2719                           
  2720                           ;int.c: 19: INTCONbits.GIE = 1;
  2721   00087C  8EF2               	bsf	242,7,c	;volatile
  2722   00087E  0012               	return		;funcret
  2723   000880  FFFF               	dw	65535	; errata NOP
  2724   000882                     __end_of_INT_vInit:
  2725                           	callstack 0
  2726                           
  2727 ;; *************** function _ADC_vInit *****************
  2728 ;; Defined at:
  2729 ;;		line 9 in file "adc.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2747 ;;Total ram usage:        0 bytes
  2748 ;; Hardware stack levels used: 1
  2749 ;; Hardware stack levels required when called: 2
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_SCHED_vInitSystem
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text27
  2758   0006A0                     __ptext27:
  2759                           	callstack 0
  2760   0006A0                     _ADC_vInit:
  2761                           	callstack 0
  2762   0006A0  FFFF               	dw	65535	; assembler added errata NOP
  2763                           
  2764                           ;adc.c: 11: ADRESH = 0x00;
  2765                           
  2766                           ;incstack = 0
  2767   0006A2  0E00               	movlw	0
  2768   0006A4  6EC4               	movwf	196,c	;volatile
  2769                           
  2770                           ;adc.c: 12: ADRESL = 0x00;
  2771   0006A6  0E00               	movlw	0
  2772   0006A8  6EC3               	movwf	195,c	;volatile
  2773                           
  2774                           ;adc.c: 14: ADCON0bits.CHS = 0b0000;
  2775   0006AA  0EC3               	movlw	-61
  2776   0006AC  16C2               	andwf	194,f,c	;volatile
  2777                           
  2778                           ;adc.c: 16: ADCON1bits.VCFG = 0b00;
  2779   0006AE  0ECF               	movlw	-49
  2780   0006B0  16C1               	andwf	193,f,c	;volatile
  2781                           
  2782                           ;adc.c: 17: ADCON1bits.PCFG = 0b1101;
  2783   0006B2  50C1               	movf	193,w,c	;volatile
  2784   0006B4  0BF0               	andlw	-16
  2785   0006B6  090D               	iorlw	13
  2786   0006B8  6EC1               	movwf	193,c	;volatile
  2787                           
  2788                           ;adc.c: 19: ADCON2bits.ADFM = 1;
  2789   0006BA  8EC0               	bsf	192,7,c	;volatile
  2790                           
  2791                           ;adc.c: 20: ADCON2bits.ACQT = 0b100;
  2792   0006BC  50C0               	movf	192,w,c	;volatile
  2793   0006BE  0BC7               	andlw	-57
  2794   0006C0  0920               	iorlw	32
  2795   0006C2  6EC0               	movwf	192,c	;volatile
  2796                           
  2797                           ;adc.c: 21: ADCON2bits.ADCS = 0b001;
  2798   0006C4  50C0               	movf	192,w,c	;volatile
  2799   0006C6  0BF8               	andlw	-8
  2800   0006C8  0901               	iorlw	1
  2801   0006CA  6EC0               	movwf	192,c	;volatile
  2802                           
  2803                           ;adc.c: 23: PIR1bits.ADIF = 0;
  2804   0006CC  9C9E               	bcf	158,6,c	;volatile
  2805                           
  2806                           ;adc.c: 24: PIE1bits.ADIE = 1;
  2807   0006CE  8C9D               	bsf	157,6,c	;volatile
  2808                           
  2809                           ;adc.c: 25: INTCONbits.PEIE = 1;
  2810   0006D0  8CF2               	bsf	242,6,c	;volatile
  2811                           
  2812                           ;adc.c: 26: INTCONbits.GIE = 1;
  2813   0006D2  8EF2               	bsf	242,7,c	;volatile
  2814                           
  2815                           ;adc.c: 28: ADCON0bits.ADON = 1;
  2816   0006D4  80C2               	bsf	194,0,c	;volatile
  2817                           
  2818                           ;adc.c: 29: _delay((unsigned long)((40)*(10000000UL/4000000.0)));
  2819   0006D6  0E19               	movlw	25
  2820   0006D8                     u1207:
  2821   0006D8  FFFF               	dw	65535	; errata NOP
  2822   0006DA  2EE8               	decfsz	wreg,f,c
  2823   0006DC  D7FD               	bra	u1207
  2824                           
  2825                           ;adc.c: 30: ADCON0bits.GO_nDONE = 1;
  2826   0006DE  82C2               	bsf	194,1,c	;volatile
  2827   0006E0  0012               	return		;funcret
  2828   0006E2  FFFF               	dw	65535	; errata NOP
  2829   0006E4                     __end_of_ADC_vInit:
  2830                           	callstack 0
  2831                           
  2832 ;; *************** function _INT_vInterruptHandler *****************
  2833 ;; Defined at:
  2834 ;;		line 22 in file "int.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;		None
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;		None
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2850 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2851 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2852 ;;Total ram usage:        4 bytes
  2853 ;; Hardware stack levels used: 1
  2854 ;; Hardware stack levels required when called: 1
  2855 ;; This function calls:
  2856 ;;		_ADC_vConversionCompleted
  2857 ;;		_SCHED_vTickFunctionCall
  2858 ;; This function is called by:
  2859 ;;		Interrupt level 2
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	intcode
  2864   000008                     __pintcode:
  2865                           	callstack 0
  2866   000008                     _INT_vInterruptHandler:
  2867                           	callstack 0
  2868   000008  FFFF               	dw	65535	; assembler added errata NOP
  2869                           
  2870                           ;incstack = 0
  2871   00000A  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2872   00000C  CFD9 F026          	movff	fsr2l,??_INT_vInterruptHandler
  2873   000010  CFDA F027          	movff	fsr2h,??_INT_vInterruptHandler+1
  2874   000014  CFF3 F028          	movff	prodl,??_INT_vInterruptHandler+2
  2875   000018  CFF4 F029          	movff	prodh,??_INT_vInterruptHandler+3
  2876                           
  2877                           ;int.c: 24: if(PIR1bits.ADIF && ADCON0bits.ADON)
  2878   00001C  BC9E               	btfsc	158,6,c	;volatile
  2879   00001E  A0C2               	btfss	194,0,c	;volatile
  2880   000020  D002               	goto	i2l1393
  2881                           
  2882                           ;int.c: 25: {;int.c: 26: ADC_vConversionCompleted();
  2883   000022  EC21  F002         	call	_ADC_vConversionCompleted	;wreg free
  2884   000026                     i2l1393:
  2885   000026  FFFF               	dw	65535	; assembler added errata NOP
  2886                           
  2887                           ;int.c: 27: };int.c: 29: if(PIR1bits.TMR2IF && T2CONbits.TMR2ON)
  2888   000028  B29E               	btfsc	158,1,c	;volatile
  2889   00002A  A4CA               	btfss	202,2,c	;volatile
  2890   00002C  D003               	goto	i2l141
  2891                           
  2892                           ;int.c: 30: {;int.c: 31: SCHED_vTickFunctionCall();
  2893   00002E  EC2C  F004         	call	_SCHED_vTickFunctionCall	;wreg free
  2894                           
  2895                           ;int.c: 32: PIR1bits.TMR2IF = 0b0;
  2896   000032  929E               	bcf	158,1,c	;volatile
  2897   000034                     i2l141:
  2898   000034  FFFF               	dw	65535	; assembler added errata NOP
  2899   000036  C029  FFF4         	movff	??_INT_vInterruptHandler+3,prodh
  2900   00003A  C028  FFF3         	movff	??_INT_vInterruptHandler+2,prodl
  2901   00003E  C027  FFDA         	movff	??_INT_vInterruptHandler+1,fsr2h
  2902   000042  C026  FFD9         	movff	??_INT_vInterruptHandler,fsr2l
  2903   000046  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2904   000048  0011               	retfie		f
  2905   00004A  FFFF               	dw	65535	; errata NOP
  2906   00004C                     __end_of_INT_vInterruptHandler:
  2907                           	callstack 0
  2908                           
  2909 ;; *************** function _SCHED_vTickFunctionCall *****************
  2910 ;; Defined at:
  2911 ;;		line 21 in file "sched.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;		None
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;		None
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      void 
  2918 ;; Registers used:
  2919 ;;		wreg, status,2, status,0
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2929 ;;Total ram usage:        0 bytes
  2930 ;; Hardware stack levels used: 1
  2931 ;; This function calls:
  2932 ;;		Nothing
  2933 ;; This function is called by:
  2934 ;;		_INT_vInterruptHandler
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text29
  2939   000858                     __ptext29:
  2940                           	callstack 0
  2941   000858                     _SCHED_vTickFunctionCall:
  2942                           	callstack 0
  2943   000858  FFFF               	dw	65535	; assembler added errata NOP
  2944                           
  2945                           ;sched.c: 23: ++sched_gTick10ms;
  2946                           
  2947                           ;incstack = 0
  2948   00085A  2A1F               	incf	_sched_gTick10ms^0,f,c
  2949                           
  2950                           ;sched.c: 24: ++sched_gTick100ms;
  2951   00085C  2A1E               	incf	_sched_gTick100ms^0,f,c
  2952                           
  2953                           ;sched.c: 25: ++sched_gTick1s;
  2954   00085E  4A18               	infsnz	_sched_gTick1s^0,f,c
  2955   000860  2A19               	incf	(_sched_gTick1s+1)^0,f,c
  2956                           
  2957                           ;sched.c: 26: sched_bTicked = 1;;
  2958   000862  0E00               	movlw	0
  2959   000864  6E17               	movwf	(_sched_bTicked+1)^0,c
  2960   000866  0E01               	movlw	1
  2961   000868  6E16               	movwf	_sched_bTicked^0,c
  2962   00086A  0012               	return		;funcret
  2963   00086C  FFFF               	dw	65535	; errata NOP
  2964   00086E                     __end_of_SCHED_vTickFunctionCall:
  2965                           	callstack 0
  2966                           
  2967 ;; *************** function _ADC_vConversionCompleted *****************
  2968 ;; Defined at:
  2969 ;;		line 40 in file "adc.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;		None
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2985 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2986 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2987 ;;Total ram usage:        3 bytes
  2988 ;; Hardware stack levels used: 1
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		_INT_vInterruptHandler
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           	psect	text30
  2997   000442                     __ptext30:
  2998                           	callstack 0
  2999   000442                     _ADC_vConversionCompleted:
  3000                           	callstack 0
  3001   000442  FFFF               	dw	65535	; assembler added errata NOP
  3002                           
  3003                           ;adc.c: 42: au16AdcReadValue[ADCON0bits.CHS0] = (ADRESH << 8) | ADRESL;
  3004                           
  3005                           ;incstack = 0
  3006   000444  50C3               	movf	195,w,c	;volatile
  3007   000446  CFC4 F023          	movff	4036,??_ADC_vConversionCompleted	;volatile
  3008   00044A  6A24               	clrf	(??_ADC_vConversionCompleted+1)^0,c
  3009   00044C  C023  F024         	movff	??_ADC_vConversionCompleted,??_ADC_vConversionCompleted+1
  3010   000450  6A23               	clrf	??_ADC_vConversionCompleted^0,c
  3011   000452  1223               	iorwf	??_ADC_vConversionCompleted^0,f,c
  3012   000454  0E00               	movlw	0
  3013   000456  1224               	iorwf	(??_ADC_vConversionCompleted+1)^0,f,c
  3014   000458  A4C2               	btfss	194,2,c	;volatile
  3015   00045A  D003               	goto	i2u45_40
  3016   00045C  6A25               	clrf	(??_ADC_vConversionCompleted+2)^0,c
  3017   00045E  2A25               	incf	(??_ADC_vConversionCompleted+2)^0,f,c
  3018   000460  D002               	goto	i2u45_48
  3019   000462                     i2u45_40:
  3020   000462  FFFF               	dw	65535	; assembler added errata NOP
  3021   000464  6A25               	clrf	(??_ADC_vConversionCompleted+2)^0,c
  3022   000466                     i2u45_48:
  3023   000466  FFFF               	dw	65535	; assembler added errata NOP
  3024   000468  5025               	movf	(??_ADC_vConversionCompleted+2)^0,w,c
  3025   00046A  0D02               	mullw	2
  3026   00046C  0E12               	movlw	low _au16AdcReadValue
  3027   00046E  24F3               	addwf	243,w,c
  3028   000470  6ED9               	movwf	fsr2l,c
  3029   000472  0E00               	movlw	high _au16AdcReadValue
  3030   000474  20F4               	addwfc	prodh,w,c
  3031   000476  6EDA               	movwf	fsr2h,c
  3032   000478  C023  FFDE         	movff	??_ADC_vConversionCompleted,postinc2
  3033   00047C  C024  FFDD         	movff	??_ADC_vConversionCompleted+1,postdec2
  3034                           
  3035                           ;adc.c: 43: ADCON0bits.CHS0 = !ADCON0bits.CHS0;
  3036   000480  B4C2               	btfsc	194,2,c	;volatile
  3037   000482  D003               	goto	i2u46_40
  3038   000484  6A23               	clrf	??_ADC_vConversionCompleted^0,c
  3039   000486  2A23               	incf	??_ADC_vConversionCompleted^0,f,c
  3040   000488  D002               	goto	i2u47_48
  3041   00048A                     i2u46_40:
  3042   00048A  FFFF               	dw	65535	; assembler added errata NOP
  3043   00048C  6A23               	clrf	??_ADC_vConversionCompleted^0,c
  3044   00048E                     i2u47_48:
  3045   00048E  FFFF               	dw	65535	; assembler added errata NOP
  3046   000490  4623               	rlncf	??_ADC_vConversionCompleted^0,f,c
  3047   000492  4623               	rlncf	??_ADC_vConversionCompleted^0,f,c
  3048   000494  50C2               	movf	194,w,c	;volatile
  3049   000496  1823               	xorwf	??_ADC_vConversionCompleted^0,w,c
  3050   000498  0BFB               	andlw	-5
  3051   00049A  1823               	xorwf	??_ADC_vConversionCompleted^0,w,c
  3052   00049C  6EC2               	movwf	194,c	;volatile
  3053                           
  3054                           ;adc.c: 44: PIR1bits.ADIF = 0;
  3055   00049E  9C9E               	bcf	158,6,c	;volatile
  3056                           
  3057                           ;adc.c: 45: ADCON0bits.GO_nDONE = 1;
  3058   0004A0  82C2               	bsf	194,1,c	;volatile
  3059   0004A2  0012               	return		;funcret
  3060   0004A4  FFFF               	dw	65535	; errata NOP
  3061   0004A6                     __end_of_ADC_vConversionCompleted:
  3062                           	callstack 0
  3063   0004A6  FFFF               	dw	65535	; assembler added errata NOP
  3064                           
  3065                           	psect	text31
  3066   000000                     __ptext31:
  3067                           	callstack 0
  3068                           
  3069                           	psect	rparam
  3070   000000                     
  3071                           	psect	temp
  3072   00003C                     btemp:
  3073                           	callstack 0
  3074   00003C                     	ds	1
  3075   000000                     int$flags	set	btemp
  3076   000000                     wtemp8	set	btemp+1
  3077   000000                     ttemp5	set	btemp+1
  3078   000000                     ttemp6	set	btemp+4
  3079   000000                     ttemp7	set	btemp+8
  3080                           
  3081                           	psect	idloc
  3082                           
  3083                           ;Config register IDLOC0 @ 0x200000
  3084                           ;	unspecified, using default values
  3085   200000                     	org	2097152
  3086   200000  FF                 	db	255
  3087                           
  3088                           ;Config register IDLOC1 @ 0x200001
  3089                           ;	unspecified, using default values
  3090   200001                     	org	2097153
  3091   200001  FF                 	db	255
  3092                           
  3093                           ;Config register IDLOC2 @ 0x200002
  3094                           ;	unspecified, using default values
  3095   200002                     	org	2097154
  3096   200002  FF                 	db	255
  3097                           
  3098                           ;Config register IDLOC3 @ 0x200003
  3099                           ;	unspecified, using default values
  3100   200003                     	org	2097155
  3101   200003  FF                 	db	255
  3102                           
  3103                           ;Config register IDLOC4 @ 0x200004
  3104                           ;	unspecified, using default values
  3105   200004                     	org	2097156
  3106   200004  FF                 	db	255
  3107                           
  3108                           ;Config register IDLOC5 @ 0x200005
  3109                           ;	unspecified, using default values
  3110   200005                     	org	2097157
  3111   200005  FF                 	db	255
  3112                           
  3113                           ;Config register IDLOC6 @ 0x200006
  3114                           ;	unspecified, using default values
  3115   200006                     	org	2097158
  3116   200006  FF                 	db	255
  3117                           
  3118                           ;Config register IDLOC7 @ 0x200007
  3119                           ;	unspecified, using default values
  3120   200007                     	org	2097159
  3121   200007  FF                 	db	255
  3122                           
  3123                           	psect	config
  3124                           
  3125                           ; Padding undefined space
  3126   300000                     	org	3145728
  3127   300000  FF                 	db	255
  3128                           
  3129                           ;Config register CONFIG1H @ 0x300001
  3130                           ;	unspecified, using default values
  3131                           ;	Oscillator
  3132                           ;	OSC = 0xF, unprogrammed default
  3133                           ;	Osc. Switch Enable
  3134                           ;	OSCS = 0x1, unprogrammed default
  3135   300001                     	org	3145729
  3136   300001  2F                 	db	47
  3137                           
  3138                           ;Config register CONFIG2L @ 0x300002
  3139                           ;	unspecified, using default values
  3140                           ;	Power Up Timer
  3141                           ;	PWRT = 0x1, unprogrammed default
  3142                           ;	Brown Out Detect
  3143                           ;	BOR = 0x1, unprogrammed default
  3144                           ;	Brown Out Voltage
  3145                           ;	BORV = 0x3, unprogrammed default
  3146   300002                     	org	3145730
  3147   300002  0F                 	db	15
  3148                           
  3149                           ;Config register CONFIG2H @ 0x300003
  3150                           ;	unspecified, using default values
  3151                           ;	Watchdog Timer
  3152                           ;	WDT = 0x1, unprogrammed default
  3153                           ;	Watchdog Postscaler
  3154                           ;	WDTPS = 0xF, unprogrammed default
  3155   300003                     	org	3145731
  3156   300003  1F                 	db	31
  3157                           
  3158                           ;Config register CONFIG3L @ 0x300004
  3159                           ;	unspecified, using default values
  3160   300004                     	org	3145732
  3161   300004  83                 	db	131
  3162                           
  3163                           ;Config register CONFIG3H @ 0x300005
  3164                           ;	unspecified, using default values
  3165                           ;	CCP2 Mux
  3166                           ;	CCP2MX = 0x1, unprogrammed default
  3167                           ;	MCLR enable
  3168                           ;	MCLRE = 0x1, unprogrammed default
  3169   300005                     	org	3145733
  3170   300005  83                 	db	131
  3171                           
  3172                           ;Config register CONFIG4L @ 0x300006
  3173                           ;	unspecified, using default values
  3174                           ;	Stack Overflow Reset
  3175                           ;	STVR = 0x1, unprogrammed default
  3176                           ;	Low Voltage Program
  3177                           ;	LVP = 0x1, unprogrammed default
  3178                           ;	Background Debugger Enable bit
  3179                           ;	DEBUG = 0x1, unprogrammed default
  3180   300006                     	org	3145734
  3181   300006  85                 	db	133
  3182                           
  3183                           ; Padding undefined space
  3184   300007                     	org	3145735
  3185   300007  FF                 	db	255
  3186                           
  3187                           ;Config register CONFIG5L @ 0x300008
  3188                           ;	unspecified, using default values
  3189                           ;	Code Protect 000800-0003FFF
  3190                           ;	CP0 = 0x1, unprogrammed default
  3191                           ;	Code Protect 0004000-007FFF
  3192                           ;	CP1 = 0x1, unprogrammed default
  3193                           ;	Code Protect 008000-00BFFF
  3194                           ;	CP2 = 0x1, unprogrammed default
  3195   300008                     	org	3145736
  3196   300008  0F                 	db	15
  3197                           
  3198                           ;Config register CONFIG5H @ 0x300009
  3199                           ;	unspecified, using default values
  3200                           ;	Code Protect Boot
  3201                           ;	CPB = 0x1, unprogrammed default
  3202                           ;	Data EE Read Protect
  3203                           ;	CPD = 0x1, unprogrammed default
  3204   300009                     	org	3145737
  3205   300009  C0                 	db	192
  3206                           
  3207                           ;Config register CONFIG6L @ 0x30000A
  3208                           ;	unspecified, using default values
  3209                           ;	Table Write Protect 00800-003FFF
  3210                           ;	WRT0 = 0x1, unprogrammed default
  3211                           ;	Table Write Protect 004000-007FFF
  3212                           ;	WRT1 = 0x1, unprogrammed default
  3213                           ;	Table Write Protect 08000-0BFFF
  3214                           ;	WRT2 = 0x1, unprogrammed default
  3215   30000A                     	org	3145738
  3216   30000A  0F                 	db	15
  3217                           
  3218                           ;Config register CONFIG6H @ 0x30000B
  3219                           ;	unspecified, using default values
  3220                           ;	Config. Write Protect
  3221                           ;	WRTC = 0x1, unprogrammed default
  3222                           ;	Table Write Protect Boot
  3223                           ;	WRTB = 0x1, unprogrammed default
  3224                           ;	Data EE Write Protect
  3225                           ;	WRTD = 0x1, unprogrammed default
  3226   30000B                     	org	3145739
  3227   30000B  E0                 	db	224
  3228                           
  3229                           ;Config register CONFIG7L @ 0x30000C
  3230                           ;	unspecified, using default values
  3231                           ;	Table Read Protect 00800-003FFF
  3232                           ;	EBTR0 = 0x1, unprogrammed default
  3233                           ;	Table Read Protect 004000-07FFF
  3234                           ;	EBTR1 = 0x1, unprogrammed default
  3235                           ;	Table Read Protect 08000-0BFFF
  3236                           ;	EBTR2 = 0x1, unprogrammed default
  3237   30000C                     	org	3145740
  3238   30000C  0F                 	db	15
  3239                           
  3240                           ;Config register CONFIG7H @ 0x30000D
  3241                           ;	unspecified, using default values
  3242                           ;	Table Read Protect Boot
  3243                           ;	EBTRB = 0x1, unprogrammed default
  3244   30000D                     	org	3145741
  3245   30000D  40                 	db	64
  3246                           tosu	equ	0xFFF
  3247                           tosh	equ	0xFFE
  3248                           tosl	equ	0xFFD
  3249                           stkptr	equ	0xFFC
  3250                           pclatu	equ	0xFFB
  3251                           pclath	equ	0xFFA
  3252                           pcl	equ	0xFF9
  3253                           tblptru	equ	0xFF8
  3254                           tblptrh	equ	0xFF7
  3255                           tblptrl	equ	0xFF6
  3256                           tablat	equ	0xFF5
  3257                           prodh	equ	0xFF4
  3258                           prodl	equ	0xFF3
  3259                           indf0	equ	0xFEF
  3260                           postinc0	equ	0xFEE
  3261                           postdec0	equ	0xFED
  3262                           preinc0	equ	0xFEC
  3263                           plusw0	equ	0xFEB
  3264                           fsr0h	equ	0xFEA
  3265                           fsr0l	equ	0xFE9
  3266                           wreg	equ	0xFE8
  3267                           indf1	equ	0xFE7
  3268                           postinc1	equ	0xFE6
  3269                           postdec1	equ	0xFE5
  3270                           preinc1	equ	0xFE4
  3271                           plusw1	equ	0xFE3
  3272                           fsr1h	equ	0xFE2
  3273                           fsr1l	equ	0xFE1
  3274                           bsr	equ	0xFE0
  3275                           indf2	equ	0xFDF
  3276                           postinc2	equ	0xFDE
  3277                           postdec2	equ	0xFDD
  3278                           preinc2	equ	0xFDC
  3279                           plusw2	equ	0xFDB
  3280                           fsr2h	equ	0xFDA
  3281                           fsr2l	equ	0xFD9
  3282                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     23      59
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    S944s_stateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoEventPoll(), 

    demoSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoEventPoll(), 

    S944s_stateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoState2(), LIGHTS_DemoState1(), 

    demoSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_DemoState2(), LIGHTS_DemoState1(), 

    LIGHTS_toggleSideHazardLights@toggle	PTR unsigned char  size(2) Largest target is 1
		 -> LIGHTS_BlinkSwitchOnState@toggleLights(COMRAM[1]), 

    LIGHTS_toggleAllHazardLights@toggle	PTR unsigned char  size(2) Largest target is 1
		 -> LIGHTS_BlinkPasiveState@toggleLights(COMRAM[1]), 

    S26s_blinkStateMachine$_pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_BlinkEventPoll(), 

    blinkerSM._pollEvents	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_BlinkEventPoll(), 

    S26s_blinkStateMachine$_currentState	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_BlinkSwitchOffState(), LIGHTS_BlinkSwitchOnState(), LIGHTS_BlinkPasiveState(), 

    blinkerSM._currentState	PTR FTN()void  size(2) Largest target is 1
		 -> LIGHTS_BlinkSwitchOffState(), LIGHTS_BlinkSwitchOnState(), LIGHTS_BlinkPasiveState(), 


Critical Paths under _main in COMRAM

    _LIGHTS_BlinkSwitchOnState->_LIGHTS_toggleSideHazardLights
    _LIGHTS_toggleSideHazardLights->_IOC_vSetOutputPort
    _LIGHTS_setSideHazardLights->_IOC_vSetOutputPort
    _LIGHTS_BlinkSwitchOffState->_LIGHTS_setAllHazardLights
    _LIGHTS_BlinkPasiveState->_LIGHTS_toggleAllHazardLights
    _LIGHTS_toggleAllHazardLights->_IOC_vSetOutputPort
    _LIGHTS_setAllHazardLights->_IOC_vSetOutputPort
    _IOC_vSetOutputPort->_PCS_vSetOutputPortD
    _IOC_vSetOutputPort->_PCS_vSetOutputPortE
    _LIGHTS_BlinkEventPoll->_IOC_T16GetInputPort
    _IOC_T16GetInputPort->_PCS_T16GetInputPortC

Critical Paths under _INT_vInterruptHandler in COMRAM

    _INT_vInterruptHandler->_ADC_vConversionCompleted

Critical Paths under _main in BANK0

    None.

Critical Paths under _INT_vInterruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT_vInterruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT_vInterruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT_vInterruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT_vInterruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT_vInterruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT_vInterruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT_vInterruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INT_vInterruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INT_vInterruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INT_vInterruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INT_vInterruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INT_vInterruptHandler in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   27234
                  _SCHED_vInitSystem
              _SCHED_vStartScheduler
 ---------------------------------------------------------------------------------
 (1) _SCHED_vStartScheduler                                0     0      0   27234
                    _TASK_vTask100ms
                     _TASK_vTask10ms
                      _TASK_vTask1ms
                       _TASK_vTask1s
                  _TASK_vTaskAppInit
 ---------------------------------------------------------------------------------
 (2) _TASK_vTaskAppInit                                    0     0      0       0
                _LIGHTS_BlinkersInit
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_BlinkersInit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask1s                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask1ms                                        0     0      0   27234
                 _LIGHTS_BlinkersRun
 ---------------------------------------------------------------------------------
 (3) _LIGHTS_BlinkersRun                                   0     0      0   27234
              _LIGHTS_BlinkEventPoll *
            _LIGHTS_BlinkPasiveState *
         _LIGHTS_BlinkSwitchOffState *
          _LIGHTS_BlinkSwitchOnState *
 ---------------------------------------------------------------------------------
 (4) _LIGHTS_BlinkSwitchOnState                            0     0      0   13393
          _LIGHTS_setAllHazardLights
         _LIGHTS_setSideHazardLights
      _LIGHTS_toggleSideHazardLights
 ---------------------------------------------------------------------------------
 (5) _LIGHTS_toggleSideHazardLights                        3     0      3    4577
                                             20 COMRAM     3     0      3
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (5) _LIGHTS_setSideHazardLights                           2     1      1    4457
                                             20 COMRAM     2     1      1
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (4) _LIGHTS_BlinkSwitchOffState                           0     0      0    4359
          _LIGHTS_setAllHazardLights
 ---------------------------------------------------------------------------------
 (4) _LIGHTS_BlinkPasiveState                              0     0      0    8838
          _LIGHTS_setAllHazardLights
       _LIGHTS_toggleAllHazardLights
 ---------------------------------------------------------------------------------
 (5) _LIGHTS_toggleAllHazardLights                         2     0      2    4479
                                             20 COMRAM     2     0      2
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (5) _LIGHTS_setAllHazardLights                            1     1      0    4359
                                             20 COMRAM     1     1      0
                 _IOC_vSetOutputPort
 ---------------------------------------------------------------------------------
 (6) _IOC_vSetOutputPort                                   5     2      3    4271
                                             15 COMRAM     5     2      3
                _PCS_vSetOutputPortD
                _PCS_vSetOutputPortE
 ---------------------------------------------------------------------------------
 (7) _PCS_vSetOutputPortE                                  8     7      1     234
                                              7 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (7) _PCS_vSetOutputPortD                                  8     7      1     234
                                              7 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (4) _LIGHTS_BlinkEventPoll                                0     0      0     644
                _IOC_T16GetInputPort
 ---------------------------------------------------------------------------------
 (5) _IOC_T16GetInputPort                                  6     4      2     644
                                             17 COMRAM     6     4      2
                _ADC_u16ReadAdcValue
               _PCS_T16GetInputPortC
 ---------------------------------------------------------------------------------
 (6) _PCS_T16GetInputPortC                                10     8      2     113
                                              7 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _ADC_u16ReadAdcValue                                  6     4      2      91
                                              7 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask10ms                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TASK_vTask100ms                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SCHED_vInitSystem                                    0     0      0       0
                          _ADC_vInit
                          _INT_vInit
                          _PCS_vInit
                          _TIM_vInit
 ---------------------------------------------------------------------------------
 (2) _TIM_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PCS_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_vInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INT_vInterruptHandler                                4     4      0       0
                                              3 COMRAM     4     4      0
           _ADC_vConversionCompleted
            _SCHED_vTickFunctionCall
 ---------------------------------------------------------------------------------
 (9) _SCHED_vTickFunctionCall                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _ADC_vConversionCompleted                             3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SCHED_vInitSystem
     _ADC_vInit
     _INT_vInit
     _PCS_vInit
     _TIM_vInit
   _SCHED_vStartScheduler
     _TASK_vTask100ms
     _TASK_vTask10ms
     _TASK_vTask1ms
       _LIGHTS_BlinkersRun
         _LIGHTS_BlinkEventPoll *
           _IOC_T16GetInputPort
             _ADC_u16ReadAdcValue
             _PCS_T16GetInputPortC
         _LIGHTS_BlinkPasiveState *
           _LIGHTS_setAllHazardLights
             _IOC_vSetOutputPort
               _PCS_vSetOutputPortD
               _PCS_vSetOutputPortE
           _LIGHTS_toggleAllHazardLights
             _IOC_vSetOutputPort
         _LIGHTS_BlinkSwitchOffState *
           _LIGHTS_setAllHazardLights
         _LIGHTS_BlinkSwitchOnState *
           _LIGHTS_setAllHazardLights
           _LIGHTS_setSideHazardLights
             _IOC_vSetOutputPort
           _LIGHTS_toggleSideHazardLights
             _IOC_vSetOutputPort
     _TASK_vTask1s
     _TASK_vTaskAppInit
       _LIGHTS_BlinkersInit

 _INT_vInterruptHandler (ROOT)
   _ADC_vConversionCompleted
   _SCHED_vTickFunctionCall

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      39        0.0%
EEDATA             400      0       0       0        0.0%
BITBIGSFRllll      282      0       0      38        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     17      3B       1       62.8%
BITBIGSFRhlhh       25      0       0      32        0.0%
BITBIGSFRlh         20      0       0      34        0.0%
BITBIGSFRlllh        D      0       0      37        0.0%
BITBIGSFRhh          D      0       0      31        0.0%
BITBIGSFRllhh        6      0       0      35        0.0%
BITBIGSFRhll         5      0       0      33        0.0%
BITBIGSFRllhl        1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3B       6        0.0%
DATA                 0      0      3B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Nov 18 22:13:41 2022

                                                                       l26 0600  
                                                                       l44 01C6  
                                                                       l62 0114  
                                                                       l71 0652  
                                                                      l112 0736  
                                                                      l114 073E  
                                                                      l162 02F8  
                                                                      l171 027A  
                                                                      l180 04BC  
                                                                      l164 0300  
                                                                      l173 0282  
                                                                      l182 04C4  
                                                                      l167 034A  
                                                                      l176 02CC  
                                                                      l267 071C  
                                                                      _PR2 000FCB  
                                                                      u700 0262  
                                                                      u710 0266  
                                                                      u640 02E0  
                                                                      u650 02E4  
                                                                      u804 04E0  
                                                                      u805 04DA  
                                                                      u814 04F6  
                                                                      u910 019C  
                                                                      u815 04F0  
                                                                      u744 02A0  
                                                                      u745 029A  
                                                                      u754 02C0  
                                                                      u755 02BA  
                                                                      u684 031E  
                                                                      u685 0318  
                                                                      u694 033E  
                                                                      u695 0338  
                                                                      prod 000FF3  
                                                                      tosl 000FFD  
                                                                      wreg 000FE8  
                                                                     l1513 0206  
                                                                     l1523 05DE  
                                                                     l1515 0238  
                                                                     l1533 058A  
                                                                     l1621 00DA  
                                                                     l1605 00A4  
                                                                     l1607 00AA  
                                                                     l1537 05A4  
                                                                     l1561 016E  
                                                                     l1705 0422  
                                                                     l1467 032A  
                                                                     l1651 063A  
                                                                     l1571 018E  
                                                                     l1555 014A  
                                                                     l1563 0176  
                                                                     l1547 0132  
                                                                     l1485 0706  
                                                                     l1645 061E  
                                                                     l1479 02AC  
                                                                     l1593 0066  
                                                                     l1599 007C  
                                                                     l1687 03EA  
                                                                     l1699 0410  
                                                                     u1030 0648  
                                                                     u1207 06D8  
                                                                     u1058 0514  
                                                                     u1059 052C  
                                                                     u1078 053E  
                                                                     u1079 0556  
                                                                     _TMR2 000FCC  
                                    __end_of_LIGHTS_toggleSideHazardLights 0254  
                                            _LIGHTS_toggleSideHazardLights 01CC  
                                                                     _main 0882  
                                                                     fsr2h 000FDA  
                                                                     indf2 000FDF  
                                                                     fsr2l 000FD9  
                                                                     btemp 003C  
                                           PCS_vSetOutputPortD@u8BitNumber 0030  
                                                                     prodh 000FF4  
                                                                     prodl 000FF3  
                                                                     start 004C  
                                                    ?_PCS_T16GetInputPortC 002A  
                                                             ___param_bank 000000  
                                                    _INT_vInterruptHandler 0008  
                                                      _LIGHTS_BlinkersInit 07FC  
                                             ??_LIGHTS_setSideHazardLights 0038  
                                          __end_of_SCHED_vTickFunctionCall 086E  
                                                                    ?_main 0023  
                                                       _IOC_vSetOutputPort 06E4  
                                                                    _T2CON 000FCA  
                                                                    i2l141 0034  
                                         LIGHTS_BlinkSwitchOnState@counter 001A  
                                                                    _PORTC 000F82  
                                                                    _PORTD 000F83  
                                                                    _PORTE 000F84  
                                                                    _TRISD 000F95  
                                                      ?_IOC_vSetOutputPort 0032  
                                                     ?_LIGHTS_BlinkersInit 0023  
                                                                    pclath 000FFA  
                                                                    tablat 000FF5  
                                                                    ttemp5 003D  
                                                                    ttemp6 0040  
                                                                    ttemp7 0044  
                                                                    status 000FD8  
                                                        __end_of_ADC_vInit 06E4  
                                                                    wtemp8 003D  
                                           PCS_vSetOutputPortE@u8BitNumber 0030  
                                                          __initialization 07CA  
                                                     ??_IOC_vSetOutputPort 0035  
                                                             __end_of_main 0890  
                                            __end_of_SCHED_vStartScheduler 0442  
                                                                   ??_main 003A  
                                                            __activetblptr 000002  
                                      PCS_vSetOutputPortD@u8BitNumberValue 0031  
                                                    __end_of_TASK_vTask1ms 08A4  
                                                                   _ADRESH 000FC4  
                                                                   _ADRESL 000FC3  
                                                    ??_LIGHTS_BlinkersInit 002A  
                                              ??_LIGHTS_setAllHazardLights 0037  
                                                                   i2l1393 0026  
                                      LIGHTS_BlinkPasiveState@toggleLights 0022  
                                                   ??_PCS_T16GetInputPortC 002C  
                                                        __end_of_INT_vInit 0882  
                                                    _LIGHTS_BlinkEventPoll 0760  
                                                        __end_of_PCS_vInit 0842  
                                           ?_LIGHTS_toggleSideHazardLights 0037  
                                                   ?_INT_vInterruptHandler 0023  
                                       IOC_vSetOutputPort@u16ChannelSelect 0032  
                                                                   _demoSM 000A  
                                                                   clear_0 07E8  
                                           LIGHTS_BlinkPasiveState@counter 001C  
                                                                   isa$std 000001  
                                                        __end_of_TIM_vInit 07CA  
                                                             __pdataCOMRAM 003A  
                                                ?_ADC_vConversionCompleted 0023  
                                      IOC_T16GetInputPort@u16ChannelSelect 0034  
                                                                   tblptrh 000FF7  
                                                                   tblptrl 000FF6  
                                                                   tblptru 000FF8  
                                              __end_of_IOC_T16GetInputPort 05B2  
                                               __end_of_LIGHTS_BlinkersRun 055C  
                                                        _SCHED_vInitSystem 0842  
                                                               __accesstop 0060  
                                                  __end_of__initialization 07EE  
                                                        _TASK_vTaskAppInit 0890  
                                              __end_of_PCS_vSetOutputPortD 0350  
                                              __end_of_PCS_vSetOutputPortE 02D2  
                                                        _LIGHTS_DemoState1 000000  
                                                        _LIGHTS_DemoState2 000000  
                                                       ?_SCHED_vInitSystem 0023  
                                                            ___rparam_used 000001  
                                                       ?_TASK_vTaskAppInit 0023  
                                                           __pcstackCOMRAM 0023  
                                                      ??_SCHED_vInitSystem 002A  
                                                _LIGHTS_setAllHazardLights 0658  
                                       __end_of_LIGHTS_setSideHazardLights 0606  
                                               _LIGHTS_setSideHazardLights 05B2  
                                                           _TASK_vTask10ms 08AA  
                                                      ??_TASK_vTaskAppInit 002A  
                                             ??_LIGHTS_BlinkSwitchOffState 0038  
                                                        ??_TASK_vTask100ms 002A  
                                                __end_of_SCHED_vInitSystem 0858  
                                                __end_of_TASK_vTaskAppInit 089A  
                                                   ?_LIGHTS_BlinkEventPoll 0023  
                                      PCS_vSetOutputPortE@u8BitNumberValue 0031  
                                                   __end_of_TASK_vTask10ms 08B0  
                                                            ?_TASK_vTask1s 0023  
                                                 ?_LIGHTS_BlinkPasiveState 0023  
                                     __end_of_LIGHTS_toggleAllHazardLights 03CC  
                                             _LIGHTS_toggleAllHazardLights 0350  
                                                                  i2u45_40 0462  
                                                                  i2u46_40 048A  
                                                                  i2u45_48 0466  
                                                                  i2u47_48 048E  
                                               ?_LIGHTS_BlinkSwitchOnState 0023  
                                        LIGHTS_toggleSideHazardLights@side 0039  
                                          LIGHTS_setSideHazardLights@value 0038  
                                                                  __Hparam 0000  
                                                                  __Lparam 0000  
                                                                _ADC_vInit 06A0  
                                                          ?_TASK_vTask10ms 0023  
                                         IOC_vSetOutputPort@u16ChannelMask 0035  
                                                           ??_TASK_vTask1s 002A  
                                                                  __pcinit 07CA  
                                                                  __ramtop 1000  
                                                                  __ptext0 0882  
                                                                  __ptext1 03CC  
                                                                  __ptext2 0890  
                                                                  __ptext3 07FC  
                                                                  __ptext4 08A4  
                                                                  __ptext5 089A  
                                                                  __ptext6 0506  
                                                                  __ptext7 011A  
                                                                  __ptext8 0606  
                                                                  __ptext9 0050  
                                                  _PCS_vSetOutputPortD$736 002D  
                                                  _PCS_vSetOutputPortE$742 002D  
                                                                _T2CONbits 000FCA  
                                            ?_LIGHTS_toggleAllHazardLights 0037  
                                                     end_of_initialization 07EE  
                                                            _sched_bTicked 0016  
                                        __end_of_LIGHTS_BlinkSwitchOnState 011A  
                                                            _sched_gTick1s 0018  
                                                  _SCHED_vTickFunctionCall 0858  
                                                            __Lmediumconst 0000  
                                                  ??_INT_vInterruptHandler 0026  
                                                               ?_ADC_vInit 0023  
                                    LIGHTS_BlinkSwitchOnState@toggleLights 0021  
                                         __end_of_ADC_vConversionCompleted 04A6  
                                                      _ADC_u16ReadAdcValue 0722  
                                                                  postdec2 000FDD  
                                                                _INT_vInit 086E  
                                          __end_of_LIGHTS_BlinkPasiveState 01CC  
                                                                  postinc0 000FEE  
                                                                  postinc2 000FDE  
                                                                _PCS_vInit 0826  
                                       __end_of_LIGHTS_BlinkSwitchOffState 0658  
                                               _LIGHTS_BlinkSwitchOffState 0606  
                                                    _SCHED_vStartScheduler 03CC  
                                              __end_of_LIGHTS_BlinkersInit 0826  
                                        LIGHTS_BlinkPasiveState@firstEntry 003B  
                                                                _TRISAbits 000F92  
                                                                _TRISCbits 000F94  
                                                                _TRISEbits 000F96  
                                                                _TIM_vInit 0796  
                                                     ?_ADC_u16ReadAdcValue 002A  
                                            LIGHTS_BlinkSwitchOnState@side 0020  
                                                  _ADC_u16ReadAdcValue$404 002C  
                                                               ?_INT_vInit 0023  
                                                       _LIGHTS_BlinkersRun 0506  
                                              ?_LIGHTS_setSideHazardLights 0037  
                                                               ?_PCS_vInit 0023  
                                                          _TASK_vTask100ms 08B0  
                                                            __pidataCOMRAM 08B6  
                                                      ?_LIGHTS_BlinkersRun 0023  
                                                      start_initialization 07CA  
                                                    ??_ADC_u16ReadAdcValue 002C  
                                                               ?_TIM_vInit 0023  
                                                ??_SCHED_vTickFunctionCall 0023  
                                                  ??_LIGHTS_BlinkEventPoll 003A  
                                                         _sched_gTick100ms 001E  
                                                     __end_of_TASK_vTask1s 08AA  
                                           ??_LIGHTS_toggleAllHazardLights 0039  
                                                     ??_LIGHTS_BlinkersRun 003A  
                                                              ??_ADC_vInit 002A  
                                           LIGHTS_setAllHazardLights@value 0037  
                                                 _ADC_vConversionCompleted 0442  
                                                   ?_SCHED_vStartScheduler 0023  
                                               PCS_vSetOutputPortD@u8Value 002A  
                                                              __pbssCOMRAM 0001  
                                               PCS_vSetOutputPortE@u8Value 002A  
                                     PCS_T16GetInputPortC@u8BitNumberValue 0033  
                                                            _TASK_vTask1ms 089A  
                                              IOC_T16GetInputPort@pinValue 0036  
                                              ??_LIGHTS_BlinkSwitchOnState 003A  
                                                         ??_TASK_vTask10ms 002A  
                                                  __end_of_TASK_vTask100ms 08B6  
                                                                __pintcode 0008  
                                                                _blinkerSM 0001  
                                                              ??_INT_vInit 002A  
                                                              ??_PCS_vInit 002A  
                                      LIGHTS_toggleSideHazardLights@toggle 0037  
                                                              ??_TIM_vInit 002A  
                                                           ?_TASK_vTask1ms 0023  
                                                                 _IPR1bits 000F9F  
                                                                 _PIE1bits 000F9D  
                                            __end_of_INT_vInterruptHandler 004C  
                                                                 _PIR1bits 000F9E  
                                            PCS_vSetOutputPortD@u8BitValue 002F  
                                          PCS_T16GetInputPortC@u8BitNumber 0032  
                                                _LIGHTS_BlinkSwitchOnState 0050  
                                        ADC_u16ReadAdcValue@U8ChannelValue 002E  
                                              ?_LIGHTS_BlinkSwitchOffState 0023  
                                                               _ADCON0bits 000FC2  
                                                               _ADCON1bits 000FC1  
                                                               _ADCON2bits 000FC0  
                                       LIGHTS_toggleAllHazardLights@toggle 0037  
                                            PCS_vSetOutputPortE@u8BitValue 002F  
                                             ADC_u16ReadAdcValue@U8Channel 002F  
                                                          _sched_gTick10ms 001F  
                                               __end_of_IOC_vSetOutputPort 0722  
                                                                 __Hrparam 0000  
                                                         ?_TASK_vTask100ms 0023  
                                                                 __Lrparam 0000  
                                        IOC_T16GetInputPort@u16ChannelMask 0038  
                                                             _TASK_vTask1s 08A4  
                                             __end_of_PCS_T16GetInputPortC 0506  
                                                          ??_TASK_vTask1ms 003A  
                                                      _IOC_T16GetInputPort 055C  
                                                                 __ptext10 01CC  
                                                                 __ptext11 05B2  
                                                                 __ptext20 0722  
                                                                 __ptext12 0350  
                                                                 __ptext21 08AA  
                                                                 __ptext13 0658  
                                                                 __ptext30 0442  
                                                                 __ptext22 08B0  
                                                                 __ptext14 06E4  
                                                                 __ptext31 0000  
                                                                 __ptext23 0842  
                                                                 __ptext15 0254  
                                                                 __ptext24 0796  
                                                                 __ptext16 02D2  
                                                                 __ptext25 0826  
                                                                 __ptext17 0760  
                                                                 __ptext26 086E  
                                                                 __ptext18 055C  
                                                                 __ptext27 06A0  
                                                                 __ptext19 04A8  
                                                                 __ptext29 0858  
                                                      _PCS_vSetOutputPortD 02D2  
                                                      _PCS_vSetOutputPortE 0254  
                                                  _LIGHTS_BlinkPasiveState 011A  
                                            __end_of_LIGHTS_BlinkEventPoll 0796  
                                               ??_ADC_vConversionCompleted 0023  
                                      LIGHTS_BlinkSwitchOnState@firstEntry 003A  
                                                     ?_IOC_T16GetInputPort 0034  
                                                                 isa$xinst 000000  
                                                     ?_PCS_vSetOutputPortD 002A  
                                                     ?_PCS_vSetOutputPortE 002A  
                                                                 int$flags 003C  
                                                  ??_SCHED_vStartScheduler 003A  
                                              __end_of_ADC_u16ReadAdcValue 0760  
                                                               _INTCONbits 000FF2  
                                           LIGHTS_setSideHazardLights@side 0037  
                                          ??_LIGHTS_toggleSideHazardLights 003A  
                                               ?_LIGHTS_setAllHazardLights 0023  
                                                                 intlevel2 08B8  
                                                IOC_vSetOutputPort@u8Value 0034  
                                                    ??_IOC_T16GetInputPort 0036  
                                                    ??_PCS_vSetOutputPortD 002B  
                                                    ??_PCS_vSetOutputPortE 002B  
                                                         _au16AdcReadValue 0012  
                                                 ?_SCHED_vTickFunctionCall 0023  
                                                ??_LIGHTS_BlinkPasiveState 0039  
                                        __end_of_LIGHTS_setAllHazardLights 06A0  
                                                 _PCS_T16GetInputPortC$746 0030  
                                                     _PCS_T16GetInputPortC 04A8  
                                                     _LIGHTS_DemoEventPoll 000000  
